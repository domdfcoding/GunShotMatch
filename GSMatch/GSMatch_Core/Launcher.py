#  !/usr/bin/env python
#   -*- coding: utf-8 -*-
#
#  Launcher.py
"""Main GunShotMatch Window"""
#
#  This file is part of GunShotMatch
#
#  Copyright (c) 2017-2019.  Dominic Davis-Foster <dominic@davis-foster.co.uk>
#
#  GunShotMatch is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  GunShotMatch is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#
# generated by wxGlade 0.9.3 on Tue Apr  9 13:47:34 2019
#

import re
import os
import sys
import csv
import configparser as ConfigParser

from multiprocessing import Process

from domdf_python_tools import str2tuple, list2str
from domdf_python_tools.paths import maybe_make, relpath

from domdf_wxpython_tools.utils import coming_soon
from domdf_wxpython_tools.dialogs import file_dialog
from domdf_wxpython_tools.icons import get_toolbar_icon

import wx
import wx.richtext

from . import ChartViewer, AboutDialog, paths_dialog

from .Config import GSMConfig

from .launcher_tab import launcher_tab
from .help_tab import help_tab
from .compare_tab import compare_tab
from .browse_tab import browse_tab

from .threads import StatusThread, EVT_STATUS, EVT_CONVERSION, EVT_CONVERSION_LOG, EVT_PROJECT, \
	EVT_PROJECT_LOG, EVT_COMPARISON, EVT_COMPARISON_LOG, ConversionThread, ProjectThread, QueueThread, \
	ComparisonThread, conversion_thread_running, project_thread_running, comparison_thread_running, \
	Flask_Thread, EVT_DATA_VIEWER

from data_viewer_server import app as flaskapp



# begin wxGlade: dependencies
import wx.grid
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

class Launcher(wx.Frame):
	def __init__(self, *args, **kwds):
		
		# Menu Bar IDs
		self.menu_radar_id = wx.NewId()
		self.menu_mean_pa_id = wx.NewId()
		self.menu_pa_id = wx.NewId()
		self.menu_bw_id = wx.NewId()
		self.menu_pca_id = wx.NewId()
		
		# begin wxGlade: Launcher.__init__
		kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
		wx.Frame.__init__(self, *args, **kwds)
		
		# Menu Bar
		self.frame_menubar = wx.MenuBar()
		wxglade_tmp_menu = wx.Menu()
		self.frame_menubar.i_paths = wxglade_tmp_menu.Append(wx.ID_ANY, "Configure Paths", "")
		self.Bind(wx.EVT_MENU, self.on_menu_paths, id=self.frame_menubar.i_paths.GetId())
		self.frame_menubar.i_rescan = wxglade_tmp_menu.Append(wx.ID_ANY, "Rescan Files", "")
		self.Bind(wx.EVT_MENU, self.rescan_files, id=self.frame_menubar.i_rescan.GetId())
		wxglade_tmp_menu.AppendSeparator()
		self.frame_menubar.i_about = wxglade_tmp_menu.Append(wx.ID_ANY, "About", "")
		self.Bind(wx.EVT_MENU, self.on_menu_About, id=self.frame_menubar.i_about.GetId())
		wxglade_tmp_menu.AppendSeparator()
		self.frame_menubar.i_exit = wxglade_tmp_menu.Append(wx.ID_ANY, "Exit", "")
		self.Bind(wx.EVT_MENU, self.on_menu_Exit, id=self.frame_menubar.i_exit.GetId())
		self.frame_menubar.Append(wxglade_tmp_menu, "Menu")
		wxglade_tmp_menu = wx.Menu()
		self.frame_menubar.i_menu_radar = wxglade_tmp_menu.Append(self.menu_radar_id, "Radar Chart", "")
		self.Bind(wx.EVT_MENU, self.on_menu_chart, id=self.menu_radar_id)
		self.frame_menubar.i_menu_mean_pa = wxglade_tmp_menu.Append(self.menu_mean_pa_id, "Mean Peak Area", "")
		self.Bind(wx.EVT_MENU, self.on_menu_chart, id=self.menu_mean_pa_id)
		self.frame_menubar.i_menu_pa = wxglade_tmp_menu.Append(self.menu_pa_id, "Peak Area", "")
		self.Bind(wx.EVT_MENU, self.on_menu_chart, id=self.menu_pa_id)
		self.frame_menubar.i_menu_bw = wxglade_tmp_menu.Append(self.menu_bw_id, "Box Whisker", "")
		self.Bind(wx.EVT_MENU, self.on_menu_chart, id=self.menu_bw_id)
		self.frame_menubar.i_menu_pca = wxglade_tmp_menu.Append(self.menu_pca_id, "Principal Component Analysis", "")
		self.Bind(wx.EVT_MENU, self.on_menu_chart, id=self.menu_pca_id)
		self.frame_menubar.Append(wxglade_tmp_menu, "Chart Viewer")
		self.SetMenuBar(self.frame_menubar)
		# Menu Bar end
		self.statusbar = self.CreateStatusBar(2)
		self.statusbar.SetMinHeight(22)
		self.notebook_1 = wx.Notebook(self, wx.ID_ANY)
		self.Launcher = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.Launcher.Bind(wx.EVT_SET_FOCUS, self.refresh_launcher)
		self.launcher_tab = launcher_tab(self, self.Launcher, wx.ID_ANY)
		self.Import = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.import_picker_panel = wx.Panel(self.Import, wx.ID_ANY)
		self.check_list_box_1 = wx.CheckListBox(self.import_picker_panel, wx.ID_ANY, choices=[], style=wx.LB_HSCROLL | wx.LB_MULTIPLE | wx.LB_SORT)
		self.import_btn = wx.Button(self.import_picker_panel, wx.ID_ANY, "Import")
		self.import_log_panel = wx.Panel(self.Import, wx.ID_ANY)
		self.import_log_text_control = wx.TextCtrl(self.import_log_panel, wx.ID_ANY, "", style=wx.TE_CHARWRAP | wx.TE_MULTILINE | wx.TE_READONLY)
		self.New_Project = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.new_project_notebook = wx.Notebook(self.New_Project, wx.ID_ANY, style=wx.NB_BOTTOM)
		self.new_project_settings = wx.Panel(self.new_project_notebook, wx.ID_ANY)
		self.new_project_picker_panel = wx.Panel(self.new_project_settings, wx.ID_ANY)
		self.check_list_box_2 = wx.CheckListBox(self.new_project_picker_panel, wx.ID_ANY, choices=[], style=wx.LB_HSCROLL | wx.LB_MULTIPLE | wx.LB_SORT)
		self.new_project_delete_btn = wx.Button(self.new_project_picker_panel, wx.ID_ANY, "Delete")
		self.new_project_settings_panel = wx.Panel(self.new_project_settings, wx.ID_ANY)
		self.bb_points_value = wx.SpinCtrl(self.new_project_settings_panel, wx.ID_ANY, "0", min=0, max=100, style=0)
		self.bb_scans_value = wx.SpinCtrl(self.new_project_settings_panel, wx.ID_ANY, "0", min=0, max=100, style=0)
		self.alignment_Dw_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.alignment_Gw_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.alignment_min_peaks_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.mass_range_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.base_peak_filter_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.noise_thresh_value = wx.SpinCtrl(self.new_project_settings_panel, wx.ID_ANY, "0", min=0, max=100, style=0)
		self.tophat_struct_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.tophat_struct_units = wx.Choice(self.new_project_settings_panel, wx.ID_ANY, choices=["min", "sec", "ms"])
		self.target_range_min_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.target_range_max_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.pretty_name_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "")
		self.pretty_name_clear = wx.BitmapButton(self.new_project_settings_panel, wx.ID_ANY, get_toolbar_icon("ART_GO_BACK", 16))
		self.project_quantitative = wx.CheckBox(self.new_project_settings_panel, wx.ID_ANY, "Quantitative")
		self.project_merge = wx.CheckBox(self.new_project_settings_panel, wx.ID_ANY, "Merge")
		self.project_qualitative = wx.CheckBox(self.new_project_settings_panel, wx.ID_ANY, "Qualitative")
		self.project_counter = wx.CheckBox(self.new_project_settings_panel, wx.ID_ANY, "Counter")
		self.project_spectra = wx.CheckBox(self.new_project_settings_panel, wx.ID_ANY, "Spectra")
		self.project_charts = wx.CheckBox(self.new_project_settings_panel, wx.ID_ANY, "Charts")
		self.import_apply_btn = wx.Button(self.new_project_settings_panel, wx.ID_ANY, "Apply")
		self.default = wx.Button(self.new_project_settings_panel, wx.ID_ANY, "Default")
		self.reset = wx.Button(self.new_project_settings_panel, wx.ID_ANY, "Reset")
		self.queue_btn = wx.Button(self.new_project_settings_panel, wx.ID_ANY, "Add to Queue")
		self.run_btn = wx.Button(self.new_project_settings_panel, wx.ID_ANY, "Run")
		self.new_project_queue = wx.Panel(self.new_project_notebook, wx.ID_ANY)
		self.project_queue_panel = wx.Panel(self.new_project_queue, wx.ID_ANY)
		self.project_queue_grid = wx.grid.Grid(self.project_queue_panel, wx.ID_ANY, size=(1, 1))
		self.project_queue_clear_btn = wx.Button(self.project_queue_panel, wx.ID_ANY, "Clear")
		self.project_queue_delete_btn = wx.Button(self.project_queue_panel, wx.ID_ANY, "Delete")
		self.project_queue_save_btn = wx.Button(self.project_queue_panel, wx.ID_ANY, "Save Queue")
		self.project_queue_load_btn = wx.Button(self.project_queue_panel, wx.ID_ANY, "Load Queue")
		self.project_queue_run_btn = wx.Button(self.project_queue_panel, wx.ID_ANY, "Run")
		self.new_project_log = wx.Panel(self.new_project_notebook, wx.ID_ANY)
		self.project_log_panel = wx.Panel(self.new_project_log, wx.ID_ANY)
		self.project_log_text_control = wx.TextCtrl(self.project_log_panel, wx.ID_ANY, "", style=wx.TE_CHARWRAP | wx.TE_MULTILINE | wx.TE_READONLY)
		self.project_log_save_btn = wx.Button(self.project_log_panel, wx.ID_ANY, "Save Log")
		self.Browse_Project = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.browse_tab = browse_tab(self, self.Browse_Project, wx.ID_ANY)
		self.Compare_Projects = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.compare_tab = compare_tab(self, self.Compare_Projects, wx.ID_ANY)
		self.Help = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.help_tab = help_tab(self.Help, wx.ID_ANY)

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_BUTTON, self.do_import, self.import_btn)
		self.Bind(wx.EVT_BUTTON, self.do_delete, self.new_project_delete_btn)
		self.Bind(wx.EVT_BUTTON, self.on_pretty_name_clear, self.pretty_name_clear)
		self.Bind(wx.EVT_BUTTON, self.do_apply, self.import_apply_btn)
		self.Bind(wx.EVT_BUTTON, self.do_default, self.default)
		self.Bind(wx.EVT_BUTTON, self.do_reset, self.reset)
		self.Bind(wx.EVT_BUTTON, self.do_enqueue, self.queue_btn)
		self.Bind(wx.EVT_BUTTON, self.do_new_project, self.run_btn)
		self.Bind(wx.EVT_BUTTON, self.on_queue_clear, self.project_queue_clear_btn)
		self.Bind(wx.EVT_BUTTON, self.on_queue_delete, self.project_queue_delete_btn)
		self.Bind(wx.EVT_BUTTON, self.on_save_queue, self.project_queue_save_btn)
		self.Bind(wx.EVT_BUTTON, self.on_load_queue, self.project_queue_load_btn)
		self.Bind(wx.EVT_BUTTON, self.on_project_queue_run, self.project_queue_run_btn)
		self.Bind(wx.EVT_BUTTON, self.on_project_log_save, self.project_log_save_btn)
		# end wxGlade
		
	
		if sys.platform == "win32":
			self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.notebook_1_handler_win32, self.notebook_1)
		else:
			self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGING, self.notebook_1_handler, self.notebook_1)
			
		# Configuration
		self.Config = GSMConfig("config.ini")
		
		# Load Settings &c.
		self.rescan_files()
		self.do_reset()
		
		self.pretty_name_list = {}
		with open("lib/pretty_names_list", "r") as pretty_name_file:
			for name in pretty_name_file.readlines():
				# print(name)
				self.pretty_name_list[name.rstrip("\r\n")] = ''
		# print(self.pretty_name_list)
		self.on_pretty_name_clear()
		self.pretty_name_value.Clear()
		# for name in self.pretty_name_list:
		#	self.pretty_name_value.Append(name)
		
		self.pretty_name_value.AutoComplete([name for name in self.pretty_name_list])
		
		self.project_queue_grid.DeleteRows(0, 10)
		self.on_load_queue(pathname="lib/queue.csv")
		
		# Window Size and Position
		self.SetMinSize((1140, 750))
		self.SetSize((1140, 750))
		self.Center()
		self.SetIcon(wx.Icon("lib/icons/GunShotMatch.ico"))
		internal_config = ConfigParser.ConfigParser()
		internal_config.read("lib/gsmatch.ini")
		position = internal_config.get("MAIN", "position").split(",")
		position = tuple([int(x) for x in position])
		if not any(x > y for x, y in zip(position, wx.GetDisplaySize())):
			self.Move(*position)
		
		
		# Thread Setup
		# self.Bind(EVT_QUEUE, self.OnQueueDone)
		self.status_buffer = []
		self.worker = StatusThread(self, 1)
		# self.worker.daemon = True
		self.worker.start()
		self.Bind(EVT_STATUS, self.OnStatus)
		self.Bind(EVT_CONVERSION, self.OnImportDone)
		self.Bind(EVT_CONVERSION_LOG, self.OnImportLog)
		self.Bind(EVT_PROJECT, self.OnProjectDone)
		self.Bind(EVT_PROJECT_LOG, self.OnProjectLog)
		self.Bind(EVT_COMPARISON, self.OnComparisonDone)
		
		self.flask = Process(target=flaskapp.run)
		self.flask.start()

	def __set_properties(self):
		# begin wxGlade: Launcher.__set_properties
		self.SetTitle("GunShotMatch")
		_icon = wx.NullIcon
		_icon.CopyFromBitmap(wx.Bitmap("./lib/icons/GunShotMatch logo256.png", wx.BITMAP_TYPE_ANY))
		self.SetIcon(_icon)
		self.statusbar.SetStatusWidths([350, 300])
		
		# statusbar fields
		statusbar_fields = ["Status:", ""]
		for i in range(len(statusbar_fields)):
			self.statusbar.SetStatusText(statusbar_fields[i], i)
		self.Launcher.SetBackgroundColour(wx.Colour(240, 240, 240))
		self.check_list_box_1.SetMinSize((256, 128))
		self.check_list_box_1.SetMinSize((256, 128))
		self.check_list_box_2.SetMinSize((256, 128))
		self.check_list_box_2.SetMinSize((256, 128))
		self.bb_points_value.SetMinSize((120, 29))
		self.bb_scans_value.SetMinSize((120, 29))
		self.alignment_Dw_value.SetMinSize((50, 29))
		self.alignment_Dw_value.SetMaxLength(4)
		self.alignment_Gw_value.SetMinSize((50, 29))
		self.alignment_Gw_value.SetMaxLength(4)
		self.alignment_min_peaks_value.SetMinSize((50, 29))
		self.alignment_min_peaks_value.SetMaxLength(4)
		self.mass_range_value.SetMinSize((300, 29))
		self.base_peak_filter_value.SetMinSize((300, 29))
		self.base_peak_filter_value.SetToolTip("Peaks with these base ions (i.e. the most intense peak in the mass spectrum) will be excluded from the results. This can be useful for excluding compounds related to septum bleed, which usually have a base ion at m/z 73")
		self.noise_thresh_value.SetMinSize((120, 29))
		self.tophat_struct_value.SetMinSize((50, 29))
		self.tophat_struct_value.SetMaxLength(4)
		self.tophat_struct_units.SetSelection(0)
		self.target_range_min_value.SetMinSize((55, 29))
		self.target_range_min_value.SetMaxLength(5)
		self.target_range_max_value.SetMinSize((55, 29))
		self.target_range_max_value.SetMaxLength(5)
		self.pretty_name_value.SetMinSize((260, 29))
		self.pretty_name_clear.SetMinSize((29, 29))
		self.project_quantitative.SetValue(1)
		self.project_merge.SetValue(1)
		self.project_qualitative.SetValue(1)
		self.project_counter.SetValue(1)
		self.project_spectra.SetValue(1)
		self.project_charts.SetValue(1)
		self.project_queue_grid.CreateGrid(10, 20)
		self.project_queue_grid.EnableEditing(0)
		self.project_queue_grid.SetColLabelValue(0, "Status")
		self.project_queue_grid.SetColSize(0, 80)
		self.project_queue_grid.SetColLabelValue(1, "prefixList")
		self.project_queue_grid.SetColSize(1, 300)
		self.project_queue_grid.SetColLabelValue(2, "pretty_name")
		self.project_queue_grid.SetColSize(2, 90)
		self.project_queue_grid.SetColLabelValue(3, "bb_points")
		self.project_queue_grid.SetColSize(3, 80)
		self.project_queue_grid.SetColLabelValue(4, "bb_scans")
		self.project_queue_grid.SetColSize(4, 80)
		self.project_queue_grid.SetColLabelValue(5, "noise_thresh")
		self.project_queue_grid.SetColSize(5, 100)
		self.project_queue_grid.SetColLabelValue(6, "target_range")
		self.project_queue_grid.SetColSize(6, 100)
		self.project_queue_grid.SetColLabelValue(7, "exclude_ions")
		self.project_queue_grid.SetColSize(7, 100)
		self.project_queue_grid.SetColLabelValue(8, "tophat")
		self.project_queue_grid.SetColSize(8, 73)
		self.project_queue_grid.SetColLabelValue(9, "tophat_unit")
		self.project_queue_grid.SetColSize(9, 93)
		self.project_queue_grid.SetColLabelValue(10, "mass_range")
		self.project_queue_grid.SetColSize(10, 93)
		self.project_queue_grid.SetColLabelValue(11, "rt_modulation")
		self.project_queue_grid.SetColSize(11, 110)
		self.project_queue_grid.SetColLabelValue(12, "gap_penalty")
		self.project_queue_grid.SetColSize(12, 93)
		self.project_queue_grid.SetColLabelValue(13, "min_peaks")
		self.project_queue_grid.SetColSize(13, 83)
		self.project_queue_grid.SetColLabelValue(14, "do_quantitative")
		self.project_queue_grid.SetColSize(14, 123)
		self.project_queue_grid.SetColLabelValue(15, "do_qualitative")
		self.project_queue_grid.SetColSize(15, 110)
		self.project_queue_grid.SetColLabelValue(16, "do_merge")
		self.project_queue_grid.SetColSize(16, 83)
		self.project_queue_grid.SetColLabelValue(17, "do_counter")
		self.project_queue_grid.SetColSize(17, 90)
		self.project_queue_grid.SetColLabelValue(18, "do_spectra")
		self.project_queue_grid.SetColSize(18, 83)
		self.project_queue_grid.SetColLabelValue(19, "do_charts")
		self.project_queue_grid.SetColSize(19, 83)
		self.notebook_1.SetBackgroundColour(wx.Colour(240, 240, 240))
		# end wxGlade
		
		log_font = wx.Font(12, wx.FONTFAMILY_TELETYPE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "FreeMono")
		
		self.import_log_text_control.SetFont(log_font)
		self.project_log_text_control.SetFont(log_font)

	def __do_layout(self):
		# begin wxGlade: Launcher.__do_layout
		parent_sizer = wx.BoxSizer(wx.VERTICAL)
		help_parent_sizer = wx.BoxSizer(wx.VERTICAL)
		comparison_parent_sizer = wx.BoxSizer(wx.VERTICAL)
		browse_project_tab_sizer = wx.BoxSizer(wx.VERTICAL)
		new_project_tab_sizer = wx.BoxSizer(wx.HORIZONTAL)
		project_log_tab_sizer = wx.BoxSizer(wx.HORIZONTAL)
		project_log_sizer = wx.BoxSizer(wx.VERTICAL)
		project_queue_tab_sizer = wx.BoxSizer(wx.HORIZONTAL)
		project_queue_sizer = wx.BoxSizer(wx.VERTICAL)
		project_queue_btn_sizer = wx.BoxSizer(wx.HORIZONTAL)
		project_settings_sizer = wx.BoxSizer(wx.HORIZONTAL)
		new_project_settings_v_sizer = wx.BoxSizer(wx.VERTICAL)
		new_project_settings_grid_sizer = wx.FlexGridSizer(9, 3, 10, 10)
		new_project_button_sizer = wx.BoxSizer(wx.VERTICAL)
		project_settings_run_sizer = wx.BoxSizer(wx.HORIZONTAL)
		project_settings_button_sizer = wx.BoxSizer(wx.HORIZONTAL)
		new_project_steps_sizer = wx.GridSizer(4, 2, 0, 0)
		pretty_name_sizer = wx.BoxSizer(wx.VERTICAL)
		pretty_name_value_sizer = wx.BoxSizer(wx.HORIZONTAL)
		range_sizer = wx.BoxSizer(wx.VERTICAL)
		target_range_grid_sizer = wx.FlexGridSizer(1, 4, 0, 0)
		tophat_grid_sizer = wx.FlexGridSizer(1, 3, 0, 0)
		noise_thresh_grid_sizer_copy = wx.FlexGridSizer(1, 3, 0, 0)
		filter_sizer = wx.BoxSizer(wx.VERTICAL)
		mass_range_sizer = wx.BoxSizer(wx.VERTICAL)
		alignment_sizer = wx.BoxSizer(wx.VERTICAL)
		alignment_grid_sizer = wx.GridSizer(3, 2, 0, 0)
		alignment_Dw_sizer = wx.BoxSizer(wx.HORIZONTAL)
		bb_sizer = wx.BoxSizer(wx.VERTICAL)
		bb_grid_sizer = wx.GridSizer(2, 2, 0, 0)
		new_project_picker_sizer = wx.BoxSizer(wx.VERTICAL)
		import_tab_sizer = wx.BoxSizer(wx.HORIZONTAL)
		import_log_sizer = wx.BoxSizer(wx.VERTICAL)
		import_picker_sizer = wx.BoxSizer(wx.VERTICAL)
		launcher_parent_sizer = wx.BoxSizer(wx.HORIZONTAL)
		launcher_parent_sizer.Add(self.launcher_tab, 1, wx.EXPAND, 0)
		self.Launcher.SetSizer(launcher_parent_sizer)
		import_picker_label = wx.StaticText(self.import_picker_panel, wx.ID_ANY, ".RAW Files to Import")
		import_picker_sizer.Add(import_picker_label, 0, wx.BOTTOM, 18)
		import_picker_sizer.Add(self.check_list_box_1, 1, wx.BOTTOM | wx.EXPAND, 7)
		import_picker_sizer.Add(self.import_btn, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RIGHT, 9)
		self.import_picker_panel.SetSizer(import_picker_sizer)
		import_tab_sizer.Add(self.import_picker_panel, 4, wx.ALL | wx.EXPAND, 10)
		import_log_label = wx.StaticText(self.import_log_panel, wx.ID_ANY, "Log:")
		import_log_sizer.Add(import_log_label, 0, wx.TOP, 5)
		import_log_sizer.Add(self.import_log_text_control, 4, wx.EXPAND | wx.TOP, 5)
		self.import_log_panel.SetSizer(import_log_sizer)
		import_tab_sizer.Add(self.import_log_panel, 5, wx.ALL | wx.EXPAND, 10)
		self.Import.SetSizer(import_tab_sizer)
		new_project_picker_label = wx.StaticText(self.new_project_picker_panel, wx.ID_ANY, "Samples to Process: ")
		new_project_picker_sizer.Add(new_project_picker_label, 0, wx.BOTTOM, 18)
		new_project_picker_sizer.Add(self.check_list_box_2, 1, wx.BOTTOM | wx.EXPAND, 7)
		new_project_picker_sizer.Add(self.new_project_delete_btn, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RIGHT, 9)
		self.new_project_picker_panel.SetSizer(new_project_picker_sizer)
		project_settings_sizer.Add(self.new_project_picker_panel, 5, wx.ALL | wx.EXPAND, 10)
		bb_top_text = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Settings for Biller and Biemann Peak Detection")
		bb_top_text.SetToolTip("Settings for PyMS implementation of BillerBiemann peak detection")
		bb_sizer.Add(bb_top_text, 0, 0, 0)
		bb_points_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Number of Points: ")
		bb_points_label.SetToolTip("The window width, in data points, for detecting the local maxima")
		bb_grid_sizer.Add(bb_points_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		bb_grid_sizer.Add(self.bb_points_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		bb_scans_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Number of Scans: ")
		bb_scans_label.SetToolTip("The number of scans across which neighbouring, apexing, ions are combined and considered as belonging to the same peak")
		bb_grid_sizer.Add(bb_scans_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		bb_grid_sizer.Add(self.bb_scans_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		bb_sizer.Add(bb_grid_sizer, 1, wx.ALL | wx.EXPAND, 5)
		new_project_settings_grid_sizer.Add(bb_sizer, 1, wx.EXPAND, 0)
		new_project_v_line_1 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		new_project_settings_grid_sizer.Add(new_project_v_line_1, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 2)
		alignment_top_text = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Settings for Dynamic Peak Alignment")
		alignment_top_text.SetToolTip("Settings for PyMS Dynamic Peak Alignment")
		alignment_sizer.Add(alignment_top_text, 0, 0, 0)
		alignment_Dw_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "RT Modulation: ")
		alignment_grid_sizer.Add(alignment_Dw_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_Dw_sizer.Add(self.alignment_Dw_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_Dw_label_2 = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, " s", style=wx.ALIGN_LEFT)
		alignment_Dw_sizer.Add(alignment_Dw_label_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_grid_sizer.Add(alignment_Dw_sizer, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
		alignment_Gw_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Gap Penalty: ")
		alignment_grid_sizer.Add(alignment_Gw_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_grid_sizer.Add(self.alignment_Gw_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_min_peaks_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Min Peaks: ")
		alignment_grid_sizer.Add(alignment_min_peaks_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_grid_sizer.Add(self.alignment_min_peaks_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_sizer.Add(alignment_grid_sizer, 1, wx.ALL | wx.EXPAND, 5)
		new_project_settings_grid_sizer.Add(alignment_sizer, 1, wx.EXPAND, 0)
		new_project_h_line_1 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_grid_sizer.Add(new_project_h_line_1, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
		new_project_settings_grid_sizer.Add((0, 0), 0, 0, 0)
		new_project_h_line_3 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_grid_sizer.Add(new_project_h_line_3, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
		mass_range_top_text = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Mass Range:   (min, max)")
		mass_range_sizer.Add(mass_range_top_text, 0, 0, 5)
		mass_range_sizer.Add(self.mass_range_value, 0, wx.BOTTOM | wx.RIGHT | wx.TOP, 6)
		mass_range_text_bottom = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "This must be small enough to encompass all samples")
		mass_range_sizer.Add(mass_range_text_bottom, 0, wx.BOTTOM | wx.LEFT, 10)
		new_project_settings_grid_sizer.Add(mass_range_sizer, 1, wx.EXPAND, 0)
		new_project_v_line_4 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		new_project_settings_grid_sizer.Add(new_project_v_line_4, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 2)
		base_peak_filter_text_1 = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Exclude peaks with the following base ion(s):")
		base_peak_filter_text_1.SetToolTip("Peaks with these base ions (i.e. the most intense peak in the mass spectrum) will be excluded from the results. This can be useful for excluding compounds related to septum bleed, which usually have a base ion at m/z 73")
		filter_sizer.Add(base_peak_filter_text_1, 0, 0, 0)
		filter_sizer.Add(self.base_peak_filter_value, 0, wx.BOTTOM | wx.RIGHT | wx.TOP, 6)
		base_peak_filter_text_2 = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Seperate multiple values with commas ( , )")
		base_peak_filter_text_2.SetToolTip("Peaks with these base ions (i.e. the most intense peak in the mass spectrum) will be excluded from the results. This can be useful for excluding compounds related to septum bleed, which usually have a base ion at m/z 73")
		filter_sizer.Add(base_peak_filter_text_2, 0, wx.BOTTOM | wx.LEFT, 10)
		new_project_settings_grid_sizer.Add(filter_sizer, 1, wx.EXPAND, 0)
		new_project_h_line_4 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_grid_sizer.Add(new_project_h_line_4, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
		new_project_settings_grid_sizer.Add((0, 0), 0, 0, 0)
		new_project_h_line_5 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_grid_sizer.Add(new_project_h_line_5, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
		noise_thresh_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Noise Filtering Threshold: ")
		noise_thresh_grid_sizer_copy.Add(noise_thresh_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		noise_thresh_grid_sizer_copy.Add(self.noise_thresh_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		noise_thresh_ions = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "ions")
		noise_thresh_grid_sizer_copy.Add(noise_thresh_ions, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		new_project_settings_grid_sizer.Add(noise_thresh_grid_sizer_copy, 1, wx.EXPAND, 5)
		new_project_v_line_6 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		new_project_settings_grid_sizer.Add(new_project_v_line_6, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 2)
		tophat_struct_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Tophat Structural Element: ")
		tophat_struct_label.SetToolTip("Structural element for PyMS Tophat baseline correction. The structural element needs to be larger than the features one wants to retain in the spectrum after the top-hat transform")
		tophat_grid_sizer.Add(tophat_struct_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		tophat_grid_sizer.Add(self.tophat_struct_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		tophat_grid_sizer.Add(self.tophat_struct_units, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		new_project_settings_grid_sizer.Add(tophat_grid_sizer, 1, wx.EXPAND, 5)
		new_project_h_line_6 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_grid_sizer.Add(new_project_h_line_6, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
		new_project_settings_grid_sizer.Add((0, 0), 0, 0, 0)
		new_project_h_line_7 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_grid_sizer.Add(new_project_h_line_7, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
		target_range_top_text = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Search for peaks between these times:")
		range_sizer.Add(target_range_top_text, 0, 0, 5)
		target_range_grid_sizer.Add(self.target_range_min_value, 0, 0, 0)
		target_mid_text = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "minutes and ")
		target_range_grid_sizer.Add(target_mid_text, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		target_range_grid_sizer.Add(self.target_range_max_value, 0, 0, 0)
		target_post_text = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "minutes")
		target_range_grid_sizer.Add(target_post_text, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		range_sizer.Add(target_range_grid_sizer, 1, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, 5)
		new_project_settings_grid_sizer.Add(range_sizer, 1, wx.EXPAND, 0)
		new_project_v_line_7 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		new_project_settings_grid_sizer.Add(new_project_v_line_7, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 2)
		pretty_name_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "(Optional) Human-Readable Name:")
		pretty_name_sizer.Add(pretty_name_label, 0, wx.BOTTOM, 5)
		pretty_name_value_sizer.Add(self.pretty_name_value, 0, 0, 0)
		pretty_name_value_sizer.Add(self.pretty_name_clear, 0, 0, 0)
		pretty_name_sizer.Add(pretty_name_value_sizer, 1, wx.EXPAND, 0)
		new_project_settings_grid_sizer.Add(pretty_name_sizer, 1, wx.EXPAND, 0)
		new_project_h_line_8 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_grid_sizer.Add(new_project_h_line_8, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
		new_project_settings_grid_sizer.Add((0, 0), 0, 0, 0)
		new_project_h_line_9 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_grid_sizer.Add(new_project_h_line_9, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
		steps_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Processing Steps: ")
		new_project_steps_sizer.Add(steps_label, 0, 0, 0)
		new_project_steps_sizer.Add((0, 0), 0, 0, 0)
		new_project_steps_sizer.Add(self.project_quantitative, 0, 0, 0)
		new_project_steps_sizer.Add(self.project_merge, 0, 0, 0)
		new_project_steps_sizer.Add(self.project_qualitative, 0, 0, 0)
		new_project_steps_sizer.Add(self.project_counter, 0, 0, 0)
		new_project_steps_sizer.Add(self.project_spectra, 0, wx.TOP, 5)
		new_project_steps_sizer.Add(self.project_charts, 0, wx.TOP, 7)
		new_project_settings_grid_sizer.Add(new_project_steps_sizer, 1, wx.EXPAND, 0)
		new_project_v_line_8 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		new_project_settings_grid_sizer.Add(new_project_v_line_8, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 2)
		project_settings_button_sizer.Add(self.import_apply_btn, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RIGHT, 9)
		project_settings_button_sizer.Add(self.default, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RIGHT, 9)
		project_settings_button_sizer.Add(self.reset, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RIGHT, 9)
		new_project_button_sizer.Add(project_settings_button_sizer, 1, wx.ALIGN_RIGHT, 20)
		project_settings_run_sizer.Add(self.queue_btn, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RIGHT | wx.TOP, 9)
		project_settings_run_sizer.Add(self.run_btn, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RIGHT | wx.TOP, 9)
		new_project_button_sizer.Add(project_settings_run_sizer, 1, wx.ALIGN_RIGHT, 0)
		new_project_settings_grid_sizer.Add(new_project_button_sizer, 1, wx.EXPAND, 0)
		new_project_settings_v_sizer.Add(new_project_settings_grid_sizer, 1, wx.EXPAND, 0)
		new_project_line = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_v_sizer.Add(new_project_line, 0, wx.EXPAND | wx.TOP, 10)
		self.new_project_settings_panel.SetSizer(new_project_settings_v_sizer)
		project_settings_sizer.Add(self.new_project_settings_panel, 5, wx.ALL | wx.EXPAND, 10)
		self.new_project_settings.SetSizer(project_settings_sizer)
		project_queue_label = wx.StaticText(self.project_queue_panel, wx.ID_ANY, "Queue:")
		project_queue_sizer.Add(project_queue_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 5)
		project_queue_sizer.Add(self.project_queue_grid, 14, wx.BOTTOM | wx.EXPAND | wx.TOP, 4)
		project_queue_btn_sizer.Add(self.project_queue_clear_btn, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		project_queue_btn_sizer.Add(self.project_queue_delete_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 5)
		project_queue_btn_sizer.Add(self.project_queue_save_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 50)
		project_queue_btn_sizer.Add(self.project_queue_load_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 5)
		project_queue_btn_sizer.Add(self.project_queue_run_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.LEFT, 50)
		project_queue_sizer.Add(project_queue_btn_sizer, 1, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT, 0)
		self.project_queue_panel.SetSizer(project_queue_sizer)
		project_queue_tab_sizer.Add(self.project_queue_panel, 1, wx.ALL | wx.EXPAND, 10)
		self.new_project_queue.SetSizer(project_queue_tab_sizer)
		project_log_label = wx.StaticText(self.project_log_panel, wx.ID_ANY, "Log:")
		project_log_sizer.Add(project_log_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 5)
		project_log_sizer.Add(self.project_log_text_control, 4, wx.EXPAND | wx.TOP, 5)
		project_log_sizer.Add(self.project_log_save_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
		self.project_log_panel.SetSizer(project_log_sizer)
		project_log_tab_sizer.Add(self.project_log_panel, 1, wx.ALL | wx.EXPAND, 10)
		self.new_project_log.SetSizer(project_log_tab_sizer)
		self.new_project_notebook.AddPage(self.new_project_settings, "Settings")
		self.new_project_notebook.AddPage(self.new_project_queue, "Queue")
		self.new_project_notebook.AddPage(self.new_project_log, "Log")
		new_project_tab_sizer.Add(self.new_project_notebook, 1, wx.EXPAND, 0)
		self.New_Project.SetSizer(new_project_tab_sizer)
		browse_project_tab_sizer.Add(self.browse_tab, 1, wx.EXPAND, 0)
		browse_project_tab_sizer.Add((0, 0), 0, 0, 0)
		browse_project_tab_sizer.Add((0, 0), 0, 0, 0)
		browse_project_tab_sizer.Add((0, 0), 0, 0, 0)
		self.Browse_Project.SetSizer(browse_project_tab_sizer)
		comparison_parent_sizer.Add(self.compare_tab, 1, wx.EXPAND, 0)
		self.Compare_Projects.SetSizer(comparison_parent_sizer)
		help_parent_sizer.Add(self.help_tab, 1, wx.EXPAND, 0)
		self.Help.SetSizer(help_parent_sizer)
		self.notebook_1.AddPage(self.Launcher, "Launcher")
		self.notebook_1.AddPage(self.Import, "Import")
		self.notebook_1.AddPage(self.New_Project, "New Project")
		self.notebook_1.AddPage(self.Browse_Project, "Browse Project")
		self.notebook_1.AddPage(self.Compare_Projects, "Compare")
		self.notebook_1.AddPage(self.Help, "Help")
		parent_sizer.Add(self.notebook_1, 1, wx.ALL | wx.EXPAND, 3)
		self.SetSizer(parent_sizer)
		parent_sizer.Fit(self)
		self.Layout()
		# end wxGlade
		
		# Following code by Ray Pasco (c) 2005
		# http://wxpython-users.1045709.n5.nabble.com/Gauge-in-Statusbar-td2321906.html
		# sbarfield = 1  # put progressbar (gauge) in this statusbar field
		# self.maxcount = 1000  # arbitrary full-scale count
		# self.progbar = ProgressStatusBar(self, self.statusbar,
		#										 2, sbarfield, self.maxcount)
		# Thanks Ray
		
		self.Bind(wx.EVT_CLOSE, self.on_close)
	
	def size_change(self, event):
		# code to run whenever window resized
		if type(event) == wx._core.SizeEvent:
			event.Skip()
	
	def refresh_launcher(self, event):
		self.launcher_tab.refresh_launcher()
	
	def notebook_1_handler(self, event):  # wxGlade: Launcher.<event_handler>
		# New Project Disable
		if event.GetSelection() == 3 and self.browse_tab.current_project_name == None:
			selected_project = file_dialog(self, "info", "Choose a Project to Open", "info files",
										   style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST,
										   #defaultDir=self.Config.get("main", "resultspath"))
										   defaultDir=self.Config.RESULTS_DIRECTORY)
			if selected_project == None:
				event.Veto()
			else:
				self.browse_tab.setup_project_browser(selected_project)
	
	# Double click on New Project
	# elif event.GetSelection() == 2 and event.GetOldSelection() == 2:
	#	self.new_project_notebook.SetSelection(0)
	
	# Double click on Browse Project
	# elif event.GetSelection() == 3 and event.GetOldSelection() == 3:
	#	self.browse_project_notebook.SetSelection(0)

	def notebook_1_handler_win32(self, event):
		# Special case for Windows
		old_selection = event.GetOldSelection()
		if self.notebook_1.GetSelection() == 3:
			selected_project = file_dialog(self, "info", "Choose a Project to Open", "info files",
										   style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST,
										   #defaultDir=self.Config.get("main", "resultspath"))
										   defaultDir=self.Config.RESULTS_DIRECTORY)
			if selected_project == None:
				self.notebook_1.SetSelection(old_selection)
			else:
				self.browse_tab.setup_project_browser(selected_project)


	"""Menu Options"""
	
	def on_menu_paths(self, event):  # wxGlade: Launcher.<event_handler>
		paths_dlg = paths_dialog.paths_dialog(self)
		paths_dlg.Layout()
		if paths_dlg.ShowModal() == wx.ID_OK:
			self.Config.nist_path = relpath(paths_dlg.nistpath.GetValue())
			self.Config.RESULTS_DIRECTORY = relpath(paths_dlg.resultspath.GetValue())
			self.Config.RAW_DIRECTORY = relpath(paths_dlg.rawpath.GetValue())
			self.Config.CSV_DIRECTORY = relpath(paths_dlg.csvpath.GetValue())
			self.Config.SPECTRA_DIRECTORY = relpath(paths_dlg.spectrapath.GetValue())
			self.Config.CHARTS_DIRECTORY = relpath(paths_dlg.charts_path.GetValue())
			self.Config.MSP_DIRECTORY = relpath(paths_dlg.msppath.GetValue())
			self.Config.EXPERIMENTS_DIRECTORY = relpath(paths_dlg.expr_path.GetValue())
			
			maybe_make(relpath(paths_dlg.msppath.GetValue()))
			maybe_make(relpath(paths_dlg.resultspath.GetValue()))
			maybe_make(relpath(paths_dlg.expr_path.GetValue()))
			maybe_make(relpath(paths_dlg.charts_path.GetValue()))
			maybe_make(relpath(paths_dlg.csvpath.GetValue()))
			maybe_make(relpath(paths_dlg.spectrapath.GetValue()))
			
			self.status("Preferences applied", 5)
		
		self.rescan_files()
		event.Skip()
	
	def on_menu_About(self, event):  # wxGlade: Launcher.<event_handler>
		about_dlg = AboutDialog.AboutDialog(self)
		about_dlg.ShowModal()
	
	def on_menu_Exit(self, event):  # wxGlade: Launcher.<event_handler>
		self.Close()
	
	def on_menu_chart(self, event):  # wxGlade: Launcher.<event_handler>
		lookup = {self.menu_radar_id: "radar",
				  self.menu_bw_id: "box_whisker",
				  self.menu_mean_pa_id: "mean_peak_area",
				  self.menu_pa_id:"peak_area",
				  self.menu_pca_id:"pca"}
		
		self.ChartViewer = ChartViewer.ChartViewer(self, chart_type=lookup[event.GetId()])
		self.ChartViewer.Show()
		self.ChartViewer.Raise()
		event.Skip()
		
	
	"""Status Bar"""
	
	def status(self, message, timeout=3):
		for i in range(timeout):
			self.status_buffer.append(message)
		self.OnStatus(0)
	
	def reset_status(self):
		self.statusbar.SetStatusText("Status: Ready", 0)
	
	rest_message = "Ready"
	
	def OnStatus(self, evt):
		if len(self.status_buffer) > 0:
			self.statusbar.SetStatusText("Status: {}".format(self.status_buffer.pop(0)), 0)
		else:
			self.statusbar.SetStatusText("Status: {}".format(self.rest_message), 0)
	
	"""Rescan Functions"""
	
	def rescan_files(self, *args):  # wxGlade: Launcher.<event_handler>
		#raw_dir = os.path.abspath(self.Config.get("main", "rawpath"))
		raw_dir = os.path.abspath(self.Config.RAW_DIRECTORY)
		#resultspath = os.path.abspath(self.Config.get("main", "resultspath"))
		maybe_make(raw_dir)
		
		# List of files in RAW directory for Import
		self.raw_list = []
		
		for rawfile in os.listdir(raw_dir):
			if os.path.splitext(rawfile)[1].lower() == ".raw":
				self.raw_list.append(rawfile)
		self.raw_list.sort()
		
		self.check_list_box_1.Clear()
		for item in self.raw_list:
			self.check_list_box_1.Append(item)
		
		# List of Samples for New Project
		self.jcamp_list = []
		for jcampfile in os.listdir(raw_dir):
			if os.path.splitext(jcampfile)[1].lower() == ".jdx":
				self.jcamp_list.append(jcampfile)
		self.jcamp_list.sort()
		
		self.check_list_box_2.Clear()
		for item in self.jcamp_list:
			self.check_list_box_2.Append(item)
	
	# I think this code is unreachable DDF 20/5/19
	def get_sample_list(self, *args):
		selections_index = self.check_list_box_1.GetSelections() + list(self.check_list_box_1.GetCheckedItems())
		selections_index.sort()
		
		selected = []
		
		for choice in self.sample_choices:
			if self.sample_choices.index(choice) in selections_index:
				selected.append(choice)
		selected.sort()
		self.sample_list = selected
		return selected
	
	"""Open Project Picker"""
	
	def on_open_project_picker_clear(self, event):  # wxGlade: Launcher.<event_handler>
		coming_soon()
		event.Skip()
	
	def on_open_project_picker_open(self, event):  # wxGlade: Launcher.<event_handler>
		coming_soon()
		event.Skip()
	
	"""Exit Functions"""
	
	def on_close(self, event):  # here
		self.save_config()
		
		self.on_save_queue(pathname="lib/queue.csv")
		
		with open("lib/pretty_names_list", "w") as pretty_name_file:
			for pretty_name in self.pretty_name_list:
				pretty_name_file.write(pretty_name)
				pretty_name_file.write("\n")
		
		# Read internal settings
		internal_config = ConfigParser.ConfigParser()
		internal_config.read("lib/gsmatch.ini")
		
		screen_pos = self.GetPosition()
		
		# Save Internal Settings
		internal_config.set("MAIN", "position", "{},{}".format(*screen_pos))
		
		internal_config.set("last_comparison", "left", str(self.compare_tab.comparison_left_project))
		internal_config.set("last_comparison", "right", str(self.compare_tab.comparison_right_project))
		
		with open("lib/gsmatch.ini", "w") as configfile:
			configfile.write("#GunShotMatch Internal Configuration File.\n#Do not edit this file\n")
		with open("lib/gsmatch.ini", "a") as configfile:
			internal_config.write(configfile)
		
		if event.CanVeto():
			if any([conversion_thread_running, project_thread_running]):  # background worker still running
				wx.MessageBox("A process is still running.\nPlease wait for it to finish.", "Please Wait",
							  wx.ICON_ERROR | wx.OK)
				event.Veto()
				return
			
			if wx.MessageBox("Close GunShotMatch?",
							 "Please confirm",
							 wx.ICON_QUESTION | wx.YES_NO) != wx.YES:
				event.Veto()
				return
		
		print("Waiting for threads to finish...")
		self.worker.join()
		self.flask.terminate()
		self.flask.join()
		
		#try:
		#	requests.get("http://localhost:5000/shutdown")
		#	self.flask.join()
		#except:
		#	traceback.print_exc()
		
		
		self.Destroy()  # you may also do:  event.Skip() since the default event handler does call Destroy(), too
	
	def save_config(self):
		#with open("config.ini", "w") as configfile:
		#	self.Config.write(configfile)
		self.Config.save_config()
	
	def on_exit(self, event):
		self.worker._stop()
	

	"""Import Tab Buttons"""
	
	def do_import(self, event):  # wxGlade: Launcher.<event_handler>
		# Check if the thread is already running:
		if conversion_thread_running:
			wx.MessageBox("The conversion process is already running.\nPlease wait for it to finish.",
						  "Please Wait",
						  wx.ICON_ERROR | wx.OK)
			return
		
		# Files to import
		file_list = list(set(
			list(self.check_list_box_1.GetCheckedStrings()) + [self.check_list_box_1.GetString(item) for item in
															   self.check_list_box_1.GetSelections()]))
		
		file_list.sort()
		
		if len(file_list) == 0:
			self.status("Please choose one or more samples!")
			return
		
		self.import_log_text_control.AppendText("Starting conversion of:\n")
		self.import_log_text_control.AppendText(", ".join(file_list))
		self.import_log_text_control.AppendText("\n\n")
		
		# Clear Selections
		for index in self.check_list_box_1.GetSelections():
			self.check_list_box_1.Deselect(index)
		self.check_list_box_1.SetCheckedItems([0])
		self.check_list_box_1.Check(0, False)
		# self.check_list_box_1.Select(0)
		
		self.converter = ConversionThread(self, file_list)
		self.converter.start()
	
	"""Import Tab Logging"""
	
	def OnImportDone(self, event):
		self.rescan_files()
		self.status("Import Complete", 5)
	
	def OnImportLog(self, evt):
		self.import_log_text_control.AppendText(evt.log_text)
	
	# print(evt.log_text.encode("utf-8"))
	
	"""New Project > Settings Tab Buttons"""
	
	def do_apply(self, *args):  # wxGlade: Launcher.<event_handler>
		# Save the settings
		self.Config.bb_points = self.bb_points_value.GetValue()
		self.Config.bb_scans = self.bb_scans_value.GetValue()
		self.Config.noise_thresh = self.noise_thresh_value.GetValue()
		self.Config.target_range = (self.target_range_min_value.GetValue(), self.target_range_max_value.GetValue())
		self.Config.base_peak_filter = self.base_peak_filter_value.GetValue().split(",")
		self.Config.tophat = self.tophat_struct_value.GetValue()
		self.Config.tophat_unit = ["m", "s", "ms"][self.tophat_struct_units.GetSelection()]
		self.Config.rt_modulation = self.alignment_Dw_value.GetValue()
		self.Config.gap_penalty = self.alignment_Gw_value.GetValue()
		self.Config.min_peaks = self.alignment_min_peaks_value.GetValue()
		self.Config.mass_range = str2tuple(self.mass_range_value.GetValue())
		
		#self.Config.set("import", "bb_points", bb_points)
		#self.Config.set("import", "bb_scans", bb_scans)
		#self.Config.set("import", "noise_thresh", noise_thresh)
		#self.Config.set("import", "target_range", "{},{}".format(*target_range))
		#self.Config.set("import", "exclude_ions", base_peak_filter)
		#self.Config.set("import", "tophat", tophat)
		#self.Config.set("import", "tophat_unit", tophat_unit)
		#self.Config.set("import", "mass_range", mass_range)
		
		#self.Config.set("alignment", "rt_modulation", rt_modulation)
		#self.Config.set("alignment", "gap_penalty", gap_penalty)
		#self.Config.set("alignment", "min_peaks", min_peaks)
		
		#self.Config.set("analysis", "do_quantitative", str(self.project_quantitative.GetValue()))
		#self.Config.set("analysis", "do_qualitative", str(self.project_qualitative.GetValue()))
		#self.Config.set("analysis", "do_merge", str(self.project_merge.GetValue()))
		#self.Config.set("analysis", "do_counter", str(self.project_counter.GetValue()))
		#self.Config.set("analysis", "do_spectra", str(self.project_spectra.GetValue()))
		#self.Config.set("analysis", "do_charts", str(self.project_charts.GetValue()))
		
		self.Config.do_quantitative = str(self.project_quantitative.GetValue())
		self.Config.do_qualitative = str(self.project_qualitative.GetValue())
		self.Config.do_merge =  str(self.project_merge.GetValue())
		self.Config.do_counter = str(self.project_counter.GetValue())
		self.Config.do_spectra = str(self.project_spectra.GetValue())
		self.Config.do_charts = str(self.project_charts.GetValue())
	
	def do_reset(self, *args):  # wxGlade: Launcher.<event_handler>
		# Read import settings
		#self.bb_points_value.SetValue(self.Config.get("import", "bb_points"))
		#self.bb_scans_value.SetValue(self.Config.get("import", "bb_scans"))
		#self.noise_thresh_value.SetValue(self.Config.get("import", "noise_thresh"))
		self.bb_points_value.SetValue(self.Config.bb_points)
		self.bb_scans_value.SetValue(self.Config.bb_scans)
		self.noise_thresh_value.SetValue(self.Config.noise_thresh)
		#target_range = self.Config.get("import", "target_range").split(",")
		target_range = self.Config.target_range
		#self.target_range_min_value.SetValue(target_range[0]).strip())
		#self.target_range_max_value.SetValue(target_range[1]).strip())
		self.target_range_min_value.SetValue(str(target_range[0]))
		self.target_range_max_value.SetValue(str(target_range[1]))
		#self.base_peak_filter_value.SetValue(self.Config.get("import", "exclude_ions"))
		#self.tophat_struct_value.SetValue(self.Config.get("import", "tophat"))
		self.base_peak_filter_value.SetValue(list2str(self.Config.base_peak_filter))
		self.tophat_struct_value.SetValue(self.Config.tophat)
		#tophat_unit = self.Config.get("import", "tophat_unit")
		tophat_unit = self.Config.tophat_unit
		if tophat_unit == "m":
			tophat_unit = 0
		elif tophat_unit == "s":
			tophat_unit = 1
		elif tophat_unit == "ms":
			tophat_unit = 2
		self.tophat_struct_units.SetSelection(tophat_unit)
		#self.mass_range_value.SetValue(self.Config.get("import", "mass_range"))
		
		#self.alignment_Dw_value.SetValue(self.Config.get("alignment", "rt_modulation"))
		#self.alignment_Gw_value.SetValue(self.Config.get("alignment", "gap_penalty"))
		#self.alignment_min_peaks_value.SetValue(self.Config.get("alignment", "min_peaks"))
		
		#self.project_quantitative.SetValue(self.Config.getboolean("analysis", "do_quantitative"))
		#self.project_qualitative.SetValue(self.Config.getboolean("analysis", "do_qualitative"))
		#self.project_merge.SetValue(self.Config.getboolean("analysis", "do_merge"))
		#self.project_counter.SetValue(self.Config.getboolean("analysis", "do_counter"))
		#self.project_spectra.SetValue(self.Config.getboolean("analysis", "do_spectra"))
		#self.project_charts.SetValue(self.Config.getboolean("analysis", "do_charts"))
		
		self.mass_range_value.SetValue(f"{self.Config.mass_range[0]},{self.Config.mass_range[1]}")
		
		self.alignment_Dw_value.SetValue(str(self.Config.rt_modulation))
		self.alignment_Gw_value.SetValue(str(self.Config.gap_penalty))
		self.alignment_min_peaks_value.SetValue(str(self.Config.min_peaks))
		
		self.project_quantitative.SetValue(self.Config.do_quantitative)
		self.project_qualitative.SetValue(self.Config.do_qualitative)
		self.project_merge.SetValue(self.Config.do_merge)
		self.project_counter.SetValue(self.Config.do_counter)
		self.project_spectra.SetValue(self.Config.do_spectra)
		self.project_charts.SetValue(self.Config.do_charts)
	
	def do_default(self, *args):  # wxGlade: Launcher.<event_handler>
		# Reset to default Settings
		Config = ConfigParser.ConfigParser()
		Config.read("lib/default.ini")
		self.bb_points_value.SetValue(Config.get("import", "bb_points"))
		self.bb_scans_value.SetValue(Config.get("import", "bb_scans"))
		self.noise_thresh_value.SetValue(Config.get("import", "noise_thresh"))
		target_range = Config.get("import", "target_range").split(",")
		self.target_range_min_value.SetValue(target_range[0].strip())
		self.target_range_max_value.SetValue(target_range[1].strip())
		self.base_peak_filter_value.SetValue(Config.get("import", "exclude_ions"))
		self.tophat_struct_value.SetValue(Config.get("import", "tophat"))
		tophat_unit = self.Config.get("import", "tophat_unit")
		if tophat_unit == "m":
			tophat_unit = 0
		elif tophat_unit == "s":
			tophat_unit = 1
		elif tophat_unit == "ms":
			tophat_unit = 2
		self.tophat_struct_units.SetSelection(tophat_unit)
		self.mass_range_value.SetValue(Config.get("import", "mass_range"))
		
		self.alignment_Dw_value.SetValue(Config.get("alignment", "rt_modulation"))
		self.alignment_Gw_value.SetValue(Config.get("alignment", "gap_penalty"))
		self.alignment_min_peaks_value.SetValue(Config.get("alignment", "min_peaks"))
		
		self.project_quantitative.SetValue(Config.getboolean("analysis", "do_quantitative"))
		self.project_qualitative.SetValue(Config.getboolean("analysis", "do_qualitative"))
		self.project_merge.SetValue(Config.getboolean("analysis", "do_merge"))
		self.project_counter.SetValue(Config.getboolean("analysis", "do_counter"))
		self.project_spectra.SetValue(Config.getboolean("analysis", "do_spectra"))
		self.project_charts.SetValue(Config.getboolean("analysis", "do_charts"))
	
	def do_enqueue(self, event):  # wxGlade: Launcher.<event_handler>
		# self.do_apply()
		# self.save_config()
		
		# Files to process
		sample_list = list(set(
			list(self.check_list_box_2.GetCheckedStrings()) + [self.check_list_box_2.GetString(item) for item in
															   self.check_list_box_2.GetSelections()]))
		sample_list.sort()
		
		if len(sample_list) < 2:
			wx.MessageBox("Please choose two or more samples!", "Error", wx.ICON_ERROR | wx.OK)
			return
		
		pretty_name = self.pretty_name_value.GetValue()
		if pretty_name == '':
			pretty_name = re.sub(r'\d+', '', str(os.path.splitext(sample_list[0])[0].rstrip("\n\r "))).replace("__",
																											   "_")
		else:
			self.pretty_name_list[pretty_name] = ''
			# self.pretty_name_value.Clear()
			# for name in self.pretty_name_list:
			#	self.pretty_name_value.Append(name)
			self.pretty_name_value.AutoComplete([name for name in self.pretty_name_list])
			self.on_pretty_name_clear()
		print(pretty_name)
		
		## Add sample_list to config file
		# self.Config.set("samples", "samples", ",".join(sample_list))
		
		# with open(f"configs/{pretty_name}.ini","w") as configfile:
		#	self.Config.write(configfile)
		
		# Clear Selections
		for index in self.check_list_box_2.GetSelections():
			self.check_list_box_2.Deselect(index)
		self.check_list_box_2.SetCheckedItems([0])
		self.check_list_box_2.Check(0, False)
		# self.check_list_box_2.Select(0)
		
		self.project_queue_grid.AppendRows()
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 0, "Ready")
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 1, ",".join(sample_list))
		# self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 2, f"configs/{pretty_name}.ini")
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 2, pretty_name)
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 3,
											 str(self.bb_points_value.GetValue()))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 4,
											 str(self.bb_scans_value.GetValue()))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 5,
											 str(self.noise_thresh_value.GetValue()))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 6, ",".join(
			(self.target_range_min_value.GetValue(), self.target_range_max_value.GetValue())))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 7,
											 self.base_peak_filter_value.GetValue())
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 8,
											 self.tophat_struct_value.GetValue())
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 9,
											 ["m", "s", "ms"][self.tophat_struct_units.GetSelection()])
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 10,
											 self.mass_range_value.GetValue())
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 11,
											 self.alignment_Dw_value.GetValue())
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 12,
											 self.alignment_Gw_value.GetValue())
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 13,
											 self.alignment_min_peaks_value.GetValue())
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 14,
											 str(self.project_quantitative.GetValue()))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 15,
											 str(self.project_qualitative.GetValue()))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 16,
											 str(self.project_merge.GetValue()))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 17,
											 str(self.project_counter.GetValue()))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 18,
											 str(self.project_spectra.GetValue()))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 19,
											 str(self.project_charts.GetValue()))
		
		event.Skip()
	
	def do_new_project(self, *args):  # wxGlade: Launcher.<event_handler>
		# Check if the thread is already running:
		if project_thread_running:
			wx.MessageBox("The project process is already running.\nPlease wait for it to finish.", "Please Wait",
						  wx.ICON_ERROR | wx.OK)
			return
		
		# Clear log
		self.project_log_text_control.Clear()
		self.do_apply()
		self.save_config()
		
		# Files to process
		sample_list = list(set(
			list(self.check_list_box_2.GetCheckedStrings()) + [self.check_list_box_2.GetString(item) for item in
															   self.check_list_box_2.GetSelections()]))
		sample_list.sort()
		
		if len(sample_list) < 2:
			wx.MessageBox("Please choose two or more samples!", "Error", wx.ICON_ERROR | wx.OK)
			# self.status("Please choose two or more samples!")
			return
		
		self.new_project_notebook.ChangeSelection(2)
		
		self.project_log_text_control.AppendText("Starting processing of:\n")
		self.project_log_text_control.AppendText(", ".join(sample_list))
		self.project_log_text_control.AppendText("\n\n")
		
		pretty_name = self.pretty_name_value.GetValue()
		if pretty_name == '':
			pretty_name = re.sub(r'\d+', '', str(os.path.splitext(sample_list[0])[0].rstrip("\n\r "))).replace("__",
																											   "_")
		else:
			self.pretty_name_list[pretty_name] = ''
			# self.pretty_name_value.Clear()
			# for name in self.pretty_name_list:
			#	self.pretty_name_value.Append(name)
			self.pretty_name_value.AutoComplete([name for name in self.pretty_name_list])
			self.on_pretty_name_clear()
		print(pretty_name)
		
		# Clear Selections
		for index in self.check_list_box_2.GetSelections():
			self.check_list_box_2.Deselect(index)
		self.check_list_box_2.SetCheckedItems([0])
		self.check_list_box_2.Check(0, False)
		# self.check_list_box_2.Select(0)
		
		# return
		
		self.project = ProjectThread(self, sample_list, pretty_name)
		self.project.start()
	
	def on_pretty_name_clear(self, *args):  # wxGlade: Launcher.<event_handler>
		self.pretty_name_value.SetValue('')
		self.pretty_name_value.SetFocus()
	
	"""New Project > Queue Tab Buttons"""
	
	def on_queue_clear(self, event):  # wxGlade: Launcher.<event_handler>
		self.project_queue_grid.DeleteRows(0, 10)
		event.Skip()
	
	def on_queue_delete(self, event):  # wxGlade: Launcher.<event_handler>
		for row_idx in self.project_queue_grid.GetSelectedRows()[::-1]:
			self.project_queue_grid.DeleteRows(row_idx)
		
		event.Skip()
	
	def on_save_queue(self, event=None, pathname=None):  # wxGlade: Launcher.<event_handler>
		if not pathname:
			pathname = file_dialog(self, "csv", "Save Queue", "csv files")
		
		try:
			with open(pathname, 'w') as file:
				for row in range(self.project_queue_grid.GetNumberRows()):
					for column in range(self.project_queue_grid.GetNumberCols()):
						file.write(self.project_queue_grid.GetCellValue(row, column))
						file.write(";")
					
					file.write("\n")
		except IOError:
			wx.LogError("Cannot save current data in file '%s'." % pathname)
	
	def on_load_queue(self, event=None, pathname=None):  # wxGlade: Launcher.<event_handler>
		if not pathname:
			pathname = file_dialog(self, "csv", "Save Queue", "csv files", style=wx.FD_OPEN)
		
		try:
			with open(pathname, 'r') as file:
				queue_reader = csv.reader(file, delimiter=';')
				for row in queue_reader:
					self.project_queue_grid.AppendRows()
					for col_idx, cell in enumerate(row):
						if cell != '':
							self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1,
																 col_idx,
																 cell)
		
		
		except IOError:
			wx.LogError("Cannot open the file '%s'." % pathname)
	
	def on_project_queue_run(self, event):  # wxGlade: Launcher.<event_handler>
		
		self.queue = QueueThread(self)
		self.queue.start()
		
		event.Skip()
	
	"""New Project > Log Tab"""
	
	def on_project_log_save(self, event):  # wxGlade: Launcher.<event_handler>
		pathname = file_dialog(self, "log", "Save log file", "log files")
		
		try:
			with open(pathname, 'w') as file:
				file.write(self.project_log_text_control.GetValue())
		except IOError:
			wx.LogError("Cannot save current data in file '%s'." % pathname)
			
			event.Skip()
	
	def OnProjectDone(self, event):
		self.status("Project Created", 5)
	
	def OnProjectLog(self, evt):
		# print(evt.log_text.replace("\r\033[K",""))
		self.project_log_text_control.AppendText(evt.log_text.replace("\r\033[K", ""))
	
	# print(evt.log_text.encode("utf-8"))
	
	def OnComparisonDone(self, event):
		self.status("Comparison Complete", 5)

	def Data_Viewer_Ready(self, *args):
		if self.dv_html.GetCurrentURL() != self.dv_url:
			self.dv_html.LoadURL(self.dv_url)
		
	def do_delete(self, event):  # wxGlade: Launcher.<event_handler>
		dlg = wx.MessageDialog(self, "Are you sure want to delete this sample?\nThis cannot be undone!", caption="Confirm Deletion",
					  style=wx.YES_NO | wx.NO_DEFAULT | wx.CENTRE | wx.ICON_EXCLAMATION, pos=wx.DefaultPosition)
		dlg.SetYesNoLabels("Confirm",wx.ID_CANCEL)
		res = dlg.ShowModal()
		if res == wx.ID_YES:
			print("The file should now be deleted")
		event.Skip()


# end of class Launcher



"""# Load Chart Data
self.comparison_chart_data = pandas.concat(
	[self.chart_data,
	 pandas.read_csv(f"Results/CSV/{self.comparison_project}_CHART_DATA.csv", sep=";",
					 index_col=0)
	 ], axis=1, sort=False)

with open(selected_project, "r") as f:
	self.comparison_prefixList = [x.rstrip("\r\n") for x in f.readlines()]

self.comparison_chart_data.drop("Compound Names", axis=1, inplace=True)
self.comparison_chart_data['Compound Names'] = self.comparison_chart_data.index

# determine order of compounds on graph
for compound in self.comparison_chart_data.index.values:
	self.comparison_chart_data["Count"] = self.comparison_chart_data.apply(df_count, args=(
		[f"{sample} Peak Area" for sample in [self.current_project_name, self.comparison_project]],),
																		   axis=1)

self.comparison_chart_data['Compound Names'] = self.comparison_chart_data.index
self.comparison_chart_data = self.comparison_chart_data.sort_values(['Count', 'Compound Names'])
self.comparison_chart_data.fillna(0, inplace=True)"""





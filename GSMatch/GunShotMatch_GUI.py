#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
#  Copyright (c) 2017-2019 Dominic Davis-Foster <dominic@davis-foster.co.uk>
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#
# generated by wxGlade 0.9.0 on Thu Feb  7 18:16:22 2019
#


import sys
sys.path.append("..")

import re
import os
import wx
import csv
import time
import types
import numpy
import traceback
import threading
import subprocess
import webbrowser
import configparser as ConfigParser

from utils.paths import maybe_make, relpath
from utils.progbar import ProgressStatusBar
from utils.ChromatogramDisplay import Display
from utils.charts import box_whisker, peak_area, mean_peak_area, radar_chart, bw_default_colours, bw_default_styles
from gsm_core import EventBoilerplate as ProjectEvent
from gsm_core import EventBoilerplate as ConversionEvent
from gsm_core import LogEventBoilerplate as ProjectLogEvent
from gsm_core import LogEventBoilerplate as ConversionLogEvent


import wx.html2
import wx.richtext
from wx import grid
from wx.adv import NotificationMessage

from pyms.Peak.IO import load_peaks
from pyms.GCMS.Class import IonChromatogram

import matplotlib
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.backends.backend_wxagg import NavigationToolbar2WxAgg as NavigationToolbar




# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
import wx.html2
import wx.richtext
import wx.html2
# end wxGlade


# The following code (C) 2005 Antoine Pitrou 
# https://sourceforge.net/p/wxglade/mailman/message/6475744/
_art_provider = None


def GetStockBitmap(art_id, art_client=None):

	"""
	Get a stock bitmap from its wx.ART_xxx ID
	"""
	global _art_provider
	if _art_provider is None:
		_art_provider = wx.ArtProvider()
	return _art_provider.GetBitmap(id=art_id,
		client=art_client or wx.ART_OTHER)


def GetStockToolbarBitmap(art_id):
	return GetStockBitmap(art_id, wx.ART_TOOLBAR)

TB = GetStockToolbarBitmap
# End (C) Antoine Pitrou




class ChartViewer(wx.Frame):
	def __init__(self, parent, chart_type, *args, **kwds):
		import pandas
		self.chart_type = chart_type.lower()
		print(type(args))
		args = (parent,) + args
		# begin wxGlade: ChartViewer.__init__
		kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
		wx.Frame.__init__(self, *args, **kwds)
		self.SetSize((900, 900))
		self.ChartViewer_v_splitter = wx.SplitterWindow(self, wx.ID_ANY, style=wx.SP_3D | wx.SP_BORDER | wx.SP_LIVE_UPDATE)
		self.v_splitter_left_panel = wx.Panel(self.ChartViewer_v_splitter, wx.ID_ANY)
		self.ChartViewer_h_splitter = wx.SplitterWindow(self.v_splitter_left_panel, wx.ID_ANY, style=wx.SP_3D | wx.SP_BORDER | wx.SP_LIVE_UPDATE)
		self.ChartViewer_chart_pane = wx.Panel(self.ChartViewer_h_splitter, wx.ID_ANY)
		
		self.chart_figure = Figure()
		
		
		
		
		self.chart_canvas = FigureCanvas(self.ChartViewer_chart_pane, wx.ID_ANY, self.chart_figure)
		self.h_splitter_bottom_panel = wx.Panel(self.ChartViewer_h_splitter, wx.ID_ANY)
		self.v_splitter_right_panel = wx.Panel(self.ChartViewer_v_splitter, wx.ID_ANY)
		self.ChartViewer_Settings_Panel = wx.Panel(self, wx.ID_ANY)
		self.colours_button = wx.Button(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Choose")
		self.percentage_checkbox = wx.CheckBox(self.ChartViewer_Settings_Panel, wx.ID_ANY, "")
		self.width_value = wx.SpinCtrlDouble(self.ChartViewer_Settings_Panel, wx.ID_ANY, "4.0", min=0.1, max=10.0)
		self.width_value.SetDigits(1)
		self.use_log_checkbox = wx.CheckBox(self.ChartViewer_Settings_Panel, wx.ID_ANY, "")
		self.log_base_value = wx.SpinCtrl(self.ChartViewer_Settings_Panel, wx.ID_ANY, "10", min=0, max=100, style=0)
		self.show_raw_data_checkbox = wx.CheckBox(self.ChartViewer_Settings_Panel, wx.ID_ANY, "")
		self.show_outliers_checkbox = wx.CheckBox(self.ChartViewer_Settings_Panel, wx.ID_ANY, "")
		self.outlier_mode_choice = wx.Choice(self.ChartViewer_Settings_Panel, wx.ID_ANY, choices=["2Stdev", "Quartiles", "MAD"])
		self.error_bar_choice = wx.Choice(self.ChartViewer_Settings_Panel, wx.ID_ANY, choices=["Range", "Stdev"])
		self.styles_button = wx.Button(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Choose")
		self.legend_checkbox = wx.CheckBox(self.ChartViewer_Settings_Panel, wx.ID_ANY, "")
		self.leg_cols_value = wx.SpinCtrl(self.ChartViewer_Settings_Panel, wx.ID_ANY, "1", min=1, max=5, style=0)
		self.leg_x_pos_value = wx.SpinCtrlDouble(self.ChartViewer_Settings_Panel, wx.ID_ANY, "0.0", min=0.0, max=100.0)
		self.leg_y_pos_value = wx.SpinCtrlDouble(self.ChartViewer_Settings_Panel, wx.ID_ANY, "0.0", min=0.0, max=100.0)
		self.figure_width_value = wx.SpinCtrlDouble(self.ChartViewer_Settings_Panel, wx.ID_ANY, "0.0", min=0.0, max=5000.0)
		self.figure_height_value = wx.SpinCtrlDouble(self.ChartViewer_Settings_Panel, wx.ID_ANY, "0.0", min=0.0, max=5000.0)
		self.top_border_value = wx.SpinCtrlDouble(self.ChartViewer_Settings_Panel, wx.ID_ANY, "0.9", min=0.0, max=2.0)
		self.top_border_value.SetDigits(3)
		self.bottom_border_value = wx.SpinCtrlDouble(self.ChartViewer_Settings_Panel, wx.ID_ANY, "0.1", min=0.0, max=2.0)
		self.bottom_border_value.SetDigits(3)
		self.left_border_value = wx.SpinCtrlDouble(self.ChartViewer_Settings_Panel, wx.ID_ANY, "0.125", min=0.0, max=2.0)
		self.left_border_value.SetDigits(3)
		self.right_border_value = wx.SpinCtrlDouble(self.ChartViewer_Settings_Panel, wx.ID_ANY, "0.9", min=0.0, max=2.0)
		self.right_border_value.SetDigits(3)
		self.tight_layout_button = wx.Button(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Tight Layout")
		self.reset_button = wx.Button(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Reset")
		self.save_button = wx.Button(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Save")

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_SPLITTER_SASH_POS_CHANGING, self.on_splitter_moved, self.ChartViewer_h_splitter)
		self.Bind(wx.EVT_SPLITTER_SASH_POS_CHANGING, self.on_splitter_moved, self.ChartViewer_v_splitter)
		self.Bind(wx.EVT_CHECKBOX, self.do_update_chart, self.percentage_checkbox)
		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.replot_chart, self.width_value)
		self.Bind(wx.EVT_TEXT, self.replot_chart, self.width_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.replot_chart, self.width_value)
		self.Bind(wx.EVT_CHECKBOX, self.update_log, self.use_log_checkbox)
		self.Bind(wx.EVT_SPINCTRL, self.update_log, self.log_base_value)
		self.Bind(wx.EVT_TEXT, self.update_log, self.log_base_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.update_log, self.log_base_value)
		self.Bind(wx.EVT_CHECKBOX, self.replot_chart, self.show_raw_data_checkbox)
		self.Bind(wx.EVT_CHECKBOX, self.toggle_outliers, self.show_outliers_checkbox)
		self.Bind(wx.EVT_CHOICE, self.recalculate_data, self.outlier_mode_choice)
		self.Bind(wx.EVT_CHOICE, self.replot_chart, self.error_bar_choice)
		self.Bind(wx.EVT_BUTTON, self.do_update_chart, self.styles_button)
		self.Bind(wx.EVT_CHECKBOX, self.update_legend, self.legend_checkbox)
		self.Bind(wx.EVT_SPINCTRL, self.update_legend, self.leg_cols_value)
		self.Bind(wx.EVT_TEXT, self.update_legend, self.leg_cols_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.update_legend, self.leg_cols_value)
		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.update_legend, self.leg_x_pos_value)
		self.Bind(wx.EVT_TEXT, self.update_legend, self.leg_x_pos_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.update_legend, self.leg_x_pos_value)
		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.update_legend, self.leg_y_pos_value)
		self.Bind(wx.EVT_TEXT, self.update_legend, self.leg_y_pos_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.update_legend, self.leg_y_pos_value)
		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.on_splitter_changed, self.figure_width_value)
		self.Bind(wx.EVT_TEXT, self.on_splitter_changed, self.figure_width_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_splitter_changed, self.figure_width_value)
		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.on_splitter_changed, self.figure_height_value)
		self.Bind(wx.EVT_TEXT, self.on_splitter_changed, self.figure_height_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_splitter_changed, self.figure_height_value)
		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.update_borders, self.top_border_value)
		self.Bind(wx.EVT_TEXT, self.update_borders, self.top_border_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.update_borders, self.top_border_value)
		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.update_borders, self.bottom_border_value)
		self.Bind(wx.EVT_TEXT, self.update_borders, self.bottom_border_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.update_borders, self.bottom_border_value)
		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.update_borders, self.left_border_value)
		self.Bind(wx.EVT_TEXT, self.update_borders, self.left_border_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.update_borders, self.left_border_value)
		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.update_borders, self.right_border_value)
		self.Bind(wx.EVT_TEXT, self.update_borders, self.right_border_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.update_borders, self.right_border_value)
		self.Bind(wx.EVT_BUTTON, self.apply_tight_layout, self.tight_layout_button)
		self.Bind(wx.EVT_BUTTON, self.do_reset, self.reset_button)
		self.Bind(wx.EVT_BUTTON, self.do_save, self.save_button)
		# end wxGlade
		
		# Set Initial Width and height values
		self.on_splitter_moved()
		
		# Load Chart Data
		#chart_data = pandas.read_csv(os.path.join(CSV_DIRECTORY, "{}_CHART_DATA.csv".format(lot_name)), sep=";",
		#							 index_col=0)
		self.chart_data = pandas.read_csv("Results/CSV/Eley Contact_CHART_DATA.csv", sep=";",index_col=0)
		
		#self.do_update_chart()
		self.prepare_chart()
		self.recalculate_data()
		self.replot_chart()
	


	def __set_properties(self):
		# begin wxGlade: ChartViewer.__set_properties
		self.SetTitle("ChartViewer")
		self.chart_canvas.SetMinSize((600, 800))
		self.h_splitter_bottom_panel.SetMinSize((1, 1))
		self.ChartViewer_h_splitter.SetMinimumPaneSize(20)
		self.ChartViewer_v_splitter.SetMinimumPaneSize(20)
		self.colours_button.SetMinSize((120, 33))
		self.percentage_checkbox.Enable(False)
		self.width_value.SetMinSize((120, -1))
		self.width_value.Enable(False)
		self.width_value.SetIncrement(0.1)
		self.use_log_checkbox.Enable(False)
		self.log_base_value.SetMinSize((120, -1))
		self.log_base_value.Enable(False)
		self.show_raw_data_checkbox.Enable(False)
		self.show_outliers_checkbox.Enable(False)
		self.show_outliers_checkbox.SetValue(1)
		self.outlier_mode_choice.SetMinSize((120, -1))
		self.outlier_mode_choice.Enable(False)
		self.outlier_mode_choice.SetSelection(0)
		self.error_bar_choice.SetMinSize((120, -1))
		self.error_bar_choice.Enable(False)
		self.error_bar_choice.SetSelection(0)
		self.styles_button.SetMinSize((120, -1))
		self.styles_button.Enable(False)
		self.leg_cols_value.SetMinSize((120, -1))
		self.leg_cols_value.Enable(False)
		self.leg_x_pos_value.SetMinSize((120, -1))
		self.leg_x_pos_value.Enable(False)
		self.leg_y_pos_value.SetMinSize((120, -1))
		self.leg_y_pos_value.Enable(False)
		self.figure_width_value.SetMinSize((120, -1))
		self.figure_height_value.SetMinSize((120, -1))
		self.top_border_value.SetMinSize((120, -1))
		self.top_border_value.SetIncrement(0.005)
		self.bottom_border_value.SetMinSize((120, -1))
		self.bottom_border_value.SetIncrement(0.005)
		self.left_border_value.SetMinSize((120, -1))
		self.left_border_value.SetIncrement(0.005)
		self.right_border_value.SetMinSize((120, -1))
		self.right_border_value.SetIncrement(0.005)
		self.tight_layout_button.SetMinSize((120, -1))
		self.ChartViewer_Settings_Panel.SetMinSize((256, -1))
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: ChartViewer.__do_layout
		ChartViewer_Sizer = wx.BoxSizer(wx.HORIZONTAL)
		ChartViewer_Settings_Grid = wx.GridSizer(27, 2, 0, 0)
		v_splitter_right_sizer = wx.BoxSizer(wx.HORIZONTAL)
		v_splitter_left_sizer = wx.BoxSizer(wx.HORIZONTAL)
		h_splitter_bottom_sizer = wx.BoxSizer(wx.VERTICAL)
		ChartViewer_chart_sizer = wx.BoxSizer(wx.HORIZONTAL)
		ChartViewer_chart_sizer.Add(self.chart_canvas, 1, wx.EXPAND, 0)
		self.ChartViewer_chart_pane.SetSizer(ChartViewer_chart_sizer)
		static_line_1 = wx.StaticLine(self.h_splitter_bottom_panel, wx.ID_ANY)
		h_splitter_bottom_sizer.Add(static_line_1, 0, wx.EXPAND, 0)
		self.h_splitter_bottom_panel.SetSizer(h_splitter_bottom_sizer)
		self.ChartViewer_h_splitter.SplitHorizontally(self.ChartViewer_chart_pane, self.h_splitter_bottom_panel)
		v_splitter_left_sizer.Add(self.ChartViewer_h_splitter, 1, wx.EXPAND, 0)
		self.v_splitter_left_panel.SetSizer(v_splitter_left_sizer)
		v_splitter_line = wx.StaticLine(self.v_splitter_right_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		v_splitter_right_sizer.Add(v_splitter_line, 0, wx.EXPAND, 0)
		self.v_splitter_right_panel.SetSizer(v_splitter_right_sizer)
		self.ChartViewer_v_splitter.SplitVertically(self.v_splitter_left_panel, self.v_splitter_right_panel)
		ChartViewer_Sizer.Add(self.ChartViewer_v_splitter, 1, wx.EXPAND, 0)
		settings_header = wx.StaticText(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Settings: ")
		settings_header.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
		ChartViewer_Settings_Grid.Add(settings_header, 0, wx.TOP, 10)
		ChartViewer_Settings_Grid.Add((0, 0), 0, 0, 0)
		colours_label = wx.StaticText(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Colours: ")
		ChartViewer_Settings_Grid.Add(colours_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ChartViewer_Settings_Grid.Add(self.colours_button, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		percentage_label = wx.StaticText(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Percentage: ")
		percentage_label.Enable(False)
		ChartViewer_Settings_Grid.Add(percentage_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ChartViewer_Settings_Grid.Add(self.percentage_checkbox, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		width_label = wx.StaticText(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Width: ")
		width_label.Enable(False)
		ChartViewer_Settings_Grid.Add(width_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ChartViewer_Settings_Grid.Add(self.width_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		use_log_label = wx.StaticText(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Logarithmic: ")
		use_log_label.Enable(False)
		ChartViewer_Settings_Grid.Add(use_log_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ChartViewer_Settings_Grid.Add(self.use_log_checkbox, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		log_base_label = wx.StaticText(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Base: ")
		log_base_label.Enable(False)
		ChartViewer_Settings_Grid.Add(log_base_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ChartViewer_Settings_Grid.Add(self.log_base_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		show_raw_data_label = wx.StaticText(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Show Raw Data: ")
		show_raw_data_label.Enable(False)
		ChartViewer_Settings_Grid.Add(show_raw_data_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ChartViewer_Settings_Grid.Add(self.show_raw_data_checkbox, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		show_outliers_label = wx.StaticText(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Show Outliers: ")
		show_outliers_label.Enable(False)
		ChartViewer_Settings_Grid.Add(show_outliers_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ChartViewer_Settings_Grid.Add(self.show_outliers_checkbox, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		outlier_mode_label = wx.StaticText(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Outlier Mode: ")
		outlier_mode_label.Enable(False)
		ChartViewer_Settings_Grid.Add(outlier_mode_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ChartViewer_Settings_Grid.Add(self.outlier_mode_choice, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		err_bar_label = wx.StaticText(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Error bar Type: ")
		err_bar_label.Enable(False)
		ChartViewer_Settings_Grid.Add(err_bar_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ChartViewer_Settings_Grid.Add(self.error_bar_choice, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		styles_label = wx.StaticText(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Styles: ")
		styles_label.Enable(False)
		ChartViewer_Settings_Grid.Add(styles_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ChartViewer_Settings_Grid.Add(self.styles_button, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		legend_header = wx.StaticText(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Legend")
		legend_header.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
		ChartViewer_Settings_Grid.Add(legend_header, 0, wx.ALIGN_CENTER_VERTICAL | wx.TOP, 10)
		ChartViewer_Settings_Grid.Add((0, 0), 0, 0, 0)
		legend_label = wx.StaticText(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Show: ")
		ChartViewer_Settings_Grid.Add(legend_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ChartViewer_Settings_Grid.Add(self.legend_checkbox, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		leg_cols_label = wx.StaticText(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Columns: ")
		leg_cols_label.Enable(False)
		ChartViewer_Settings_Grid.Add(leg_cols_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ChartViewer_Settings_Grid.Add(self.leg_cols_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		leg_x_pos_label = wx.StaticText(self.ChartViewer_Settings_Panel, wx.ID_ANY, "X Position: ")
		leg_x_pos_label.Enable(False)
		ChartViewer_Settings_Grid.Add(leg_x_pos_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ChartViewer_Settings_Grid.Add(self.leg_x_pos_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		leg_y_pos_label = wx.StaticText(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Y Position: ")
		leg_y_pos_label.Enable(False)
		ChartViewer_Settings_Grid.Add(leg_y_pos_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ChartViewer_Settings_Grid.Add(self.leg_y_pos_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		size_header = wx.StaticText(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Size")
		size_header.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
		ChartViewer_Settings_Grid.Add(size_header, 0, wx.ALIGN_CENTER_VERTICAL | wx.TOP, 10)
		ChartViewer_Settings_Grid.Add((0, 0), 0, 0, 0)
		figure_width_label = wx.StaticText(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Width: ")
		ChartViewer_Settings_Grid.Add(figure_width_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ChartViewer_Settings_Grid.Add(self.figure_width_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		figure_height_label = wx.StaticText(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Height:")
		ChartViewer_Settings_Grid.Add(figure_height_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ChartViewer_Settings_Grid.Add(self.figure_height_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		border_header = wx.StaticText(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Borders")
		border_header.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
		ChartViewer_Settings_Grid.Add(border_header, 0, wx.ALIGN_CENTER_VERTICAL | wx.TOP, 10)
		ChartViewer_Settings_Grid.Add((0, 0), 0, 0, 0)
		top_border_label = wx.StaticText(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Top: ")
		ChartViewer_Settings_Grid.Add(top_border_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ChartViewer_Settings_Grid.Add(self.top_border_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		bottom_border_label = wx.StaticText(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Bottom: ")
		ChartViewer_Settings_Grid.Add(bottom_border_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ChartViewer_Settings_Grid.Add(self.bottom_border_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		left_border_label = wx.StaticText(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Left: ")
		ChartViewer_Settings_Grid.Add(left_border_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ChartViewer_Settings_Grid.Add(self.left_border_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		right_border_label = wx.StaticText(self.ChartViewer_Settings_Panel, wx.ID_ANY, "Right: ")
		ChartViewer_Settings_Grid.Add(right_border_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ChartViewer_Settings_Grid.Add(self.right_border_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ChartViewer_Settings_Grid.Add((0, 0), 0, 0, 0)
		ChartViewer_Settings_Grid.Add(self.tight_layout_button, 0, wx.ALIGN_CENTER_VERTICAL, 10)
		ChartViewer_Settings_Grid.Add((0, 0), 0, 0, 0)
		ChartViewer_Settings_Grid.Add((0, 0), 0, 0, 0)
		ChartViewer_Settings_Grid.Add(self.reset_button, 0, wx.ALIGN_CENTER | wx.BOTTOM | wx.TOP, 5)
		ChartViewer_Settings_Grid.Add(self.save_button, 0, wx.ALIGN_CENTER | wx.BOTTOM | wx.TOP, 5)
		self.ChartViewer_Settings_Panel.SetSizer(ChartViewer_Settings_Grid)
		ChartViewer_Sizer.Add(self.ChartViewer_Settings_Panel, 0, 0, 5)
		self.SetSizer(ChartViewer_Sizer)
		self.Layout()
		# end wxGlade
		
		# Enable Applicable Buttons
		print(self.chart_type)
		if self.chart_type in ["mean_peak_area", "peak_area", "box_whisker"]:
			percentage_label.Enable(True)
			self.percentage_checkbox.Enable(True)
			width_label.Enable(True)
			self.width_value.Enable(True)
		
		if self.chart_type in ["peak_area", "radar"]:
			use_log_label.Enable(True)
			self.use_log_checkbox.Enable(True)
		
		if self.chart_type == "box_whisker":
			show_outliers_label.Enable(True)
			self.show_outliers_checkbox.Enable(True)
			show_raw_data_label.Enable(True)
			self.show_raw_data_checkbox.Enable(True)
			err_bar_label.Enable(True)
			self.error_bar_choice.Enable(True)
			self.outlier_mode_label = outlier_mode_label
			self.outlier_mode_label.Enable(True)
			self.outlier_mode_choice.Enable(True)
			styles_label.Enable(True)
			self.styles_button.Enable(True)
		
		self.Layout()
		
		self.leg_cols_label = leg_cols_label
		self.log_base_label = log_base_label
		self.leg_x_pos_label = leg_x_pos_label
		self.leg_y_pos_label = leg_y_pos_label
		
		self.use_log = False
	
	def prepare_chart(self):
		if self.chart_type == "peak_area":
			self.chart = peak_area()
		elif self.chart_type == "mean_peak_area":
			self.chart = mean_peak_area()
		elif self.chart_type == "box_whisker":
			self.chart = box_whisker()
		elif self.chart_type == "radar":
			self.chart = radar_chart()
		
		if self.chart_type in ["mean_peak_area", "peak_area", "box_whisker"]:
			self.chart_axes = self.chart_figure.add_subplot(111)  # 1x1 grid, first subplot
		elif self.chart_type == "radar":
			self.chart_axes = self.chart_figure.add_subplot(111, polar=True)
		
		self.chart.fig = self.chart_figure
		self.chart.ax = self.chart_axes
	
	def recalculate_data(self, *args):  # wxGlade: ChartViewer.<event_handler>
		outlier_mode = self.outlier_mode_choice.GetString(self.outlier_mode_choice.GetSelection()).lower()
		tmp_lot_name = "Eley Contact"
		tmp_prefixList = ["ELEY_1_SUBTRACT", "ELEY_2_SUBTRACT", "ELEY_3_SUBTRACT", "ELEY_4_SUBTRACT",
								"ELEY_5_SUBTRACT"]
		samples_to_compare = [(tmp_lot_name, tmp_prefixList)]
		
		if self.chart_type == "box_whisker":
			self.chart.setup_data(self.chart_data, samples_to_compare, outlier_mode)
		elif self.chart_type in ["mean_peak_area", "radar"]:
			self.chart.setup_data(self.chart_data, [tmp_lot_name])
		elif self.chart_type == "peak_area":
			self.chart.setup_data(self.chart_data, tmp_lot_name, tmp_prefixList, self.use_log)
		
			
		print(outlier_mode)
		self.replot_chart()
		
	def replot_chart(self, *args):  # wxGlade: ChartViewer.<event_handler>
		self.chart_axes.clear()
		self.chart_figure.canvas.draw_idle()
		
		self.toolbar = NavigationToolbar(self.chart_canvas)
		self.toolbar.Hide()
		
		print(self.chart_type)
		
		show_outliers = self.show_outliers_checkbox.GetValue()
		show_raw_data = self.show_raw_data_checkbox.GetValue()
		percentage = self.percentage_checkbox.GetValue()
		err_bar = self.error_bar_choice.GetString(self.error_bar_choice.GetSelection()).lower()
		leg_cols = self.leg_cols_value.GetValue()
		column_width = self.width_value.GetValue()
		styles = bw_default_styles
		colours = bw_default_colours
		groupings = None
		legend = (1,1)
		
		print(show_outliers)
		print(show_raw_data)
		print(err_bar)
		print(leg_cols)
		print(column_width)
		
		if self.chart_type == "box_whisker":
			self.chart.setup_datapoints(column_width, styles, colours)
			self.chart.create_chart(show_outliers, show_raw_data, err_bar, groupings)
		elif self.chart_type in ["mean_peak_area", "peak_area"]:
			self.chart.create_chart(column_width, percentage=percentage, legend=legend)
		elif self.chart_type == "radar":
			self.chart.create_chart(use_log=self.use_log, legend=legend)
		
		# self.chart_figure.subplots_adjust(left=0.1, bottom=0.125, top=0.9, right=0.97)
		self.chart_canvas.draw()
		

	def do_update_chart(self, *args):  # wxGlade: ChartViewer.<event_handler>
		print("Update Chart not implemented")
		
		
	def on_splitter_moved(self, *args):  # wxGlade: ChartViewer.<event_handler>
		self.figure_width_value.SetValue(self.ChartViewer_v_splitter.GetSashPosition())
		self.figure_height_value.SetValue(self.ChartViewer_h_splitter.GetSashPosition())
		
	def on_splitter_changed(self, *args):  # wxGlade: ChartViewer.<event_handler>
		self.ChartViewer_h_splitter.SetSashPosition(self.figure_height_value.GetValue(), True)
		self.ChartViewer_v_splitter.SetSashPosition(self.figure_width_value.GetValue(), True)

	def do_adjust_borders(self, event):  # wxGlade: ChartViewer.<event_handler>
		self.chart_figure.subplots_adjust(0,0,0.1,0.1)
		self.chart_figure.canvas.draw_idle()
		
	def update_legend(self, event):  # wxGlade: ChartViewer.<event_handler>
		if self.legend_checkbox.GetValue():
			self.leg_cols_value.Enable(True)
			self.leg_x_pos_value.Enable(True)
			self.leg_y_pos_value.Enable(True)
			if self.chart_type == "box_whisker":
				self.leg_cols_label.Enable(True)
			self.leg_x_pos_label.Enable(True)
			self.leg_y_pos_label.Enable(True)
			self.Layout()
		else:
			self.leg_cols_value.Enable(False)
			self.leg_x_pos_value.Enable(False)
			self.leg_y_pos_value.Enable(False)
			self.leg_cols_label.Enable(False)
			self.leg_x_pos_label.Enable(False)
			self.leg_y_pos_label.Enable(False)
			self.Layout()
		
	def update_log(self, event):  # wxGlade: ChartViewer.<event_handler>
		if self.use_log_checkbox.GetValue():
			self.log_base_label.Enable(True)
			self.log_base_value.Enable(True)
			self.Layout()
			self.use_log = self.log_base_value.GetValue()
		else:
			self.log_base_label.Enable(False)
			self.log_base_value.Enable(False)
			self.Layout()
			self.use_log = False
		self.recalculate_data()
			
	def toggle_outliers(self, event):  # wxGlade: ChartViewer.<event_handler>
		if self.show_outliers_checkbox.GetValue():
			self.outlier_mode_choice.Enable(True)
			self.outlier_mode_label.Enable(True)
		else:
			self.outlier_mode_choice.Enable(False)
			self.outlier_mode_label.Enable(False)
		self.Layout()
		self.replot_chart()
	
		event.Skip()
	def toggle_raw_data(self, event):  # wxGlade: ChartViewer.<event_handler>
		print("Event handler 'toggle_raw_data' not implemented!")
		event.Skip()
	def update_error_bars(self, event):  # wxGlade: ChartViewer.<event_handler>
		print("Event handler 'update_error_bars' not implemented!")
		event.Skip()
	def update_outliers(self, event):  # wxGlade: ChartViewer.<event_handler>
		print("Event handler 'update_outliers' not implemented!")
		event.Skip()
		
	def update_borders(self, event):  # wxGlade: ChartViewer.<event_handler>
		self.chart_figure.subplots_adjust(self.left_border_value.GetValue(),
										  self.bottom_border_value.GetValue(),
										  self.right_border_value.GetValue(),
										  self.top_border_value.GetValue())
		self.chart_figure.canvas.draw_idle()
		
		event.Skip()

	def apply_tight_layout(self, event):  # wxGlade: ChartViewer.<event_handler>
		self.chart.fig.tight_layout()
		self.chart_figure.canvas.draw_idle()
		
	def do_reset(self, event):  # wxGlade: ChartViewer.<event_handler>
		print("Event handler 'do_reset' not implemented!")
		event.Skip()
	def do_save(self, event):  # wxGlade: ChartViewer.<event_handler>
		print("Event handler 'do_save' not implemented!")
		event.Skip()
# end of class ChartViewer

class Launcher(wx.Frame):
	def __init__(self, *args, **kwds):
		# begin wxGlade: Launcher.__init__
		kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
		wx.Frame.__init__(self, *args, **kwds)
		
		# Menu Bar
		self.frame_menubar = wx.MenuBar()
		wxglade_tmp_menu = wx.Menu()
		self.frame_menubar.i_paths = wxglade_tmp_menu.Append(wx.ID_ANY, "Configure Paths", "")
		self.Bind(wx.EVT_MENU, self.on_menu_paths, id=self.frame_menubar.i_paths.GetId())
		self.frame_menubar.i_rescan = wxglade_tmp_menu.Append(wx.ID_ANY, "Rescan Files", "")
		self.Bind(wx.EVT_MENU, self.rescan_files, id=self.frame_menubar.i_rescan.GetId())
		wxglade_tmp_menu.AppendSeparator()
		self.frame_menubar.i_about = wxglade_tmp_menu.Append(wx.ID_ANY, "About", "")
		self.Bind(wx.EVT_MENU, self.on_menu_About, id=self.frame_menubar.i_about.GetId())
		wxglade_tmp_menu.AppendSeparator()
		self.frame_menubar.i_exit = wxglade_tmp_menu.Append(wx.ID_ANY, "Exit", "")
		self.Bind(wx.EVT_MENU, self.on_menu_Exit, id=self.frame_menubar.i_exit.GetId())
		self.frame_menubar.Append(wxglade_tmp_menu, "Menu")
		self.SetMenuBar(self.frame_menubar)
		# Menu Bar end
		self.statusbar = self.CreateStatusBar(2)
		self.statusbar.SetMinHeight(22)
		self.notebook_1 = wx.Notebook(self, wx.ID_ANY)
		self.Launcher = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.Launcher.Bind(wx.EVT_SET_FOCUS, self.refresh_launcher)
		self.launcher_parent_panel = wx.Panel(self.Launcher, wx.ID_ANY, style=wx.BORDER_SUNKEN)
		self.import_raw_button = wx.Button(self.launcher_parent_panel, wx.ID_ANY, "", style=wx.BU_AUTODRAW)
		self.import_raw_button.Bind(wx.EVT_SET_FOCUS, self.refresh_launcher)
		self.import_info_button = wx.BitmapButton(self.launcher_parent_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/info_48.png", wx.BITMAP_TYPE_ANY))
		self.new_project_button = wx.BitmapButton(self.launcher_parent_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/new_project.110.bmp", wx.BITMAP_TYPE_ANY), style=wx.BU_AUTODRAW | wx.BU_EXACTFIT)
		self.new_info_button = wx.BitmapButton(self.launcher_parent_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/info_48.png", wx.BITMAP_TYPE_ANY))
		self.open_project_button = wx.BitmapButton(self.launcher_parent_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/open_project.110.bmp", wx.BITMAP_TYPE_ANY))
		self.open_info_button = wx.BitmapButton(self.launcher_parent_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/info_48.png", wx.BITMAP_TYPE_ANY))
		self.launcher_right_panel = wx.Panel(self.Launcher, wx.ID_ANY, style=wx.BORDER_SUNKEN)
		self.messages_panel = wx.Panel(self.launcher_right_panel, wx.ID_ANY, style=wx.BORDER_RAISED)
		self.messages = wx.richtext.RichTextCtrl(self.messages_panel, wx.ID_ANY, style=wx.richtext.RE_MULTILINE | wx.richtext.RE_READONLY)
		self.Import = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.import_picker_panel = wx.Panel(self.Import, wx.ID_ANY)
		self.check_list_box_1 = wx.CheckListBox(self.import_picker_panel, wx.ID_ANY, choices=[], style=wx.LB_HSCROLL | wx.LB_MULTIPLE | wx.LB_SORT)
		self.import_btn = wx.Button(self.import_picker_panel, wx.ID_ANY, "Import")
		self.import_log_panel = wx.Panel(self.Import, wx.ID_ANY)
		self.import_log_text_control = wx.TextCtrl(self.import_log_panel, wx.ID_ANY, "", style=wx.TE_CHARWRAP | wx.TE_MULTILINE | wx.TE_READONLY)
		self.New_Project = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.new_project_notebook = wx.Notebook(self.New_Project, wx.ID_ANY, style=wx.NB_BOTTOM)
		self.new_project_settings = wx.Panel(self.new_project_notebook, wx.ID_ANY)
		self.new_project_picker_panel = wx.Panel(self.new_project_settings, wx.ID_ANY)
		self.check_list_box_2 = wx.CheckListBox(self.new_project_picker_panel, wx.ID_ANY, choices=[], style=wx.LB_HSCROLL | wx.LB_MULTIPLE | wx.LB_SORT)
		self.new_project_settings_panel = wx.Panel(self.new_project_settings, wx.ID_ANY)
		self.bb_points_value = wx.SpinCtrl(self.new_project_settings_panel, wx.ID_ANY, "0", min=0, max=100, style=0)
		self.bb_scans_value = wx.SpinCtrl(self.new_project_settings_panel, wx.ID_ANY, "0", min=0, max=100, style=0)
		self.alignment_Dw_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.alignment_Gw_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.alignment_min_peaks_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.mass_range_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.base_peak_filter_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.noise_thresh_value = wx.SpinCtrl(self.new_project_settings_panel, wx.ID_ANY, "0", min=0, max=100, style=0)
		self.tophat_struct_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.tophat_struct_units = wx.Choice(self.new_project_settings_panel, wx.ID_ANY, choices=["min", "sec", "ms"])
		self.target_range_min_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.target_range_max_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.pretty_name_value = wx.ComboBox(self.new_project_settings_panel, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
		self.pretty_name_clear = wx.BitmapButton(self.new_project_settings_panel, wx.ID_ANY, wx.ArtProvider.GetBitmap(wx.ART_GO_BACK, wx.ART_MENU))
		self.project_quantitative = wx.CheckBox(self.new_project_settings_panel, wx.ID_ANY, "Quantitative")
		self.project_merge = wx.CheckBox(self.new_project_settings_panel, wx.ID_ANY, "Merge")
		self.project_qualitative = wx.CheckBox(self.new_project_settings_panel, wx.ID_ANY, "Qualitative")
		self.project_counter = wx.CheckBox(self.new_project_settings_panel, wx.ID_ANY, "Counter")
		self.project_spectra = wx.CheckBox(self.new_project_settings_panel, wx.ID_ANY, "Spectra")
		self.project_charts = wx.CheckBox(self.new_project_settings_panel, wx.ID_ANY, "Charts")
		self.import_apply_btn = wx.Button(self.new_project_settings_panel, wx.ID_ANY, "Apply")
		self.default = wx.Button(self.new_project_settings_panel, wx.ID_ANY, "Default")
		self.reset = wx.Button(self.new_project_settings_panel, wx.ID_ANY, "Reset")
		self.queue_btn = wx.Button(self.new_project_settings_panel, wx.ID_ANY, "Add to Queue")
		self.run_btn = wx.Button(self.new_project_settings_panel, wx.ID_ANY, "Run")
		self.new_project_queue = wx.Panel(self.new_project_notebook, wx.ID_ANY)
		self.project_queue_panel = wx.Panel(self.new_project_queue, wx.ID_ANY)
		self.project_queue_grid = wx.grid.Grid(self.project_queue_panel, wx.ID_ANY, size=(1, 1))
		self.project_queue_clear_btn = wx.Button(self.project_queue_panel, wx.ID_ANY, "Clear")
		self.project_queue_delete_btn = wx.Button(self.project_queue_panel, wx.ID_ANY, "Delete")
		self.project_queue_save_btn = wx.Button(self.project_queue_panel, wx.ID_ANY, "Save Queue")
		self.project_queue_load_btn = wx.Button(self.project_queue_panel, wx.ID_ANY, "Load Queue")
		self.project_queue_run_btn = wx.Button(self.project_queue_panel, wx.ID_ANY, "Run")
		self.new_project_log = wx.Panel(self.new_project_notebook, wx.ID_ANY)
		self.project_log_panel = wx.Panel(self.new_project_log, wx.ID_ANY)
		self.project_log_text_control = wx.TextCtrl(self.project_log_panel, wx.ID_ANY, "", style=wx.TE_CHARWRAP | wx.TE_MULTILINE | wx.TE_READONLY)
		self.project_log_save_btn = wx.Button(self.project_log_panel, wx.ID_ANY, "Save Log")
		self.Open_Project = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.open_project_top_panel = wx.Panel(self.Open_Project, wx.ID_ANY)
		self.open_project_picker = wx.ComboBox(self.open_project_top_panel, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
		self.open_project_picker_clear = wx.BitmapButton(self.open_project_top_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/go_back_16.png", wx.BITMAP_TYPE_ANY))
		self.open_project_picker_open = wx.Button(self.open_project_top_panel, wx.ID_ANY, "Open")
		self.open_project_body_panel = wx.Panel(self.Open_Project, wx.ID_ANY)
		self.radar_chart_button = wx.BitmapButton(self.open_project_body_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/radar_chart_192.png", wx.BITMAP_TYPE_ANY))
		self.mean_peak_area_button = wx.BitmapButton(self.open_project_body_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/mean_peak_area_192.png", wx.BITMAP_TYPE_ANY))
		self.open_project_header_browser = wx.html2.WebView.New(self.open_project_body_panel, wx.ID_ANY)
		self.open_project_header_browser.SetMaxSize((200,200))
		self.box_whisker_button = wx.BitmapButton(self.open_project_body_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/256_blank.bmp", wx.BITMAP_TYPE_ANY))
		self.peak_area_button = wx.BitmapButton(self.open_project_body_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/peak_area_192.png", wx.BITMAP_TYPE_ANY))
		self.chromatogram_button = wx.BitmapButton(self.open_project_body_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/HPLC_Chromatogram_by_Fredrik_Edfors_from_the_Noun_Project_192.png", wx.BITMAP_TYPE_ANY))
		self.Chromatogram = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.chromatogram_toolbar = wx.Panel(self.Chromatogram, wx.ID_ANY, style=wx.BORDER_SUNKEN)
		self.chromatogram_toolbar.SetMaxSize((-1,40))
		self.focus_thief = wx.Button(self.chromatogram_toolbar, wx.ID_ANY, "")
		self.CloseProject = wx.BitmapButton(self.chromatogram_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/close_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.OpenSample = wx.BitmapButton(self.chromatogram_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/open_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.ViewPeakList = wx.BitmapButton(self.chromatogram_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/list_view_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.PreviousSample = wx.BitmapButton(self.chromatogram_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/go_back_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.NextSample = wx.BitmapButton(self.chromatogram_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/go_forward_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.ResetView = wx.BitmapButton(self.chromatogram_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/home_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.PreviousView = wx.BitmapButton(self.chromatogram_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/go_up_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.Zoom_Btn = wx.BitmapButton(self.chromatogram_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/zoom_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.Pan_Btn = wx.BitmapButton(self.chromatogram_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/gimp-tool-move.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.ViewSpectrum_Btn = wx.BitmapButton(self.chromatogram_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/Mass_Spectrum_by_Fredrik_Edfors_from_the_Noun_Project.24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.chromatogram_parent_panel = wx.Panel(self.Chromatogram, wx.ID_ANY, style=wx.BORDER_SUNKEN)
		
		# create the figure with a single plot and create a canvas with the figure
		self.chromatogram_figure = Figure()
		matplotlib.projections.register_projection(My_Axes)
		self.chromatogram_axes = self.chromatogram_figure.add_subplot(111, projection="My_Axes")  # 1x1 grid, first subplot
		
		
		
		self.chromatogram_canvas = FigureCanvas(self.chromatogram_parent_panel, wx.ID_ANY, self.chromatogram_figure)
		self.Help = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.help_toolbar_panel = wx.Panel(self.Help, wx.ID_ANY, style=wx.BORDER_SUNKEN)
		self.chromatogram_toolbar.SetMaxSize((-1,40))
		self.help_focus_thief = wx.Button(self.help_toolbar_panel, wx.ID_ANY, "")
		self.help_back_btn = wx.BitmapButton(self.help_toolbar_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/go_back_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.help_forward_btn = wx.BitmapButton(self.help_toolbar_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/go_forward_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.help_home_btn = wx.BitmapButton(self.help_toolbar_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/home_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.help_url_text_ctrl = wx.TextCtrl(self.help_toolbar_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL | wx.TE_PROCESS_ENTER)
		self.help_go_btn = wx.BitmapButton(self.help_toolbar_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/go_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.help_readme_btn = wx.BitmapButton(self.help_toolbar_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/help_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.help_github_btn = wx.BitmapButton(self.help_toolbar_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/GitHub-Mark_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.help_open_browser_btn = wx.Button(self.help_toolbar_panel, wx.ID_ANY, "Open in browser")
		self.help_parent_panel = wx.Panel(self.Help, wx.ID_ANY, style=wx.BORDER_SUNKEN)
		self.help_browser = wx.html2.WebView.New(self.help_parent_panel, wx.ID_ANY)
		self.help_home ="http://www.google.co.uk"
		self.help_browser.LoadURL(self.help_home)

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_BUTTON, self.on_import, self.import_raw_button)
		self.Bind(wx.EVT_BUTTON, self.do_import_info, self.import_info_button)
		self.Bind(wx.EVT_BUTTON, self.on_new_project, self.new_project_button)
		self.Bind(wx.EVT_BUTTON, self.do_new_info, self.new_info_button)
		self.Bind(wx.EVT_BUTTON, self.on_open_project, self.open_project_button)
		self.Bind(wx.EVT_BUTTON, self.do_open_info, self.open_info_button)
		self.Bind(wx.EVT_BUTTON, self.do_import, self.import_btn)
		self.Bind(wx.EVT_BUTTON, self.on_pretty_name_clear, self.pretty_name_clear)
		self.Bind(wx.EVT_BUTTON, self.do_apply, self.import_apply_btn)
		self.Bind(wx.EVT_BUTTON, self.do_default, self.default)
		self.Bind(wx.EVT_BUTTON, self.do_reset, self.reset)
		self.Bind(wx.EVT_BUTTON, self.do_enqueue, self.queue_btn)
		self.Bind(wx.EVT_BUTTON, self.do_new_project, self.run_btn)
		self.Bind(wx.EVT_BUTTON, self.on_queue_clear, self.project_queue_clear_btn)
		self.Bind(wx.EVT_BUTTON, self.on_queue_delete, self.project_queue_delete_btn)
		self.Bind(wx.EVT_BUTTON, self.on_save_queue, self.project_queue_save_btn)
		self.Bind(wx.EVT_BUTTON, self.on_load_queue, self.project_queue_load_btn)
		self.Bind(wx.EVT_BUTTON, self.on_project_queue_run, self.project_queue_run_btn)
		self.Bind(wx.EVT_BUTTON, self.on_project_log_save, self.project_log_save_btn)
		self.Bind(wx.EVT_BUTTON, self.on_open_project_picker_clear, self.open_project_picker_clear)
		self.Bind(wx.EVT_BUTTON, self.on_open_project_picker_open, self.open_project_picker_open)
		self.Bind(wx.EVT_BUTTON, self.show_radar_chart, self.radar_chart_button)
		self.Bind(wx.EVT_BUTTON, self.show_mean_peak_area_chart, self.mean_peak_area_button)
		self.Bind(wx.EVT_BUTTON, self.show_box_whisker_chart, self.box_whisker_button)
		self.Bind(wx.EVT_BUTTON, self.show_peak_area_chart, self.peak_area_button)
		self.Bind(wx.EVT_BUTTON, self.show_chromatogram, self.chromatogram_button)
		self.Bind(wx.EVT_BUTTON, self.on_close_project, self.CloseProject)
		self.Bind(wx.EVT_BUTTON, self.on_open_sample, self.OpenSample)
		self.Bind(wx.EVT_BUTTON, self.on_view_peak_list, self.ViewPeakList)
		self.Bind(wx.EVT_BUTTON, self.on_previous_sample, self.PreviousSample)
		self.Bind(wx.EVT_BUTTON, self.on_next_sample, self.NextSample)
		self.Bind(wx.EVT_BUTTON, self.on_chromatogram_reset_view, self.ResetView)
		self.Bind(wx.EVT_BUTTON, self.on_chromatogram_previous_view, self.PreviousView)
		self.Bind(wx.EVT_BUTTON, self.on_chromatogram_zoom, self.Zoom_Btn)
		self.Bind(wx.EVT_BUTTON, self.on_chromatogram_pan, self.Pan_Btn)
		self.Bind(wx.EVT_BUTTON, self.on_view_spectrum, self.ViewSpectrum_Btn)
		self.Bind(wx.EVT_BUTTON, self.on_help_back, self.help_back_btn)
		self.Bind(wx.EVT_BUTTON, self.on_help_forward, self.help_forward_btn)
		self.Bind(wx.EVT_BUTTON, self.on_help_home, self.help_home_btn)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_help_go, self.help_url_text_ctrl)
		self.Bind(wx.EVT_BUTTON, self.on_help_go, self.help_go_btn)
		self.Bind(wx.EVT_BUTTON, self.on_help_readme, self.help_readme_btn)
		self.Bind(wx.EVT_BUTTON, self.on_help_github, self.help_github_btn)
		self.Bind(wx.EVT_BUTTON, self.on_help_browser, self.help_open_browser_btn)
		# end wxGlade
		
		# Configuration
		self.Config = ConfigParser.ConfigParser()
		self.Config.read("config.ini")
		
		# Load Settings &c.
		self.rescan_files()
		self.do_reset()
		
		self.pretty_name_list = {}
		with open("lib/pretty_names_list", "r") as pretty_name_file:
			for name in pretty_name_file.readlines():
				print(name)
				self.pretty_name_list[name.rstrip("\r\n")] = ''
		print(self.pretty_name_list)
		self.on_pretty_name_clear()
		self.pretty_name_value.Clear()
		for name in self.pretty_name_list:
			self.pretty_name_value.Append(name)
		
		self.project_queue_grid.DeleteRows(0, 10)
		self.on_load_queue(pathname="lib/queue.csv")
		self.on_open_project_picker_clear()
		
		
		# Window Size and Position
		self.SetMinSize((1140, 650))
		self.SetSize((1140, 650))
		self.Center()
		self.SetIcon(wx.Icon("lib/icons/GunShotMatch.ico"))
		internal_config = ConfigParser.ConfigParser()
		internal_config.read("lib/gsmatch.ini")
		position = internal_config.get("MAIN", "position").split(",")
		position = tuple([int(x) for x in position])
		if not any(x>y for x,y in zip(position, wx.GetDisplaySize())):
			self.Move(*position)
		
		
		# Help Browser Setup
		self.Bind(wx.html2.EVT_WEBVIEW_NAVIGATED, self.help_update_url)
		
		# Thread Setup
		# self.Bind(EVT_QUEUE, self.OnQueueDone)
		self.status_buffer = []
		self.worker = StatusThread(self, 1)
		# self.worker.daemon = True
		self.worker.start()
		self.Bind(EVT_STATUS, self.OnStatus)
		self.Bind(EVT_CONVERSION, self.OnImportDone)
		self.Bind(EVT_CONVERSION_LOG, self.OnImportLog)
		self.Bind(EVT_PROJECT, self.OnProjectDone)
		self.Bind(EVT_PROJECT_LOG, self.OnProjectLog)
		
		self.display_chromatogram()
		


	def __set_properties(self):
		# begin wxGlade: Launcher.__set_properties
		self.SetTitle("GunShotMatch")
		_icon = wx.NullIcon
		_icon.CopyFromBitmap(wx.Bitmap("./lib/icons/GunShotMatch logo256.png", wx.BITMAP_TYPE_ANY))
		self.SetIcon(_icon)
		self.statusbar.SetStatusWidths([350, 300])
		
		# statusbar fields
		statusbar_fields = ["Status:", ""]
		for i in range(len(statusbar_fields)):
			self.statusbar.SetStatusText(statusbar_fields[i], i)
		self.import_raw_button.SetMinSize((128, 128))
		self.import_raw_button.SetToolTip("Import .RAW Files")
		self.import_raw_button.SetBitmap(wx.Bitmap("./lib/icons/import.110.bmp", wx.BITMAP_TYPE_ANY))
		self.import_info_button.SetToolTip("Show help for \"Import\"")
		self.import_info_button.SetSize(self.import_info_button.GetBestSize())
		self.new_project_button.SetMinSize((128, 128))
		self.new_project_button.SetToolTip("Create New Project")
		self.new_info_button.SetToolTip("Show help for \"New Project\"")
		self.new_info_button.SetSize(self.new_info_button.GetBestSize())
		self.open_project_button.SetMinSize((128, 128))
		self.open_project_button.SetToolTip("Open Project")
		self.open_info_button.SetToolTip("Show help for \"Open Project\"")
		self.open_info_button.SetSize(self.open_info_button.GetBestSize())
		self.check_list_box_1.SetMinSize((256, 128))
		self.check_list_box_1.SetMinSize((256, 128))
		self.check_list_box_2.SetMinSize((256, 128))
		self.check_list_box_2.SetMinSize((256, 128))
		self.bb_points_value.SetMinSize((120, 29))
		self.bb_scans_value.SetMinSize((120, 29))
		self.alignment_Dw_value.SetMinSize((50, 29))
		self.alignment_Dw_value.SetMaxLength(4)
		self.alignment_Gw_value.SetMinSize((50, 29))
		self.alignment_Gw_value.SetMaxLength(4)
		self.alignment_min_peaks_value.SetMinSize((50, 29))
		self.alignment_min_peaks_value.SetMaxLength(4)
		self.mass_range_value.SetMinSize((300, 29))
		self.base_peak_filter_value.SetMinSize((300, 29))
		self.base_peak_filter_value.SetToolTip("Peaks with these base ions (i.e. the most intense peak in the mass spectrum) will be excluded from the results. This can be useful for excluding compounds related to septum bleed, which usually have a base ion at m/z 73")
		self.noise_thresh_value.SetMinSize((120, 29))
		self.tophat_struct_value.SetMinSize((50, 29))
		self.tophat_struct_value.SetMaxLength(4)
		self.tophat_struct_units.SetSelection(0)
		self.target_range_min_value.SetMinSize((55, 29))
		self.target_range_min_value.SetMaxLength(5)
		self.target_range_max_value.SetMinSize((55, 29))
		self.target_range_max_value.SetMaxLength(5)
		self.pretty_name_value.SetMinSize((260, 29))
		self.pretty_name_clear.SetSize(self.pretty_name_clear.GetBestSize())
		self.project_quantitative.SetValue(1)
		self.project_merge.SetValue(1)
		self.project_qualitative.SetValue(1)
		self.project_counter.SetValue(1)
		self.project_spectra.SetValue(1)
		self.project_charts.SetValue(1)
		self.project_queue_grid.CreateGrid(10, 20)
		self.project_queue_grid.EnableEditing(0)
		self.project_queue_grid.SetColLabelValue(0, "Status")
		self.project_queue_grid.SetColSize(0, 80)
		self.project_queue_grid.SetColLabelValue(1, "prefixList")
		self.project_queue_grid.SetColSize(1, 300)
		self.project_queue_grid.SetColLabelValue(2, "pretty_name")
		self.project_queue_grid.SetColSize(2, 90)
		self.project_queue_grid.SetColLabelValue(3, "bb_points")
		self.project_queue_grid.SetColSize(3, 80)
		self.project_queue_grid.SetColLabelValue(4, "bb_scans")
		self.project_queue_grid.SetColSize(4, 80)
		self.project_queue_grid.SetColLabelValue(5, "noise_thresh")
		self.project_queue_grid.SetColSize(5, 100)
		self.project_queue_grid.SetColLabelValue(6, "target_range")
		self.project_queue_grid.SetColSize(6, 100)
		self.project_queue_grid.SetColLabelValue(7, "exclude_ions")
		self.project_queue_grid.SetColSize(7, 100)
		self.project_queue_grid.SetColLabelValue(8, "tophat")
		self.project_queue_grid.SetColSize(8, 73)
		self.project_queue_grid.SetColLabelValue(9, "tophat_unit")
		self.project_queue_grid.SetColSize(9, 93)
		self.project_queue_grid.SetColLabelValue(10, "mass_range")
		self.project_queue_grid.SetColSize(10, 93)
		self.project_queue_grid.SetColLabelValue(11, "rt_modulation")
		self.project_queue_grid.SetColSize(11, 110)
		self.project_queue_grid.SetColLabelValue(12, "gap_penalty")
		self.project_queue_grid.SetColSize(12, 93)
		self.project_queue_grid.SetColLabelValue(13, "min_peaks")
		self.project_queue_grid.SetColSize(13, 83)
		self.project_queue_grid.SetColLabelValue(14, "do_quantitative")
		self.project_queue_grid.SetColSize(14, 123)
		self.project_queue_grid.SetColLabelValue(15, "do_qualitative")
		self.project_queue_grid.SetColSize(15, 110)
		self.project_queue_grid.SetColLabelValue(16, "do_merge")
		self.project_queue_grid.SetColSize(16, 83)
		self.project_queue_grid.SetColLabelValue(17, "do_counter")
		self.project_queue_grid.SetColSize(17, 90)
		self.project_queue_grid.SetColLabelValue(18, "do_spectra")
		self.project_queue_grid.SetColSize(18, 83)
		self.project_queue_grid.SetColLabelValue(19, "do_charts")
		self.project_queue_grid.SetColSize(19, 83)
		self.open_project_picker.SetMinSize((512, 29))
		self.open_project_picker_clear.SetMinSize((30, 30))
		self.open_project_picker_open.SetMinSize((-1, 30))
		self.radar_chart_button.SetMinSize((200, 200))
		self.mean_peak_area_button.SetMinSize((200, 200))
		self.open_project_header_browser.SetMinSize((200, 200))
		self.box_whisker_button.SetMinSize((200, 200))
		self.peak_area_button.SetMinSize((200, 200))
		self.chromatogram_button.SetMinSize((200, 200))
		self.focus_thief.SetMinSize((1, 1))
		self.CloseProject.SetMinSize((38, 38))
		self.CloseProject.SetToolTip("Close Project")
		self.OpenSample.SetMinSize((38, 38))
		self.OpenSample.SetToolTip("Open Sample Chromatogram")
		self.ViewPeakList.SetMinSize((38, 38))
		self.ViewPeakList.SetToolTip("View Peak List")
		self.PreviousSample.SetMinSize((38, 38))
		self.PreviousSample.SetToolTip("Previous Sample")
		self.NextSample.SetMinSize((38, 38))
		self.NextSample.SetToolTip("Next Sample")
		self.ResetView.SetMinSize((38, 38))
		self.ResetView.SetToolTip("Reset View")
		self.PreviousView.SetMinSize((38, 38))
		self.PreviousView.SetToolTip("Previous View")
		self.Zoom_Btn.SetMinSize((38, 38))
		self.Zoom_Btn.SetToolTip("Pan")
		self.Pan_Btn.SetMinSize((38, 38))
		self.Pan_Btn.SetToolTip("Pan")
		self.ViewSpectrum_Btn.SetMinSize((38, 38))
		self.ViewSpectrum_Btn.SetToolTip("View Mass Spectrum")
		self.chromatogram_toolbar.SetMinSize((-1, 32))
		self.chromatogram_canvas.SetMinSize((1, 1))
		self.help_focus_thief.SetMinSize((1, 1))
		self.help_back_btn.SetMinSize((38, 38))
		self.help_back_btn.SetToolTip("Go back")
		self.help_forward_btn.SetMinSize((38, 38))
		self.help_forward_btn.SetToolTip("Go forward")
		self.help_home_btn.SetMinSize((38, 38))
		self.help_home_btn.SetToolTip("Open the homepage")
		self.help_url_text_ctrl.SetMinSize((380, -1))
		self.help_go_btn.SetMinSize((38, 38))
		self.help_go_btn.SetToolTip("Go to URL")
		self.help_readme_btn.SetMinSize((38, 38))
		self.help_readme_btn.SetToolTip("View Readme")
		self.help_github_btn.SetMinSize((38, 38))
		self.help_github_btn.SetToolTip("View GitHub page")
		self.help_toolbar_panel.SetMaxSize((10000000,40))
		# end wxGlade
		

	def __do_layout(self):
		# begin wxGlade: Launcher.__do_layout
		parent_sizer = wx.BoxSizer(wx.VERTICAL)
		help_parent_sizer = wx.BoxSizer(wx.VERTICAL)
		help_main_sizer = wx.BoxSizer(wx.VERTICAL)
		help_toolbar_sizer = wx.BoxSizer(wx.HORIZONTAL)
		chromatogram_parent_sizer = wx.BoxSizer(wx.VERTICAL)
		chromatogram_main_sizer = wx.BoxSizer(wx.VERTICAL)
		chrom_toolbar_sizer = wx.BoxSizer(wx.HORIZONTAL)
		open_project_tab_sizer = wx.BoxSizer(wx.VERTICAL)
		open_project_body_sizer = wx.GridSizer(2, 3, 5, 5)
		chromatogram_sizer = wx.BoxSizer(wx.VERTICAL)
		peak_area_sizer = wx.BoxSizer(wx.VERTICAL)
		box_whisker_sizer = wx.BoxSizer(wx.VERTICAL)
		open_project_header_sizer = wx.BoxSizer(wx.VERTICAL)
		mean_peak_area_sizer = wx.BoxSizer(wx.VERTICAL)
		radar_chart_sizer = wx.BoxSizer(wx.VERTICAL)
		open_project_top_sizer = wx.BoxSizer(wx.VERTICAL)
		open_project_picker_sizer = wx.BoxSizer(wx.HORIZONTAL)
		new_project_tab_sizer = wx.BoxSizer(wx.HORIZONTAL)
		project_log_tab_sizer = wx.BoxSizer(wx.HORIZONTAL)
		project_log_sizer = wx.BoxSizer(wx.VERTICAL)
		project_queue_tab_sizer = wx.BoxSizer(wx.HORIZONTAL)
		project_queue_sizer = wx.BoxSizer(wx.VERTICAL)
		project_queue_btn_sizer = wx.BoxSizer(wx.HORIZONTAL)
		project_settings_sizer = wx.BoxSizer(wx.HORIZONTAL)
		new_project_settings_v_sizer = wx.BoxSizer(wx.VERTICAL)
		new_project_settings_grid_sizer = wx.FlexGridSizer(9, 3, 10, 10)
		new_project_button_sizer = wx.BoxSizer(wx.VERTICAL)
		project_settings_run_sizer = wx.BoxSizer(wx.HORIZONTAL)
		project_settings_button_sizer = wx.BoxSizer(wx.HORIZONTAL)
		new_project_steps_sizer = wx.GridSizer(4, 2, 0, 0)
		pretty_name_sizer = wx.BoxSizer(wx.VERTICAL)
		pretty_name_value_sizer = wx.BoxSizer(wx.HORIZONTAL)
		range_sizer = wx.BoxSizer(wx.VERTICAL)
		target_range_grid_sizer = wx.FlexGridSizer(1, 4, 0, 0)
		tophat_grid_sizer = wx.FlexGridSizer(1, 3, 0, 0)
		noise_thresh_grid_sizer_copy = wx.FlexGridSizer(1, 3, 0, 0)
		filter_sizer = wx.BoxSizer(wx.VERTICAL)
		mass_range_sizer = wx.BoxSizer(wx.VERTICAL)
		alignment_sizer = wx.BoxSizer(wx.VERTICAL)
		alignment_grid_sizer = wx.GridSizer(3, 2, 0, 0)
		alignment_Dw_sizer = wx.BoxSizer(wx.HORIZONTAL)
		bb_sizer = wx.BoxSizer(wx.VERTICAL)
		bb_grid_sizer = wx.GridSizer(2, 2, 0, 0)
		new_project_picker_sizer = wx.BoxSizer(wx.VERTICAL)
		import_tab_sizer = wx.BoxSizer(wx.HORIZONTAL)
		import_log_sizer = wx.BoxSizer(wx.VERTICAL)
		import_picker_sizer = wx.BoxSizer(wx.VERTICAL)
		launcher_parent_sizer = wx.BoxSizer(wx.HORIZONTAL)
		launcher_right_sizer = wx.BoxSizer(wx.VERTICAL)
		messages_sizer = wx.BoxSizer(wx.VERTICAL)
		sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
		grid_sizer_1 = wx.GridSizer(3, 3, 40, 20)
		grid_sizer_1.Add(self.import_raw_button, 0, wx.ALIGN_CENTER, 64)
		import_description_label = wx.StaticText(self.launcher_parent_panel, wx.ID_ANY, "Import PerkinElmer/Waters .RAW files and convert to JCAMP-DX format.", style=wx.ALIGN_LEFT)
		import_description_label.Wrap(256)
		grid_sizer_1.Add(import_description_label, 0, wx.ALIGN_CENTER_VERTICAL, 64)
		grid_sizer_1.Add(self.import_info_button, 0, wx.ALIGN_CENTER, 1)
		grid_sizer_1.Add(self.new_project_button, 0, wx.ALIGN_CENTER, 64)
		new_project_description_label = wx.StaticText(self.launcher_parent_panel, wx.ID_ANY, "Create a new project for a set of samples, performing pre-processing before extracting spectra and generating reports.", style=wx.ALIGN_LEFT)
		new_project_description_label.Wrap(256)
		grid_sizer_1.Add(new_project_description_label, 0, wx.ALIGN_CENTER_VERTICAL, 64)
		grid_sizer_1.Add(self.new_info_button, 0, wx.ALIGN_CENTER, 1)
		grid_sizer_1.Add(self.open_project_button, 0, wx.ALIGN_CENTER, 64)
		open_project_description_label = wx.StaticText(self.launcher_parent_panel, wx.ID_ANY, "Open an existing project for viewing, library searching, or further processing", style=wx.ALIGN_LEFT)
		open_project_description_label.Wrap(256)
		grid_sizer_1.Add(open_project_description_label, 0, wx.ALIGN_CENTER_VERTICAL, 64)
		grid_sizer_1.Add(self.open_info_button, 0, wx.ALIGN_CENTER, 0)
		sizer_2.Add(grid_sizer_1, 0, wx.ALIGN_CENTER | wx.BOTTOM | wx.EXPAND | wx.TOP, 10)
		self.launcher_parent_panel.SetSizer(sizer_2)
		launcher_parent_sizer.Add(self.launcher_parent_panel, 3, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 10)
		messages_label = wx.StaticText(self.messages_panel, wx.ID_ANY, "Messages")
		messages_label.SetFont(wx.Font(16, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
		messages_sizer.Add(messages_label, 0, wx.ALL, 5)
		messages_sizer.Add(self.messages, 1, wx.EXPAND, 0)
		self.messages_panel.SetSizer(messages_sizer)
		launcher_right_sizer.Add(self.messages_panel, 1, wx.ALL | wx.EXPAND, 5)
		self.launcher_right_panel.SetSizer(launcher_right_sizer)
		launcher_parent_sizer.Add(self.launcher_right_panel, 2, wx.EXPAND, 10)
		self.Launcher.SetSizer(launcher_parent_sizer)
		import_picker_label = wx.StaticText(self.import_picker_panel, wx.ID_ANY, ".RAW Files to Import")
		import_picker_sizer.Add(import_picker_label, 0, wx.BOTTOM, 18)
		import_picker_sizer.Add(self.check_list_box_1, 1, wx.BOTTOM | wx.EXPAND, 7)
		import_picker_sizer.Add(self.import_btn, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RIGHT, 9)
		self.import_picker_panel.SetSizer(import_picker_sizer)
		import_tab_sizer.Add(self.import_picker_panel, 4, wx.ALL | wx.EXPAND, 10)
		import_log_label = wx.StaticText(self.import_log_panel, wx.ID_ANY, "Log:")
		import_log_sizer.Add(import_log_label, 0, wx.TOP, 5)
		import_log_sizer.Add(self.import_log_text_control, 4, wx.EXPAND | wx.TOP, 5)
		self.import_log_panel.SetSizer(import_log_sizer)
		import_tab_sizer.Add(self.import_log_panel, 5, wx.ALL | wx.EXPAND, 10)
		self.Import.SetSizer(import_tab_sizer)
		new_project_picker_label = wx.StaticText(self.new_project_picker_panel, wx.ID_ANY, "Samples to Process: ")
		new_project_picker_sizer.Add(new_project_picker_label, 0, wx.BOTTOM, 18)
		new_project_picker_sizer.Add(self.check_list_box_2, 1, wx.BOTTOM | wx.EXPAND, 7)
		self.new_project_picker_panel.SetSizer(new_project_picker_sizer)
		project_settings_sizer.Add(self.new_project_picker_panel, 5, wx.ALL | wx.EXPAND, 10)
		bb_top_text = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Settings for Biller and Biemann Peak Detection")
		bb_top_text.SetToolTip("Settings for PyMS implementation of BillerBiemann peak detection")
		bb_sizer.Add(bb_top_text, 0, 0, 0)
		bb_points_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Number of Points: ")
		bb_points_label.SetToolTip("The window width, in data points, for detecting the local maxima")
		bb_grid_sizer.Add(bb_points_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		bb_grid_sizer.Add(self.bb_points_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		bb_scans_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Number of Scans: ")
		bb_scans_label.SetToolTip("The number of scans across which neighbouring, apexing, ions are combined and considered as belonging to the same peak")
		bb_grid_sizer.Add(bb_scans_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		bb_grid_sizer.Add(self.bb_scans_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		bb_sizer.Add(bb_grid_sizer, 1, wx.ALL | wx.EXPAND, 5)
		new_project_settings_grid_sizer.Add(bb_sizer, 1, wx.EXPAND, 0)
		new_project_v_line_1 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		new_project_settings_grid_sizer.Add(new_project_v_line_1, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 2)
		alignment_top_text = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Settings for Dynamic Peak Alignment")
		alignment_top_text.SetToolTip("Settings for PyMS Dynamic Peak Alignment")
		alignment_sizer.Add(alignment_top_text, 0, 0, 0)
		alignment_Dw_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "RT Modulation: ")
		alignment_grid_sizer.Add(alignment_Dw_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_Dw_sizer.Add(self.alignment_Dw_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_Dw_label_2 = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, " s", style=wx.ALIGN_LEFT)
		alignment_Dw_sizer.Add(alignment_Dw_label_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_grid_sizer.Add(alignment_Dw_sizer, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
		alignment_Gw_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Gap Penalty: ")
		alignment_grid_sizer.Add(alignment_Gw_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_grid_sizer.Add(self.alignment_Gw_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_min_peaks_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Min Peaks: ")
		alignment_grid_sizer.Add(alignment_min_peaks_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_grid_sizer.Add(self.alignment_min_peaks_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_sizer.Add(alignment_grid_sizer, 1, wx.ALL | wx.EXPAND, 5)
		new_project_settings_grid_sizer.Add(alignment_sizer, 1, wx.EXPAND, 0)
		new_project_h_line_1 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_grid_sizer.Add(new_project_h_line_1, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
		new_project_settings_grid_sizer.Add((0, 0), 0, 0, 0)
		new_project_h_line_3 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_grid_sizer.Add(new_project_h_line_3, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
		mass_range_top_text = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Mass Range:   (min, max)")
		mass_range_sizer.Add(mass_range_top_text, 0, 0, 5)
		mass_range_sizer.Add(self.mass_range_value, 0, wx.BOTTOM | wx.RIGHT | wx.TOP, 6)
		mass_range_text_bottom = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "This must be small enough to encompass all samples")
		mass_range_sizer.Add(mass_range_text_bottom, 0, wx.BOTTOM | wx.LEFT, 10)
		new_project_settings_grid_sizer.Add(mass_range_sizer, 1, wx.EXPAND, 0)
		new_project_v_line_4 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		new_project_settings_grid_sizer.Add(new_project_v_line_4, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 2)
		base_peak_filter_text_1 = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Exclude peaks with the following base ion(s):")
		base_peak_filter_text_1.SetToolTip("Peaks with these base ions (i.e. the most intense peak in the mass spectrum) will be excluded from the results. This can be useful for excluding compounds related to septum bleed, which usually have a base ion at m/z 73")
		filter_sizer.Add(base_peak_filter_text_1, 0, 0, 0)
		filter_sizer.Add(self.base_peak_filter_value, 0, wx.BOTTOM | wx.RIGHT | wx.TOP, 6)
		base_peak_filter_text_2 = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Seperate multiple values with commas ( , )")
		base_peak_filter_text_2.SetToolTip("Peaks with these base ions (i.e. the most intense peak in the mass spectrum) will be excluded from the results. This can be useful for excluding compounds related to septum bleed, which usually have a base ion at m/z 73")
		filter_sizer.Add(base_peak_filter_text_2, 0, wx.BOTTOM | wx.LEFT, 10)
		new_project_settings_grid_sizer.Add(filter_sizer, 1, wx.EXPAND, 0)
		new_project_h_line_4 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_grid_sizer.Add(new_project_h_line_4, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
		new_project_settings_grid_sizer.Add((0, 0), 0, 0, 0)
		new_project_h_line_5 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_grid_sizer.Add(new_project_h_line_5, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
		noise_thresh_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Noise Filtering Threshold: ")
		noise_thresh_grid_sizer_copy.Add(noise_thresh_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		noise_thresh_grid_sizer_copy.Add(self.noise_thresh_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		noise_thresh_ions = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "ions")
		noise_thresh_grid_sizer_copy.Add(noise_thresh_ions, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		new_project_settings_grid_sizer.Add(noise_thresh_grid_sizer_copy, 1, wx.EXPAND, 5)
		new_project_v_line_6 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		new_project_settings_grid_sizer.Add(new_project_v_line_6, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 2)
		tophat_struct_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Tophat Structural Element: ")
		tophat_struct_label.SetToolTip("Structural element for PyMS Tophat baseline correction. The structural element needs to be larger than the features one wants to retain in the spectrum after the top-hat transform")
		tophat_grid_sizer.Add(tophat_struct_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		tophat_grid_sizer.Add(self.tophat_struct_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		tophat_grid_sizer.Add(self.tophat_struct_units, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		new_project_settings_grid_sizer.Add(tophat_grid_sizer, 1, wx.EXPAND, 5)
		new_project_h_line_6 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_grid_sizer.Add(new_project_h_line_6, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
		new_project_settings_grid_sizer.Add((0, 0), 0, 0, 0)
		new_project_h_line_7 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_grid_sizer.Add(new_project_h_line_7, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
		target_range_top_text = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Search for peaks between these times:")
		range_sizer.Add(target_range_top_text, 0, 0, 5)
		target_range_grid_sizer.Add(self.target_range_min_value, 0, 0, 0)
		target_mid_text = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "minutes and ")
		target_range_grid_sizer.Add(target_mid_text, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		target_range_grid_sizer.Add(self.target_range_max_value, 0, 0, 0)
		target_post_text = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "minutes")
		target_range_grid_sizer.Add(target_post_text, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		range_sizer.Add(target_range_grid_sizer, 1, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, 5)
		new_project_settings_grid_sizer.Add(range_sizer, 1, wx.EXPAND, 0)
		new_project_v_line_7 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		new_project_settings_grid_sizer.Add(new_project_v_line_7, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 2)
		pretty_name_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "(Optional) Human-Readable Name:")
		pretty_name_sizer.Add(pretty_name_label, 0, wx.BOTTOM, 5)
		pretty_name_value_sizer.Add(self.pretty_name_value, 0, 0, 0)
		pretty_name_value_sizer.Add(self.pretty_name_clear, 0, 0, 0)
		pretty_name_sizer.Add(pretty_name_value_sizer, 1, wx.EXPAND, 0)
		new_project_settings_grid_sizer.Add(pretty_name_sizer, 1, wx.EXPAND, 0)
		new_project_h_line_8 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_grid_sizer.Add(new_project_h_line_8, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
		new_project_settings_grid_sizer.Add((0, 0), 0, 0, 0)
		new_project_h_line_9 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_grid_sizer.Add(new_project_h_line_9, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
		steps_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Processing Steps: ")
		new_project_steps_sizer.Add(steps_label, 0, 0, 0)
		new_project_steps_sizer.Add((0, 0), 0, 0, 0)
		new_project_steps_sizer.Add(self.project_quantitative, 0, 0, 0)
		new_project_steps_sizer.Add(self.project_merge, 0, 0, 0)
		new_project_steps_sizer.Add(self.project_qualitative, 0, 0, 0)
		new_project_steps_sizer.Add(self.project_counter, 0, 0, 0)
		new_project_steps_sizer.Add(self.project_spectra, 0, wx.TOP, 5)
		new_project_steps_sizer.Add(self.project_charts, 0, wx.TOP, 7)
		new_project_settings_grid_sizer.Add(new_project_steps_sizer, 1, wx.EXPAND, 0)
		new_project_v_line_8 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		new_project_settings_grid_sizer.Add(new_project_v_line_8, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 2)
		project_settings_button_sizer.Add(self.import_apply_btn, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RIGHT, 9)
		project_settings_button_sizer.Add(self.default, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RIGHT, 9)
		project_settings_button_sizer.Add(self.reset, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RIGHT, 9)
		new_project_button_sizer.Add(project_settings_button_sizer, 1, wx.ALIGN_RIGHT, 20)
		project_settings_run_sizer.Add(self.queue_btn, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RIGHT | wx.TOP, 9)
		project_settings_run_sizer.Add(self.run_btn, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RIGHT | wx.TOP, 9)
		new_project_button_sizer.Add(project_settings_run_sizer, 1, wx.ALIGN_RIGHT, 0)
		new_project_settings_grid_sizer.Add(new_project_button_sizer, 1, wx.EXPAND, 0)
		new_project_settings_v_sizer.Add(new_project_settings_grid_sizer, 1, wx.EXPAND, 0)
		new_project_line = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_v_sizer.Add(new_project_line, 0, wx.EXPAND | wx.TOP, 10)
		self.new_project_settings_panel.SetSizer(new_project_settings_v_sizer)
		project_settings_sizer.Add(self.new_project_settings_panel, 5, wx.ALL | wx.EXPAND, 10)
		self.new_project_settings.SetSizer(project_settings_sizer)
		project_queue_label = wx.StaticText(self.project_queue_panel, wx.ID_ANY, "Queue:")
		project_queue_sizer.Add(project_queue_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 5)
		project_queue_sizer.Add(self.project_queue_grid, 14, wx.BOTTOM | wx.EXPAND | wx.TOP, 4)
		project_queue_btn_sizer.Add(self.project_queue_clear_btn, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		project_queue_btn_sizer.Add(self.project_queue_delete_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 5)
		project_queue_btn_sizer.Add(self.project_queue_save_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 50)
		project_queue_btn_sizer.Add(self.project_queue_load_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 5)
		project_queue_btn_sizer.Add(self.project_queue_run_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.LEFT, 50)
		project_queue_sizer.Add(project_queue_btn_sizer, 1, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT, 0)
		self.project_queue_panel.SetSizer(project_queue_sizer)
		project_queue_tab_sizer.Add(self.project_queue_panel, 1, wx.ALL | wx.EXPAND, 10)
		self.new_project_queue.SetSizer(project_queue_tab_sizer)
		project_log_label = wx.StaticText(self.project_log_panel, wx.ID_ANY, "Log:")
		project_log_sizer.Add(project_log_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 5)
		project_log_sizer.Add(self.project_log_text_control, 4, wx.EXPAND | wx.TOP, 5)
		project_log_sizer.Add(self.project_log_save_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
		self.project_log_panel.SetSizer(project_log_sizer)
		project_log_tab_sizer.Add(self.project_log_panel, 1, wx.ALL | wx.EXPAND, 10)
		self.new_project_log.SetSizer(project_log_tab_sizer)
		self.new_project_notebook.AddPage(self.new_project_settings, "Settings")
		self.new_project_notebook.AddPage(self.new_project_queue, "Queue")
		self.new_project_notebook.AddPage(self.new_project_log, "Log")
		new_project_tab_sizer.Add(self.new_project_notebook, 1, wx.EXPAND, 0)
		self.New_Project.SetSizer(new_project_tab_sizer)
		open_project_picker_label = wx.StaticText(self.open_project_top_panel, wx.ID_ANY, "Choose a Project: ")
		open_project_top_sizer.Add(open_project_picker_label, 0, wx.TOP, 5)
		open_project_picker_sizer.Add(self.open_project_picker, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		open_project_picker_sizer.Add(self.open_project_picker_clear, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		open_project_picker_sizer.Add(self.open_project_picker_open, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		open_project_top_sizer.Add(open_project_picker_sizer, 1, wx.EXPAND, 0)
		self.open_project_top_panel.SetSizer(open_project_top_sizer)
		open_project_tab_sizer.Add(self.open_project_top_panel, 1, wx.ALL | wx.EXPAND, 10)
		radar_chart_label = wx.StaticText(self.open_project_body_panel, wx.ID_ANY, "Radar Chart", style=wx.ALIGN_CENTER)
		radar_chart_sizer.Add(radar_chart_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 25)
		radar_chart_sizer.Add(self.radar_chart_button, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		open_project_body_sizer.Add(radar_chart_sizer, 1, wx.EXPAND, 0)
		mean_peak_area_label = wx.StaticText(self.open_project_body_panel, wx.ID_ANY, "Mean Peak Area")
		mean_peak_area_sizer.Add(mean_peak_area_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 25)
		mean_peak_area_sizer.Add(self.mean_peak_area_button, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		open_project_body_sizer.Add(mean_peak_area_sizer, 1, wx.EXPAND, 0)
		open_project_header_info_label = wx.StaticText(self.open_project_body_panel, wx.ID_ANY, "Samples in this Project:", style=wx.ALIGN_LEFT)
		open_project_header_sizer.Add(open_project_header_info_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 25)
		open_project_header_sizer.Add(self.open_project_header_browser, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.TOP, 5)
		open_project_body_sizer.Add(open_project_header_sizer, 1, wx.EXPAND, 0)
		box_whisker_label = wx.StaticText(self.open_project_body_panel, wx.ID_ANY, "Box & Whisker Plot", style=wx.ALIGN_CENTER)
		box_whisker_sizer.Add(box_whisker_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 25)
		box_whisker_sizer.Add(self.box_whisker_button, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		open_project_body_sizer.Add(box_whisker_sizer, 1, wx.EXPAND, 0)
		peak_area_label = wx.StaticText(self.open_project_body_panel, wx.ID_ANY, "Peak Area", style=wx.ALIGN_CENTER)
		peak_area_sizer.Add(peak_area_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 25)
		peak_area_sizer.Add(self.peak_area_button, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		open_project_body_sizer.Add(peak_area_sizer, 1, wx.EXPAND, 0)
		chromatogram_label = wx.StaticText(self.open_project_body_panel, wx.ID_ANY, "Chromatogram")
		chromatogram_sizer.Add(chromatogram_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		chromatogram_sizer.Add(self.chromatogram_button, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		open_project_body_sizer.Add(chromatogram_sizer, 1, wx.EXPAND, 0)
		self.open_project_body_panel.SetSizer(open_project_body_sizer)
		open_project_tab_sizer.Add(self.open_project_body_panel, 7, wx.ALL | wx.EXPAND, 10)
		self.Open_Project.SetSizer(open_project_tab_sizer)
		chrom_toolbar_sizer.Add(self.focus_thief, 0, 0, 0)
		chrom_toolbar_sizer.Add(self.CloseProject, 0, 0, 0)
		chrom_toolbar_sizer.Add(self.OpenSample, 0, 0, 0)
		chrom_toolbar_spacer_1 = wx.StaticLine(self.chromatogram_toolbar, wx.ID_ANY, style=wx.LI_VERTICAL)
		chrom_toolbar_sizer.Add(chrom_toolbar_spacer_1, 0, wx.EXPAND, 0)
		chrom_toolbar_sizer.Add(self.ViewPeakList, 0, 0, 0)
		chrom_toolbar_sizer.Add(self.PreviousSample, 0, 0, 0)
		chrom_toolbar_sizer.Add(self.NextSample, 0, 0, 0)
		chrom_toolbar_spacer_2 = wx.StaticLine(self.chromatogram_toolbar, wx.ID_ANY, style=wx.LI_VERTICAL)
		chrom_toolbar_sizer.Add(chrom_toolbar_spacer_2, 0, wx.EXPAND, 0)
		chrom_toolbar_sizer.Add(self.ResetView, 0, 0, 0)
		chrom_toolbar_sizer.Add(self.PreviousView, 0, 0, 0)
		chrom_toolbar_sizer.Add(self.Zoom_Btn, 0, 0, 0)
		chrom_toolbar_sizer.Add(self.Pan_Btn, 0, 0, 0)
		chrom_toolbar_sizer.Add(self.ViewSpectrum_Btn, 0, 0, 0)
		chrom_toolbar_sizer.Add((0, 0), 0, 0, 0)
		chrom_toolbar_sizer.Add((0, 0), 0, 0, 0)
		self.chromatogram_toolbar.SetSizer(chrom_toolbar_sizer)
		chromatogram_parent_sizer.Add(self.chromatogram_toolbar, 1, wx.EXPAND, 0)
		chromatogram_main_sizer.Add(self.chromatogram_canvas, 1, wx.EXPAND, 0)
		self.chromatogram_parent_panel.SetSizer(chromatogram_main_sizer)
		chromatogram_parent_sizer.Add(self.chromatogram_parent_panel, 1, wx.EXPAND, 10)
		self.Chromatogram.SetSizer(chromatogram_parent_sizer)
		help_toolbar_sizer.Add(self.help_focus_thief, 0, 0, 0)
		help_toolbar_sizer.Add(self.help_back_btn, 0, 0, 0)
		help_toolbar_sizer.Add(self.help_forward_btn, 0, 0, 0)
		help_toolbar_sizer.Add(self.help_home_btn, 0, 0, 0)
		help_toolbar_spacer_1 = wx.StaticLine(self.help_toolbar_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		help_toolbar_sizer.Add(help_toolbar_spacer_1, 0, wx.EXPAND, 0)
		help_toolbar_sizer.Add(self.help_url_text_ctrl, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 5)
		help_toolbar_sizer.Add(self.help_go_btn, 0, 0, 0)
		help_toolbar_spacer_2 = wx.StaticLine(self.help_toolbar_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		help_toolbar_sizer.Add(help_toolbar_spacer_2, 0, wx.EXPAND, 0)
		help_toolbar_sizer.Add(self.help_readme_btn, 0, 0, 0)
		help_toolbar_sizer.Add(self.help_github_btn, 0, 0, 0)
		help_toolbar_spacer_3 = wx.StaticLine(self.help_toolbar_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		help_toolbar_sizer.Add(help_toolbar_spacer_3, 0, wx.EXPAND, 0)
		help_toolbar_sizer.Add(self.help_open_browser_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 5)
		self.help_toolbar_panel.SetSizer(help_toolbar_sizer)
		help_parent_sizer.Add(self.help_toolbar_panel, 1, wx.EXPAND, 0)
		help_main_sizer.Add(self.help_browser, 1, wx.EXPAND, 0)
		self.help_parent_panel.SetSizer(help_main_sizer)
		help_parent_sizer.Add(self.help_parent_panel, 1, wx.EXPAND, 10)
		self.Help.SetSizer(help_parent_sizer)
		self.notebook_1.AddPage(self.Launcher, "Launcher")
		self.notebook_1.AddPage(self.Import, "Import")
		self.notebook_1.AddPage(self.New_Project, "New Project")
		self.notebook_1.AddPage(self.Open_Project, "Open Project")
		self.notebook_1.AddPage(self.Chromatogram, "Chromatogram")
		self.notebook_1.AddPage(self.Help, "Help")
		parent_sizer.Add(self.notebook_1, 1, wx.ALL | wx.EXPAND, 3)
		self.SetSizer(parent_sizer)
		parent_sizer.Fit(self)
		self.Layout()
		# end wxGlade
	
		# Following code by Ray Pasco (c) 2005
		# http://wxpython-users.1045709.n5.nabble.com/Gauge-in-Statusbar-td2321906.html
		sbarfield = 1  # put progressbar (gauge) in this statusbar field
		self.maxcount = 1000  # arbitrary full-scale count
		self.progbar = ProgressStatusBar(self, self.statusbar,
												 2, sbarfield, self.maxcount)
		# Thanks Ray


	def display_chromatogram(self, sample_name=None):
		"""Chromatogram Diaplay"""
		
		self.Bind(wx.EVT_SIZE, self.size_change)
		self.Bind(wx.EVT_MAXIMIZE, self.size_change)
		self.Bind(wx.EVT_CLOSE, self.on_close)
		
		self.toolbar = NavigationToolbar(self.chromatogram_canvas)
		self.toolbar.Hide()
		
		self.chrom_zoom = True
		self.chrom_pan = False
		self.chrom_spec = False
		
		# Constrain zoom to x axis only
		# From https://stackoverflow.com/questions/16705452/matplotlib-forcing-pan-zoom-to-constrain-to-x-axes
		def press_zoom(self, event):
			event.key = 'x'
			NavigationToolbar.press_zoom(self, event)
		
		self.chromatogram_figure.canvas.toolbar.press_zoom = types.MethodType(press_zoom, self.chromatogram_figure.canvas.toolbar)
		
		time_list = []
		intensity_list = []
		
		display = Display(self.chromatogram_figure, self.chromatogram_axes)
		
		if sample_name:
			ExprDir = self.Config.get("main", "exprdir")
		
			with open(os.path.join(ExprDir, "{}_tic.dat".format(sample_name))) as tic_file:
				ticreader = csv.reader(tic_file, delimiter=" ")
				for row in ticreader:
					row = list(filter(None, row))
					intensity_array = intensity_list.append(float(row[1]))
					time_list.append(float(row[0]))
			
			intensity_array = numpy.array(intensity_list)
			tic = IonChromatogram(intensity_array, time_list)
			
			peak_list = load_peaks(os.path.join(ExprDir, "{}_peaks.dat".format(sample_name)))
		
			display.plot_tic(tic, "TIC")
			# display.plot_peaks(filtered_peak_list, "Peaks")
			display.do_plotting('TIC and PyMS Detected Peaks')
		
			y = tic.get_intensity_array()
			x = tic.get_time_list()
			
			self.chromatogram_axes.set_xlim(left=0, right=max(x))
		
		else:
			self.chromatogram_axes.text(0.5, 0.5, "Please select a Project", horizontalalignment="center", fontsize='32', transform=self.chromatogram_axes.transAxes)
		
		self.chromatogram_axes.set_ylim(bottom=0)
		self.chromatogram_axes.set_xlabel("Retention Time")
		self.chromatogram_axes.set_ylabel("Intensity")
		
		self.chromatogram_figure.subplots_adjust(left=0.1, bottom=0.125, top=0.9, right=0.97)
		# figure.tight_layout()
		self.chromatogram_canvas.draw()
		
		# def on_xlims_change(ax):
		def update_ylim(*args):
			#	print(*args)
			#	print(str(*args).startswith("MPL MouseEvent")) # Pan
			if (str(*args).startswith("My_AxesSubplot") and not self.Zoom_Btn.IsEnabled()) or (
					str(*args).startswith("MPL MouseEvent") and not self.Pan_Btn.IsEnabled()):  # Zoom, Pan
				#	print("updated xlims: ", axes.get_xlim())
				min_x_index = (numpy.abs(x - self.chromatogram_axes.get_xlim()[0])).argmin()
				max_x_index = (numpy.abs(x - self.chromatogram_axes.get_xlim()[1])).argmin()
				#	print(min_x_index, max_x_index)
				
				y_vals_for_range = numpy.take(y, [idx for idx in range(min_x_index, max_x_index)])
				#	print(max(y_vals_for_range))
				self.chromatogram_axes.set_ylim(bottom=0, top=max(y_vals_for_range) * 1.1)
				self.chromatogram_figure.canvas.draw()
				#	print("x-val: {}, y-val:{}
				self.size_change(0)
		
		self.chromatogram_axes.callbacks.connect('xlim_changed', update_ylim)
		self.chromatogram_figure.canvas.callbacks.connect("button_release_event", update_ylim)
		
		# print(axes.get_ylim())
	


	def save_config(self):
		with open("config.ini","w") as configfile:
			self.Config.write(configfile)

	def on_close(self, event): # here
		self.save_config()
		
		self.on_save_queue(pathname="lib/queue.csv")
		
		with open("lib/pretty_names_list", "w") as pretty_name_file:
			for pretty_name in self.pretty_name_list:
				pretty_name_file.write(pretty_name)
				pretty_name_file.write("\n")

		# Read internal settings	
		internal_config = ConfigParser.ConfigParser()
		internal_config.read("lib/gsmatch.ini")	

		screen_pos = self.GetPosition()

		# Save Internal Settings	
		internal_config.set("MAIN","position","{},{}".format(*screen_pos))
		with open("lib/gsmatch.ini","w") as configfile:
			configfile.write("#GunShotMatch Internal Configuration File.\n#Do not edit this file\n")
		with open("lib/gsmatch.ini","a") as configfile:
			internal_config.write(configfile)


		if event.CanVeto(): 
			if any([conversion_thread_running, project_thread_running]): # background worker still running
				wx.MessageBox("A process is still running.\nPlease wait for it to finish.","Please Wait",wx.ICON_ERROR | wx.OK)
				event.Veto()
				return
			
			if wx.MessageBox("Close GunShotMatch?",
							 "Please confirm",
							 wx.ICON_QUESTION | wx.YES_NO) != wx.YES:

				event.Veto()
				return

		print("Waiting for threads to finish...")	
		self.worker.join()
		
			
		self.Destroy()  # you may also do:  event.Skip()
						# since the default event handler does call Destroy(), too



	def size_change(self,event):
		#code to run whenever window resized
		self.chromatogram_canvas.draw()
		self.chromatogram_canvas.Refresh()
		if type(event) == wx._core.SizeEvent:
			event.Skip()


	def refresh_launcher(self, event):
		self.launcher_parent_panel.Layout()
		self.launcher_parent_panel.Update()
		self.launcher_parent_panel.Refresh()

	def OnImportDone(self, event):
		self.rescan_files()
		self.status("Import Complete", 5)

	def OnProjectDone(self, event):
		self.status("Project Created",5)

	def status(self, message, timeout = 3):
		for i in range(timeout):
			self.status_buffer.append(message)
		self.OnStatus(0)
		
	def reset_status(self):
		self.statusbar.SetStatusText("Status: Ready", 0)
		
	rest_message = "Ready"
	
	def OnStatus(self, evt):
		if len(self.status_buffer)>0:
			self.statusbar.SetStatusText("Status: {}".format(self.status_buffer.pop(0)), 0)
		else:
			self.statusbar.SetStatusText("Status: {}".format(self.rest_message), 0)
	
	def OnProjectLog(self, evt):
		#print(evt.log_text.replace("\r\033[K",""))
		self.project_log_text_control.AppendText(evt.log_text.replace("\r\033[K",""))
		#print(evt.log_text.encode("utf-8"))
	
	def OnImportLog(self, evt):
		self.import_log_text_control.AppendText(evt.log_text)
		#print(evt.log_text.encode("utf-8"))
		
	def on_exit(self, event):
		self.worker._stop()

	def get_sample_list(self, *args):
		selections_index = self.check_list_box_1.GetSelections() + list(self.check_list_box_1.GetCheckedItems())
		selections_index.sort()
	   
		selected = []
		
		for choice in self.sample_choices:
			if self.sample_choices.index(choice) in selections_index:
				selected.append(choice)
		selected.sort()
		self.sample_list = selected
		return selected		

	

	def on_menu_paths(self, event):  # wxGlade: Launcher.<event_handler>
		paths_dlg = paths_dialog(self)
		paths_dlg.Layout()
		if paths_dlg.ShowModal() == wx.ID_OK:
			if sys.platform == "win32":
				self.Config.set("main","nistpath",relpath(paths_dlg.nistpath.GetValue()))
			else:
				self.Config.set("main","linuxnistpath",relpath(paths_dlg.nistpath.GetValue()))
			self.Config.set("main","resultspath",relpath(paths_dlg.resultspath.GetValue()))
			self.Config.set("main","rawpath",relpath(paths_dlg.rawpath.GetValue()))
			self.Config.set("main","csvpath",relpath(paths_dlg.csvpath.GetValue()))
			self.Config.set("main","spectrapath",relpath(paths_dlg.spectrapath.GetValue()))
			self.Config.set("main","chartspath",relpath(paths_dlg.charts_path.GetValue()))
			self.Config.set("main","msppath",relpath(paths_dlg.msppath.GetValue()))
			self.Config.set("main","exprdir",relpath(paths_dlg.expr_path.GetValue()))
			
			maybe_make(relpath(paths_dlg.msppath.GetValue()))
			maybe_make(relpath(paths_dlg.resultspath.GetValue()))
			maybe_make(relpath(paths_dlg.expr_path.GetValue()))
			maybe_make(relpath(paths_dlg.charts_path.GetValue()))
			maybe_make(relpath(paths_dlg.csvpath.GetValue()))
			maybe_make(relpath(paths_dlg.spectrapath.GetValue()))
			
			
			self.status("Preferences applied",5)
		
		self.rescan_files()
		event.Skip()

	def on_menu_About(self, event):  # wxGlade: Launcher.<event_handler>
		about_dlg = AboutDialog(self)
		about_dlg.ShowModal()

	def on_menu_Exit(self, event):  # wxGlade: Launcher.<event_handler>
		self.Close()

	def on_import(self, event):  # wxGlade: Launcher.<event_handler>
		self.notebook_1.SetSelection(1)

	def on_new_project(self, event):  # wxGlade: Launcher.<event_handler>
		self.notebook_1.SetSelection(2)

	def on_open_project(self, event):  # wxGlade: Launcher.<event_handler>
		self.notebook_1.SetSelection(3)
		#event.Skip()

	def do_reset(self, *args):  # wxGlade: Launcher.<event_handler>
		# Read import settings
		self.bb_points_value.SetValue(self.Config.get("import", "bb_points"))
		self.bb_scans_value.SetValue(self.Config.get("import", "bb_scans"))
		self.noise_thresh_value.SetValue(self.Config.get("import", "noise_thresh"))
		target_range = self.Config.get("import", "target_range").split(",")
		self.target_range_min_value.SetValue(target_range[0].strip())
		self.target_range_max_value.SetValue(target_range[1].strip())
		self.base_peak_filter_value.SetValue(self.Config.get("import", "exclude_ions"))
		self.tophat_struct_value.SetValue(self.Config.get("import", "tophat"))
		tophat_unit = self.Config.get("import", "tophat_unit")
		if tophat_unit == "m": tophat_unit = 0
		elif tophat_unit == "s": tophat_unit = 1
		elif tophat_unit == "ms": tophat_unit = 2
		self.tophat_struct_units.SetSelection(tophat_unit)
		self.mass_range_value.SetValue(self.Config.get("import", "mass_range"))
		
		self.alignment_Dw_value.SetValue(self.Config.get("alignment", "rt_modulation"))
		self.alignment_Gw_value.SetValue(self.Config.get("alignment", "gap_penalty"))
		self.alignment_min_peaks_value.SetValue(self.Config.get("alignment", "min_peaks"))
		
		self.project_quantitative.SetValue(self.Config.getboolean("analysis", "do_quantitative"))
		self.project_qualitative.SetValue(self.Config.getboolean("analysis", "do_qualitative"))
		self.project_merge.SetValue(self.Config.getboolean("analysis", "do_merge"))
		self.project_counter.SetValue(self.Config.getboolean("analysis", "do_counter"))
		self.project_spectra.SetValue(self.Config.getboolean("analysis", "do_spectra"))
		self.project_charts.SetValue(self.Config.getboolean("analysis", "do_charts"))
	
	def do_default(self, *args):  # wxGlade: Launcher.<event_handler>
		# Reset to default Settings
		Config = ConfigParser.ConfigParser()
		Config.read("lib/default.ini")
		self.bb_points_value.SetValue(Config.get("import", "bb_points"))
		self.bb_scans_value.SetValue(Config.get("import", "bb_scans"))
		self.noise_thresh_value.SetValue(Config.get("import", "noise_thresh"))
		target_range = Config.get("import", "target_range").split(",")
		self.target_range_min_value.SetValue(target_range[0].strip())
		self.target_range_max_value.SetValue(target_range[1].strip())
		self.base_peak_filter_value.SetValue(Config.get("import", "exclude_ions"))
		self.tophat_struct_value.SetValue(Config.get("import", "tophat"))
		tophat_unit = self.Config.get("import", "tophat_unit")
		if tophat_unit == "m":
			tophat_unit = 0
		elif tophat_unit == "s":
			tophat_unit = 1
		elif tophat_unit == "ms":
			tophat_unit = 2
		self.tophat_struct_units.SetSelection(tophat_unit)
		self.mass_range_value.SetValue(Config.get("import", "mass_range"))

		self.alignment_Dw_value.SetValue(Config.get("alignment", "rt_modulation"))
		self.alignment_Gw_value.SetValue(Config.get("alignment", "gap_penalty"))
		self.alignment_min_peaks_value.SetValue(Config.get("alignment", "min_peaks"))
		
		self.project_quantitative.SetValue(Config.getboolean("analysis", "do_quantitative"))
		self.project_qualitative.SetValue(Config.getboolean("analysis", "do_qualitative"))
		self.project_merge.SetValue(Config.getboolean("analysis", "do_merge"))
		self.project_counter.SetValue(Config.getboolean("analysis", "do_counter"))
		self.project_spectra.SetValue(Config.getboolean("analysis", "do_spectra"))
		self.project_charts.SetValue(Config.getboolean("analysis", "do_charts"))
		


	def do_import(self, event):  # wxGlade: Launcher.<event_handler>
		# Check if the thread is already running:
		if conversion_thread_running:
			wx.MessageBox("The conversion process is already running.\nPlease wait for it to finish.","Please Wait",wx.ICON_ERROR | wx.OK)
			return
		
		# Files to import
		file_list = list(set(list(self.check_list_box_1.GetCheckedStrings()) + [self.check_list_box_1.GetString(item) for item in self.check_list_box_1.GetSelections()]))

		file_list.sort()
		
		if len(file_list) == 0:
			self.status("Please choose one or more samples!")
			return
		
		self.import_log_text_control.AppendText("Starting conversion of:\n")
		self.import_log_text_control.AppendText(", ".join(file_list))
		self.import_log_text_control.AppendText("\n\n")
		
		# Clear Selections
		for index in self.check_list_box_1.GetSelections():
			self.check_list_box_1.Deselect(index)
		self.check_list_box_1.SetCheckedItems([0])
		self.check_list_box_1.Check(0, False)
		#self.check_list_box_1.Select(0)

		
		self.converter = ConversionThread(self, file_list)
		self.converter.start()

	def on_close_project(self, event):  # wxGlade: Launcher.<event_handler>
		self.status("Event handler 'on_close_project' not implemented!")
		self.focus_thief.SetFocus()
		self.size_change(event)
		event.Skip()

	def on_open_sample(self, event):  # wxGlade: Launcher.<event_handler>
		self.status("Event handler 'on_open_sample' not implemented!")
		self.focus_thief.SetFocus()
		event.Skip()

	def on_view_peak_list(self, event):  # wxGlade: Launcher.<event_handler>
		self.status("Event handler 'on_view_peak_list' not implemented!")
		self.focus_thief.SetFocus()
		event.Skip()

	def on_previous_sample(self, event):  # wxGlade: Launcher.<event_handler>
		self.status("Event handler 'on_previous_sample' not implemented!")
		self.focus_thief.SetFocus()
		event.Skip()

	def on_next_sample(self, event):  # wxGlade: Launcher.<event_handler>
		self.status("Event handler 'on_next_sample' not implemented!")
		self.focus_thief.SetFocus()
		event.Skip()

	def on_chromatogram_reset_view(self, event):  # wxGlade: Launcher.<event_handler>
		self.chromatogram_canvas.toolbar.home()
		self.focus_thief.SetFocus()
		event.Skip()

	def on_chromatogram_previous_view(self, event):  # wxGlade: Launcher.<event_handler>
		self.chromatogram_canvas.toolbar.back()
		self.focus_thief.SetFocus()
		event.Skip()

	def on_chromatogram_zoom(self, event):  # wxGlade: Launcher.<event_handler>
		self.Pan_Btn.Enable()
		self.ViewSpectrum_Btn.Enable()
		self.chromatogram_canvas.toolbar.zoom()
		self.focus_thief.SetFocus()
		self.Zoom_Btn.Disable()		
		event.Skip()

	def on_chromatogram_pan(self, event):  # wxGlade: Launcher.<event_handler>
		self.Zoom_Btn.Enable()
		self.ViewSpectrum_Btn.Enable()
		self.chromatogram_canvas.toolbar.pan()
		self.focus_thief.SetFocus()
		self.Pan_Btn.Disable()
		event.Skip()

	def on_view_spectrum(self, event):  # wxGlade: Launcher.<event_handler>
		self.Pan_Btn.Enable()
		self.Zoom_Btn.Enable()
		self.status("Event handler 'on_view_spectrum' not implemented!")
		self.focus_thief.SetFocus()
		self.ViewSpectrum_Btn.Disable()
		event.Skip()

	# Other Toolbar Options
	# Save chromatogram as image: save_figure(self, *args)
	# set_cursor(self, cursor)
		#Set the current cursor to one of the :class:`Cursors` enums values.
 
		#If required by the backend, this method should trigger an update in
		#the backend event loop after the cursor is set, as this method may be
		#called e.g. before a long-running task during which the GUI is not
		#updated.
	#set_history_buttons(self)
		#Enable or disable the back/forward button.
	#forward(self, *args)
		#move forward in the view lim stack.


	def do_import_info(self, event):  # wxGlade: Launcher.<event_handler>
		self.status("Event handler 'do_import_info' not implemented!")
		event.Skip()
	def do_new_info(self, event):  # wxGlade: Launcher.<event_handler>
		self.status("Event handler 'do_new_info' not implemented!")
		event.Skip()
	def do_open_info(self, event):  # wxGlade: Launcher.<event_handler>
		self.status("Event handler 'do_open_info' not implemented!")
		event.Skip()
	def on_help_back(self, event):  # wxGlade: Launcher.<event_handler>
		self.help_browser.GoBack()
		self.help_focus_thief.SetFocus()
		event.Skip()
	def on_help_forward(self, event):  # wxGlade: Launcher.<event_handler>
		self.help_browser.GoForward()
		self.help_focus_thief.SetFocus()
		event.Skip()
	def on_help_home(self, event):  # wxGlade: Launcher.<event_handler>
		self.help_browser.LoadURL(self.help_home)
		self.help_focus_thief.SetFocus()
		event.Skip()
	def on_help_go(self, event):  # wxGlade: Launcher.<event_handler>
		print(self.help_url_text_ctrl.GetValue())
		url = self.help_url_text_ctrl.GetValue()
		if not url.startswith('http'):
			url = "http://"+url
		self.help_browser.LoadURL(url)
		self.help_focus_thief.SetFocus()
		#event.Skip()
	def on_help_readme(self, event):  # wxGlade: Launcher.<event_handler>
		self.help_browser.LoadURL("file://{}".format(os.path.join(os.getcwd(),"README.txt")))
		self.help_focus_thief.SetFocus()
		event.Skip()
	def on_help_github(self, event):  # wxGlade: Launcher.<event_handler>
		self.help_browser.LoadURL("http://github.com/domdfcoding/GunShotMatch")
		self.help_focus_thief.SetFocus()
		event.Skip()
	def on_help_browser(self, event):  # wxGlade: Launcher.<event_handler>
		webbrowser.open(self.help_url_text_ctrl.GetValue(),2)
		#print("Event handler 'on_help_browser' not implemented!")
		self.help_focus_thief.SetFocus()
		event.Skip()
		
	def help_update_url(self, event):
		self.help_url_text_ctrl.SetValue(event.GetURL())

	def rescan_files(self):  # wxGlade: Launcher.<event_handler>
		raw_dir = os.path.abspath(self.Config.get("main", "rawpath"))
		
		# List of files in RAW directory for Import
		self.raw_list = []
		for rawfile in os.listdir(raw_dir):
			if os.path.splitext(rawfile)[1].lower()==".raw":
				self.raw_list.append(rawfile)
		self.raw_list.sort()
		
		self.check_list_box_1.Clear()
		for item in self.raw_list:
			self.check_list_box_1.Append(item)
			
		# List of Samples for New Project
		self.jcamp_list = []
		for jcampfile in os.listdir(raw_dir):
			if os.path.splitext(jcampfile)[1].lower() == ".jdx":
				self.jcamp_list.append(jcampfile)
		self.jcamp_list.sort()
		
		self.check_list_box_2.Clear()
		for item in self.jcamp_list:
			self.check_list_box_2.Append(item)
	
	
	def do_apply(self, *args):  # wxGlade: Launcher.<event_handler>
		# Save the settings
		bb_points = str(self.bb_points_value.GetValue())
		bb_scans = str(self.bb_scans_value.GetValue())
		noise_thresh = str(self.noise_thresh_value.GetValue())
		target_range = (self.target_range_min_value.GetValue(), self.target_range_max_value.GetValue())
		base_peak_filter = self.base_peak_filter_value.GetValue()
		tophat = self.tophat_struct_value.GetValue()
		tophat_unit = ["m", "s", "ms"][self.tophat_struct_units.GetSelection()]
		rt_modulation = self.alignment_Dw_value.GetValue()
		gap_penalty = self.alignment_Gw_value.GetValue()
		min_peaks = self.alignment_min_peaks_value.GetValue()
		mass_range = self.mass_range_value.GetValue()
		
		self.Config.set("import", "bb_points", bb_points)
		self.Config.set("import", "bb_scans", bb_scans)
		self.Config.set("import", "noise_thresh", noise_thresh)
		self.Config.set("import", "target_range", "{},{}".format(*target_range))
		self.Config.set("import", "exclude_ions", base_peak_filter)
		self.Config.set("import", "tophat", tophat)
		self.Config.set("import", "tophat_unit", tophat_unit)
		self.Config.set("import", "mass_range", mass_range)
		
		self.Config.set("alignment", "rt_modulation", rt_modulation)
		self.Config.set("alignment", "gap_penalty", gap_penalty)
		self.Config.set("alignment", "min_peaks", min_peaks)
		
		self.Config.set("analysis", "do_quantitative",str(self.project_quantitative.GetValue()))
		self.Config.set("analysis", "do_qualitative",str(self.project_qualitative.GetValue()))
		self.Config.set("analysis", "do_merge",str(self.project_merge.GetValue()))
		self.Config.set("analysis", "do_counter",str(self.project_counter.GetValue()))
		self.Config.set("analysis", "do_spectra",str(self.project_spectra.GetValue()))
		self.Config.set("analysis", "do_charts",str(self.project_charts.GetValue()))
		
		
		
	def do_new_project(self, *args):  # wxGlade: Launcher.<event_handler>
		# Check if the thread is already running:
		if project_thread_running:
			wx.MessageBox("The project process is already running.\nPlease wait for it to finish.", "Please Wait",
						  wx.ICON_ERROR | wx.OK)
			return
			
		# Clear log
		self.project_log_text_control.Clear()
		self.do_apply()
		self.save_config()
		
		# Files to process
		sample_list = list(set(
			list(self.check_list_box_2.GetCheckedStrings()) + [self.check_list_box_2.GetString(item) for item in
															   self.check_list_box_2.GetSelections()]))
		sample_list.sort()
		
		if len(sample_list) < 2:
			wx.MessageBox("Please choose two or more samples!", "Error", wx.ICON_ERROR | wx.OK)
			#self.status("Please choose two or more samples!")
			return
		
		self.new_project_notebook.ChangeSelection(2)
		
		self.project_log_text_control.AppendText("Starting processing of:\n")
		self.project_log_text_control.AppendText(", ".join(sample_list))
		self.project_log_text_control.AppendText("\n\n")
		
		pretty_name = self.pretty_name_value.GetValue()
		if pretty_name == '':
			pretty_name = re.sub(r'\d+', '', str(os.path.splitext(sample_list[0])[0].rstrip("\n\r "))).replace("__", "_")
		else:
			self.pretty_name_list[pretty_name] = ''
			self.pretty_name_value.Clear()
			for name in self.pretty_name_list:
				self.pretty_name_value.Append(name)
			self.on_pretty_name_clear()
		print(pretty_name)
		
		# Clear Selections
		for index in self.check_list_box_2.GetSelections():
			self.check_list_box_2.Deselect(index)
		self.check_list_box_2.SetCheckedItems([0])
		self.check_list_box_2.Check(0, False)
		# self.check_list_box_2.Select(0)
		
		#return
		
		self.project = ProjectThread(self, sample_list, pretty_name)
		self.project.start()

	def on_project_log_save(self, event):  # wxGlade: Launcher.<event_handler>
		with wx.FileDialog(self, "Save log file", wildcard="log files (*.log)|*.log",
						   style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT) as fileDialog:
			
			if fileDialog.ShowModal() == wx.ID_CANCEL:
				return  # the user changed their mind
			
			# save the current contents in the file
			pathname = fileDialog.GetPath()
			if os.path.splitext(pathname)[-1] != ".log":
				pathname = pathname + ".log"
				
			try:
				with open(pathname, 'w') as file:
					file.write(self.project_log_text_control.GetValue())
			except IOError:
				wx.LogError("Cannot save current data in file '%s'." % pathname)
			
			event.Skip()
	def on_pretty_name_clear(self, *args):  # wxGlade: Launcher.<event_handler>
		self.pretty_name_value.SetValue('')
		self.pretty_name_value.SetFocus()
	def do_enqueue(self, event):  # wxGlade: Launcher.<event_handler>
		#self.do_apply()
		#self.save_config()
		
		# Files to process
		sample_list = list(set(
			list(self.check_list_box_2.GetCheckedStrings()) + [self.check_list_box_2.GetString(item) for item in
															   self.check_list_box_2.GetSelections()]))
		sample_list.sort()
		
		if len(sample_list) < 2:
			wx.MessageBox("Please choose two or more samples!", "Error", wx.ICON_ERROR | wx.OK)
			return
		
		pretty_name = self.pretty_name_value.GetValue()
		if pretty_name == '':
			pretty_name = re.sub(r'\d+', '', str(os.path.splitext(sample_list[0])[0].rstrip("\n\r "))).replace("__",
																											   "_")
		else:
			self.pretty_name_list[pretty_name] = ''
			self.pretty_name_value.Clear()
			for name in self.pretty_name_list:
				self.pretty_name_value.Append(name)
			self.on_pretty_name_clear()
		print(pretty_name)
		
		## Add sample_list to config file
		#self.Config.set("samples", "samples", ",".join(sample_list))
		
		#with open(f"configs/{pretty_name}.ini","w") as configfile:
		#	self.Config.write(configfile)
		
		# Clear Selections
		for index in self.check_list_box_2.GetSelections():
			self.check_list_box_2.Deselect(index)
		self.check_list_box_2.SetCheckedItems([0])
		self.check_list_box_2.Check(0, False)
		# self.check_list_box_2.Select(0)
		
		self.project_queue_grid.AppendRows()
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows()-1, 0,"Ready")
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows()-1, 1,",".join(sample_list))
		#self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 2, f"configs/{pretty_name}.ini")
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 2, pretty_name)
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 3, str(self.bb_points_value.GetValue()))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 4, str(self.bb_scans_value.GetValue()))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 5, str(self.noise_thresh_value.GetValue()))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 6, ",".join((self.target_range_min_value.GetValue(), self.target_range_max_value.GetValue())))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 7, self.base_peak_filter_value.GetValue())
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 8, self.tophat_struct_value.GetValue())
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 9, ["m", "s", "ms"][self.tophat_struct_units.GetSelection()])
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 10, self.mass_range_value.GetValue())
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 11, self.alignment_Dw_value.GetValue())
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 12, self.alignment_Gw_value.GetValue())
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 13, self.alignment_min_peaks_value.GetValue())
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 14, str(self.project_quantitative.GetValue()))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 15, str(self.project_qualitative.GetValue()))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 16, str(self.project_merge.GetValue()))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 17, str(self.project_counter.GetValue()))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 18, str(self.project_spectra.GetValue()))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 19, str(self.project_charts.GetValue()))
		
		
		
		
		event.Skip()
		
	def on_save_queue(self, event=None, pathname=None):  # wxGlade: Launcher.<event_handler>
		if not pathname:
			pathname = file_dialog(self, "csv", "Save Queue", "csv files")
	
		try:
			with open(pathname, 'w') as file:
				for row in range(self.project_queue_grid.GetNumberRows()):
					for column in range(self.project_queue_grid.GetNumberCols()):
						file.write(self.project_queue_grid.GetCellValue(row, column))
						file.write(";")
						
					file.write("\n")
		except IOError:
			wx.LogError("Cannot save current data in file '%s'." % pathname)


	def on_load_queue(self, event=None, pathname=None):  # wxGlade: Launcher.<event_handler>
		if not pathname:
			pathname = file_dialog(self, "csv", "Save Queue", "csv files", style=wx.FD_OPEN)
		
		try:
			with open(pathname, 'r') as file:
				queue_reader = csv.reader(file, delimiter=';')
				for row in queue_reader:
					self.project_queue_grid.AppendRows()
					for col_idx, cell in enumerate(row):
						if cell != '':
							self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows()-1, col_idx, cell)
				
				
		except IOError:
			wx.LogError("Cannot open the file '%s'." % pathname)
		
		

	

	def on_queue_clear(self, event):  # wxGlade: Launcher.<event_handler>
		self.project_queue_grid.DeleteRows(0,10)
		event.Skip()
		
	def on_queue_delete(self, event):  # wxGlade: Launcher.<event_handler>
		for row_idx in self.project_queue_grid.GetSelectedRows()[::-1]:
			self.project_queue_grid.DeleteRows(row_idx)
		
		event.Skip()
		
	def on_project_queue_run(self, event):  # wxGlade: Launcher.<event_handler>
		
		self.queue = QueueThread(self)
		self.queue.start()
		
		event.Skip()
	
	def on_open_project_picker_clear(self, *args):  # wxGlade: Launcher.<event_handler>
		self.open_project_picker.SetValue('')
		self.open_project_picker.Clear()
		for file in os.listdir(self.Config.get("main", "resultspath")):
			pretty_name, extension = os.path.splitext(file)
			if extension.lower() == ".info":
				self.open_project_picker.Append(pretty_name)
				
		self.open_project_picker.SetFocus()
	
	def on_open_project_picker_open(self, event):  # wxGlade: Launcher.<event_handler>
		print(self.open_project_picker.Value())
		event.Skip()
	def show_radar_chart(self, event):  # wxGlade: Launcher.<event_handler>
		self.ChartViewer = ChartViewer(self, chart_type="radar")
		self.ChartViewer.Show()
		event.Skip()
	def show_mean_peak_area_chart(self, event):  # wxGlade: Launcher.<event_handler>
		self.ChartViewer = ChartViewer(self, chart_type="mean_peak_area")
		self.ChartViewer.Show()
		event.Skip()
	def show_box_whisker_chart(self, event):  # wxGlade: Launcher.<event_handler>
		self.ChartViewer = ChartViewer(self, chart_type="box_whisker")
		self.ChartViewer.Show()
		event.Skip()
	def show_peak_area_chart(self, event):  # wxGlade: Launcher.<event_handler>
		self.ChartViewer = ChartViewer(self, chart_type="peak_area")
		self.ChartViewer.Show()
		event.Skip()
	def show_chromatogram(self, event):  # wxGlade: Launcher.<event_handler>
		self.notebook_1.SetSelection(4)
		event.Skip()
# end of class Launcher

def file_dialog(parent, extension, title, filetypestring, style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT):
	with wx.FileDialog(parent, title, wildcard=f"{filetypestring} (*.{extension})|*.{extension}",
					   style=style) as fileDialog:
		
		if fileDialog.ShowModal() == wx.ID_CANCEL:
			return  # the user changed their mind
		
		# save the current contents in the file
		pathname = fileDialog.GetPath()
		if os.path.splitext(pathname)[-1] != f".{extension}":
			pathname = pathname + f".{extension}"
		
		return pathname


class multi_choice_dialog(wx.Dialog):
	def __init__(self, *args, **kwds):
		choices.sort()
		self.choices = choices
		self.message = message
		self.caption = caption
		wx.Dialog.__init__(self, parent, -1, style = wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER)
		self.SetMinSize((358,460))
		self.multi_choice_panel_1 = wx.Panel(self, wx.ID_ANY)
		self.multi_choice_panel_2 = wx.Panel(self.multi_choice_panel_1, wx.ID_ANY)
		self.check_list_box_1 = wx.CheckListBox(self.multi_choice_panel_2, wx.ID_ANY, choices=[], style=wx.LB_HSCROLL | wx.LB_MULTIPLE | wx.LB_SORT)
		
		self.btns = self.CreateSeparatedButtonSizer(wx.OK | wx.CANCEL)
	
		self.__set_properties()
		self.__do_layout()
		self.check_list_box_1.Clear()
		for item in choices:
			self.check_list_box_1.Append(item)
		
		
		
		return # ignore the wxglade code below
		
		
		# begin wxGlade: multi_choice_dialog.__init__
		kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER
		wx.Dialog.__init__(self, *args, **kwds)
		self.SetMinSize((358,410))
		self.multi_choice_panel_1 = wx.Panel(self, wx.ID_ANY)
		self.multi_choice_panel_2 = wx.Panel(self.multi_choice_panel_1, wx.ID_ANY)
		self.check_list_box_1 = wx.CheckListBox(self.multi_choice_panel_2, wx.ID_ANY, choices=[], style=wx.LB_HSCROLL | wx.LB_MULTIPLE | wx.LB_SORT)

		self.__set_properties()
		self.__do_layout()
		# end wxGlade

	def __set_properties(self):
		# begin wxGlade: multi_choice_dialog.__set_properties
		self.SetTitle("multi_choice_dialog")
		_icon = wx.NullIcon
		_icon.CopyFromBitmap(wx.Bitmap("./lib/icons/GunShotMatch logo256.png", wx.BITMAP_TYPE_ANY))
		self.SetIcon(_icon)
		self.check_list_box_1.SetMinSize((256, 128))
		# end wxGlade
		self.SetTitle(self.caption)

	def __do_layout(self):
		# begin wxGlade: multi_choice_dialog.__do_layout
		multi_choice_sizer_1 = wx.BoxSizer(wx.VERTICAL)
		multi_choice_sizer_2 = wx.BoxSizer(wx.VERTICAL)
		multi_choice_sizer_3 = wx.BoxSizer(wx.VERTICAL)
		multi_choice_label = wx.StaticText(self.multi_choice_panel_2, wx.ID_ANY, "Make a selection")
		multi_choice_sizer_3.Add(multi_choice_label, 0, wx.BOTTOM, 18)
		multi_choice_sizer_3.Add(self.check_list_box_1, 1, wx.BOTTOM | wx.EXPAND, 7)
		self.multi_choice_panel_2.SetSizer(multi_choice_sizer_3)
		multi_choice_sizer_2.Add(self.multi_choice_panel_2, 1, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, 18)
		self.multi_choice_panel_1.SetSizer(multi_choice_sizer_2)
		multi_choice_sizer_1.Add(self.multi_choice_panel_1, 1, wx.BOTTOM | wx.EXPAND, 8)
		self.SetSizer(multi_choice_sizer_1)
		multi_choice_sizer_1.Fit(self)
		self.Layout()
		# end wxGlade
		multi_choice_sizer_2.Add(self.btns, 0, wx.ALL | wx.EXPAND,5)
		#multi_choice_sizer_2.Add(10,0,0)
		multi_choice_label.SetLabel(self.message)
		multi_choice_sizer_1.Fit(self)
		self.Layout()

	def GetSelections(self):
		selected = list(set(list(self.check_list_box_1.GetCheckedStrings()) + [self.check_list_box_1.GetString(item) for item in self.check_list_box_1.GetSelections()]))
		selected.sort()
		return selected


# end of class multi_choice_dialog


class AboutDialog(wx.Dialog):
	def __init__(self, *args, **kwds):
		# begin wxGlade: AboutDialog.__init__
		kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
		wx.Dialog.__init__(self, *args, **kwds)
		self.about_top_panel = wx.Panel(self, wx.ID_ANY)
		self.focus_thief = wx.Button(self.about_top_panel, wx.ID_ANY, "")
		self.about_tabs = wx.Notebook(self, wx.ID_ANY)
		self.about_info = wx.Panel(self.about_tabs, wx.ID_ANY)
		self.SetSize((530, 447))
		self.SetMinSize((530, 447))
		self.info_panel = wx.Panel(self.about_info, wx.ID_ANY)
		self.githib_button = wx.Button(self.info_panel, wx.ID_ANY, "github.com/domdfcoding/GunShotMatch", style=wx.BORDER_NONE)
		self.githib_button.Bind(wx.EVT_SET_FOCUS, self.take_focus)
		self.website_button = wx.Button(self.info_panel, wx.ID_ANY, "http://dominic.davis-foster.co.uk/GSR", style=wx.BORDER_NONE)
		self.about_tabs_pane_3 = wx.Panel(self.about_tabs, wx.ID_ANY)
		self.License = wx.Panel(self.about_tabs, wx.ID_ANY)
		self.license_browser = wx.html2.WebView.New(self.License, wx.ID_ANY)
		self.license_browser.LoadURL("file://{}".format(os.path.join(os.getcwd(),"LICENSE")))
		self.GPL_v3 = wx.Panel(self.about_tabs, wx.ID_ANY)
		self.gpl_v3_browser = wx.html2.WebView.New(self.GPL_v3, wx.ID_ANY)
		self.gpl_v3_browser.LoadURL("file://{}".format(os.path.join(os.getcwd(),"LICENSE_GPL3")))
		self.GPL_v2 = wx.Panel(self.about_tabs, wx.ID_ANY)
		self.gpl_v2_browser = wx.html2.WebView.New(self.GPL_v2, wx.ID_ANY)
		self.gpl_v2_browser.LoadURL("file://{}".format(os.path.join(os.getcwd(),"LICENSE_GPL2")))
		self.CC_BY_SA = wx.Panel(self.about_tabs, wx.ID_ANY)
		self.cc_by_sa_browser = wx.html2.WebView.New(self.CC_BY_SA, wx.ID_ANY)
		self.cc_by_sa_browser.LoadURL("file://{}".format(os.path.join(os.getcwd(),"LICENSE_CC_BY_SA")))
		self.MIT = wx.Panel(self.about_tabs, wx.ID_ANY)
		self.mit_browser = wx.html2.WebView.New(self.MIT, wx.ID_ANY)
		self.mit_browser.LoadURL("file://{}".format(os.path.join(os.getcwd(),"LICENSE_MIT")))

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_BUTTON, self.on_about_github, self.githib_button)
		self.Bind(wx.EVT_BUTTON, self.on_about_website, self.website_button)
		# end wxGlade
		size = (650, 447)
		self.SetMaxSize(size)
		self.SetMinSize(size)
		self.SetSize(size)

	def __set_properties(self):
		# begin wxGlade: AboutDialog.__set_properties
		self.SetTitle("About GunShotMatch")
		_icon = wx.NullIcon
		_icon.CopyFromBitmap(wx.Bitmap("./lib/icons/GunShotMatch logo256.png", wx.BITMAP_TYPE_ANY))
		self.SetIcon(_icon)
		self.focus_thief.SetMinSize((1, 1))
		# end wxGlade
		self.about_top_panel.SetMinSize((530, 52))
		self.about_top_panel.SetMaxSize((530, 52))
		self.about_top_panel.SetSize((530, 52))
		self.about_info.SetMinSize((500, 200))
		self.about_info.SetMaxSize((500, 200))
		self.about_info.SetSize((500, 200))
		#self.text_ctrl_2.SetBackgroundColour(self.panel_3.GetBackgroundColour())

	def __do_layout(self):
		# begin wxGlade: AboutDialog.__do_layout
		about_parent_sizer = wx.BoxSizer(wx.VERTICAL)
		mit_sizer = wx.BoxSizer(wx.HORIZONTAL)
		cc_by_sa_sizer = wx.BoxSizer(wx.HORIZONTAL)
		gpl_v2_sizer = wx.BoxSizer(wx.HORIZONTAL)
		gpl_v3_sizer = wx.BoxSizer(wx.HORIZONTAL)
		license_sizer = wx.BoxSizer(wx.HORIZONTAL)
		info_parent_sizer = wx.BoxSizer(wx.VERTICAL)
		info_sizer = wx.BoxSizer(wx.VERTICAL)
		about_top_sizer = wx.FlexGridSizer(1, 3, 0, 0)
		logo = wx.StaticBitmap(self.about_top_panel, wx.ID_ANY, wx.Bitmap("lib/icons/GunShotMatch logo48.png", wx.BITMAP_TYPE_ANY))
		about_top_sizer.Add(logo, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 5)
		program_name_label = wx.StaticText(self.about_top_panel, wx.ID_ANY, "GunShotMatch")
		program_name_label.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, "Ubuntu"))
		about_top_sizer.Add(program_name_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 10)
		about_top_sizer.Add(self.focus_thief, 0, 0, 0)
		self.about_top_panel.SetSizer(about_top_sizer)
		about_parent_sizer.Add(self.about_top_panel, 1, 0, 0)
		tagline_label = wx.StaticText(self.info_panel, wx.ID_ANY, "Organic GunShot Residue Analysis", style=wx.ALIGN_CENTER)
		tagline_label.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, "Ubuntu"))
		info_sizer.Add(tagline_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 15)
		version_label = wx.StaticText(self.info_panel, wx.ID_ANY, "Version <version string goes here>", style=wx.ALIGN_CENTER)
		info_sizer.Add(version_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 10)
		info_sizer.Add(self.githib_button, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.LEFT | wx.RIGHT | wx.TOP, 10)
		info_sizer.Add(self.website_button, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.BOTTOM | wx.LEFT | wx.RIGHT, 10)
		copyright_label = wx.StaticText(self.info_panel, wx.ID_ANY, "Copyright (c) 2017-2019\nDominic Davis-Foster\nAll rights reserved.", style=wx.ALIGN_CENTER)
		info_sizer.Add(copyright_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 20)
		self.info_panel.SetSizer(info_sizer)
		info_parent_sizer.Add(self.info_panel, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 5)
		self.about_info.SetSizer(info_parent_sizer)
		license_sizer.Add(self.license_browser, 1, wx.EXPAND, 0)
		self.License.SetSizer(license_sizer)
		gpl_v3_sizer.Add(self.gpl_v3_browser, 1, wx.EXPAND, 0)
		self.GPL_v3.SetSizer(gpl_v3_sizer)
		gpl_v2_sizer.Add(self.gpl_v2_browser, 1, wx.EXPAND, 0)
		self.GPL_v2.SetSizer(gpl_v2_sizer)
		cc_by_sa_sizer.Add(self.cc_by_sa_browser, 1, wx.EXPAND, 0)
		self.CC_BY_SA.SetSizer(cc_by_sa_sizer)
		mit_sizer.Add(self.mit_browser, 1, wx.EXPAND, 0)
		self.MIT.SetSizer(mit_sizer)
		self.about_tabs.AddPage(self.about_info, "Info")
		self.about_tabs.AddPage(self.about_tabs_pane_3, "Credits")
		self.about_tabs.AddPage(self.License, "Licence")
		self.about_tabs.AddPage(self.GPL_v3, "GPL v3")
		self.about_tabs.AddPage(self.GPL_v2, "GPL v2")
		self.about_tabs.AddPage(self.CC_BY_SA, "CC-BY-SA")
		self.about_tabs.AddPage(self.MIT, "MIT")
		about_parent_sizer.Add(self.about_tabs, 1, wx.ALL | wx.EXPAND, 3)
		self.SetSizer(about_parent_sizer)
		about_parent_sizer.Fit(self)
		self.Layout()
		# end wxGlade
		self.btns = self.CreateSeparatedButtonSizer(wx.CLOSE)
		about_parent_sizer.Add(self.btns, 0, wx.ALL | wx.EXPAND, 5)
		self.SetSizer(about_parent_sizer)
		about_parent_sizer.Fit(self)
		self.SetMaxSize((530, 447))
		self.SetMinSize((530, 447))
		self.SetSize((530, 447))

	def on_about_github(self, event):  # wxGlade: AboutDialog.<event_handler>
		webbrowser.open("http://github.com/domdfcoding/GunShotMatch",2)
		self.focus_thief.SetFocus()
		event.Skip()

	def on_about_website(self, event):  # wxGlade: AboutDialog.<event_handler>
		webbrowser.open("http://dominic.davis-foster.co.uk/GSR",2)
		self.focus_thief.SetFocus()
		event.Skip()
		
	def take_focus(self, event):
		self.focus_thief.SetFocus()
		event.Skip()

# end of class AboutDialog

class paths_dialog(wx.Dialog):
	def __init__(self, *args, **kwds):
		# begin wxGlade: paths_dialog.__init__
		kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER
		wx.Dialog.__init__(self, *args, **kwds)
		self.SetSize((849, 437))
		self.prefs_panel = wx.Panel(self, wx.ID_ANY)
		self.paths_panel = wx.Panel(self.prefs_panel, wx.ID_ANY)
		self.nistpath = wx.TextCtrl(self.paths_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.nistpath_clear = wx.BitmapButton(self.paths_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/go_back_16.png", wx.BITMAP_TYPE_ANY))
		self.nistpath_browse = wx.BitmapButton(self.paths_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/open_16.png", wx.BITMAP_TYPE_ANY))
		self.nistpath_help = wx.BitmapButton(self.paths_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/information_16.png", wx.BITMAP_TYPE_ANY))
		self.resultspath = wx.TextCtrl(self.paths_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.resultspath_clear = wx.BitmapButton(self.paths_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/go_back_16.png", wx.BITMAP_TYPE_ANY))
		self.resultspath_browse = wx.BitmapButton(self.paths_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/open_16.png", wx.BITMAP_TYPE_ANY))
		self.rawpath = wx.TextCtrl(self.paths_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.rawpath_clear = wx.BitmapButton(self.paths_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/go_back_16.png", wx.BITMAP_TYPE_ANY))
		self.rawpath_browse = wx.BitmapButton(self.paths_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/open_16.png", wx.BITMAP_TYPE_ANY))
		self.csvpath = wx.TextCtrl(self.paths_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.csvpath_clear = wx.BitmapButton(self.paths_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/go_back_16.png", wx.BITMAP_TYPE_ANY))
		self.csvpath_browse = wx.BitmapButton(self.paths_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/open_16.png", wx.BITMAP_TYPE_ANY))
		self.spectrapath = wx.TextCtrl(self.paths_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.spectrapath_clear = wx.BitmapButton(self.paths_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/go_back_16.png", wx.BITMAP_TYPE_ANY))
		self.spectrapath_browse = wx.BitmapButton(self.paths_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/open_16.png", wx.BITMAP_TYPE_ANY))
		self.msppath = wx.TextCtrl(self.paths_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.msppath_clear = wx.BitmapButton(self.paths_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/go_back_16.png", wx.BITMAP_TYPE_ANY))
		self.msppath_browse = wx.BitmapButton(self.paths_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/open_16.png", wx.BITMAP_TYPE_ANY))
		self.expr_path = wx.TextCtrl(self.paths_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.expr_clear = wx.BitmapButton(self.paths_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/go_back_16.png", wx.BITMAP_TYPE_ANY))
		self.expr_browse = wx.BitmapButton(self.paths_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/open_16.png", wx.BITMAP_TYPE_ANY))
		self.charts_path = wx.TextCtrl(self.paths_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.charts_clear = wx.BitmapButton(self.paths_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/go_back_16.png", wx.BITMAP_TYPE_ANY))
		self.charts_browse = wx.BitmapButton(self.paths_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/open_16.png", wx.BITMAP_TYPE_ANY))
		self.reset_button_panel = wx.Panel(self.prefs_panel, wx.ID_ANY)
		self.paths_reset = wx.Button(self.reset_button_panel, wx.ID_ANY, "Reset")

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_BUTTON, self.on_nistpath_clear, self.nistpath_clear)
		self.Bind(wx.EVT_BUTTON, self.on_nistpath_browse, self.nistpath_browse)
		self.Bind(wx.EVT_BUTTON, self.on_nistpath_help, self.nistpath_help)
		self.Bind(wx.EVT_BUTTON, self.on_resultspath_clear, self.resultspath_clear)
		self.Bind(wx.EVT_BUTTON, self.on_resultspath_browse, self.resultspath_browse)
		self.Bind(wx.EVT_BUTTON, self.on_rawpath_clear, self.rawpath_clear)
		self.Bind(wx.EVT_BUTTON, self.on_rawpath_browse, self.rawpath_browse)
		self.Bind(wx.EVT_BUTTON, self.on_csvpath_clear, self.csvpath_clear)
		self.Bind(wx.EVT_BUTTON, self.on_csvpath_browse, self.csvpath_browse)
		self.Bind(wx.EVT_BUTTON, self.on_spectrapath_clear, self.spectrapath_clear)
		self.Bind(wx.EVT_BUTTON, self.on_spectrapath_browse, self.spectrapath_browse)
		self.Bind(wx.EVT_BUTTON, self.on_msppath_clear, self.msppath_clear)
		self.Bind(wx.EVT_BUTTON, self.on_msppath_browse, self.msppath_browse)
		self.Bind(wx.EVT_BUTTON, self.on_expr_path_clear, self.expr_clear)
		self.Bind(wx.EVT_BUTTON, self.on_expr_path_browse, self.expr_browse)
		self.Bind(wx.EVT_BUTTON, self.on_charts_path_clear, self.charts_clear)
		self.Bind(wx.EVT_BUTTON, self.on_charts_path_browse, self.charts_browse)
		self.Bind(wx.EVT_BUTTON, self.do_path_reset, self.paths_reset)
		# end wxGlade

		# Read the configuration from the file
		self.do_path_reset(0)

	def __set_properties(self):
		# begin wxGlade: paths_dialog.__set_properties
		self.SetTitle("Configure Paths")
		_icon = wx.NullIcon
		_icon.CopyFromBitmap(wx.Bitmap("./lib/icons/GunShotMatch logo256.png", wx.BITMAP_TYPE_ANY))
		self.SetIcon(_icon)
		self.SetSize((849, 437))
		self.nistpath.SetMinSize((512, 29))
		self.nistpath_clear.SetMinSize((29, 29))
		self.nistpath_browse.SetMinSize((29, 29))
		self.nistpath_help.SetMinSize((29, 29))
		self.resultspath.SetMinSize((512, 29))
		self.resultspath_clear.SetMinSize((29, 29))
		self.resultspath_browse.SetMinSize((29, 29))
		self.rawpath.SetMinSize((512, 29))
		self.rawpath_clear.SetMinSize((29, 29))
		self.rawpath_browse.SetMinSize((29, 29))
		self.csvpath.SetMinSize((512, 29))
		self.csvpath_clear.SetMinSize((29, 29))
		self.csvpath_browse.SetMinSize((29, 29))
		self.spectrapath.SetMinSize((512, 29))
		self.spectrapath_clear.SetMinSize((29, 29))
		self.spectrapath_browse.SetMinSize((29, 29))
		self.msppath.SetMinSize((512, 29))
		self.msppath_clear.SetMinSize((29, 29))
		self.msppath_browse.SetMinSize((29, 29))
		self.expr_path.SetMinSize((512, 29))
		self.expr_clear.SetMinSize((29, 29))
		self.expr_browse.SetMinSize((29, 29))
		self.charts_path.SetMinSize((512, 29))
		self.charts_clear.SetMinSize((29, 29))
		self.charts_browse.SetMinSize((29, 29))
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: paths_dialog.__do_layout
		prefs_parent_sizer = wx.BoxSizer(wx.VERTICAL)
		paths_parent_sizer = wx.BoxSizer(wx.VERTICAL)
		sizer_1 = wx.BoxSizer(wx.VERTICAL)
		paths_sizer = wx.FlexGridSizer(8, 5, 0, 0)
		nistpath_label = wx.StaticText(self.paths_panel, wx.ID_ANY, "NIST MS Search: ")
		paths_sizer.Add(nistpath_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.nistpath, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.nistpath_clear, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.nistpath_browse, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.nistpath_help, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		resultspath_label = wx.StaticText(self.paths_panel, wx.ID_ANY, "Results: ")
		paths_sizer.Add(resultspath_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.resultspath, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.resultspath_clear, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.resultspath_browse, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add((0, 0), 0, 0, 0)
		rawpath_label = wx.StaticText(self.paths_panel, wx.ID_ANY, ".RAW Files: ")
		paths_sizer.Add(rawpath_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.rawpath, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.rawpath_clear, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.rawpath_browse, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add((0, 0), 0, 0, 0)
		csvpath_label = wx.StaticText(self.paths_panel, wx.ID_ANY, "CSV Reports: ")
		paths_sizer.Add(csvpath_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.csvpath, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.csvpath_clear, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.csvpath_browse, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add((0, 0), 0, 0, 0)
		spectrapath_label = wx.StaticText(self.paths_panel, wx.ID_ANY, "Spectra Images: ")
		paths_sizer.Add(spectrapath_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.spectrapath, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.spectrapath_clear, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.spectrapath_browse, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add((0, 0), 0, 0, 0)
		msppath_label = wx.StaticText(self.paths_panel, wx.ID_ANY, "MSP Spectra: ")
		paths_sizer.Add(msppath_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.msppath, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.msppath_clear, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.msppath_browse, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add((0, 0), 0, 0, 0)
		expr_label = wx.StaticText(self.paths_panel, wx.ID_ANY, "Experiment Files:")
		paths_sizer.Add(expr_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.expr_path, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.expr_clear, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.expr_browse, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add((0, 0), 0, 0, 0)
		charts_label = wx.StaticText(self.paths_panel, wx.ID_ANY, "Charts: ")
		paths_sizer.Add(charts_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.charts_path, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.charts_clear, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add(self.charts_browse, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		paths_sizer.Add((0, 0), 0, 0, 0)
		self.paths_panel.SetSizer(paths_sizer)
		paths_parent_sizer.Add(self.paths_panel, 5, wx.ALL | wx.EXPAND, 5)
		sizer_1.Add(self.paths_reset, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RIGHT, 9)
		self.reset_button_panel.SetSizer(sizer_1)
		paths_parent_sizer.Add(self.reset_button_panel, 1, wx.EXPAND, 0)
		self.prefs_panel.SetSizer(paths_parent_sizer)
		prefs_parent_sizer.Add(self.prefs_panel, 1, wx.ALL | wx.EXPAND, 10)
		self.SetSizer(prefs_parent_sizer)
		self.Layout()
		# end wxGlade

		self.btns = self.CreateSeparatedButtonSizer(wx.OK | wx.CANCEL)
		prefs_parent_sizer.Add(self.btns, 0, wx.ALL | wx.EXPAND, 5)
		self.SetMinSize((755,400))
		self.SetSize((755,400))

	def on_nistpath_clear(self, event):  # wxGlade: paths_dialog.<event_handler>
		self.nistpath.Clear()
		self.nistpath.SetFocus()
		event.Skip()

	def on_nistpath_browse(self, event):  # wxGlade: paths_dialog.<event_handler>
		nistpath_dlg = wx.DirDialog(None, "Choose a directory:",style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON)
		if nistpath_dlg.ShowModal() == wx.ID_OK:
			self.nistpath.SetValue((nistpath_dlg.GetPath()))
		nistpath_dlg.Destroy()
		self.nistpath.SetFocus()
		event.Skip()

	def on_nistpath_help(self, event):  # wxGlade: paths_dialog.<event_handler>
		webbrowser.open("https://chemdata.nist.gov/mass-spc/ms-search/",2)
		self.nistpath.SetFocus()
		event.Skip()

	def on_resultspath_clear(self, event):  # wxGlade: paths_dialog.<event_handler>
		self.resultspath.Clear()
		self.resultspath.SetFocus()
		event.Skip()

	def on_resultspath_browse(self, event):  # wxGlade: paths_dialog.<event_handler>
		resultspath_dlg = wx.DirDialog(None, "Choose a directory:",style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON)
		if resultspath_dlg.ShowModal() == wx.ID_OK:
			self.resultspath.SetValue((resultspath_dlg.GetPath()))
		resultspath_dlg.Destroy()
		self.resultspath.SetFocus()
		event.Skip()

	def on_rawpath_clear(self, event):  # wxGlade: paths_dialog.<event_handler>
		self.rawpath.Clear()
		self.rawpath.SetFocus()
		event.Skip()

	def on_rawpath_browse(self, event):  # wxGlade: paths_dialog.<event_handler>
		rawpath_dlg = wx.DirDialog(None, "Choose a directory:",style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON, defaultPath=self.resultspath.GetValue())
		if rawpath_dlg.ShowModal() == wx.ID_OK:
			self.rawpath.SetValue((rawpath_dlg.GetPath()))
		rawpath_dlg.Destroy()
		self.rawpath.SetFocus()
		event.Skip()

	def on_csvpath_clear(self, event):  # wxGlade: paths_dialog.<event_handler>
		self.csvpath.Clear()
		self.csvpath.SetFocus()
		event.Skip()

	def on_csvpath_browse(self, event):  # wxGlade: paths_dialog.<event_handler>
		csvpath_dlg = wx.DirDialog(None, "Choose a directory:",style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON, defaultPath=self.resultspath.GetValue())
		if csvpath_dlg.ShowModal() == wx.ID_OK:
			self.csvpath.SetValue((csvpath_dlg.GetPath()))
		csvpath_dlg.Destroy()
		self.csvpath.SetFocus()
		event.Skip()

	def on_spectrapath_clear(self, event):  # wxGlade: paths_dialog.<event_handler>
		self.spectrapath.Clear()
		self.spectrapath.SetFocus()
		event.Skip()

	def on_spectrapath_browse(self, event):  # wxGlade: paths_dialog.<event_handler>
		spectrapath_dlg = wx.DirDialog(None, "Choose a directory:",style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON, defaultPath=self.resultspath.GetValue())
		if spectrapath_dlg.ShowModal() == wx.ID_OK:
			self.spectrapath.SetValue((spectrapath_dlg.GetPath()))
		spectrapath_dlg.Destroy()
		self.spectrapath.SetFocus()
		event.Skip()

	def on_msppath_clear(self, event):  # wxGlade: paths_dialog.<event_handler>
		self.msppath.Clear()
		self.msppath.SetFocus()
		event.Skip()

	def on_msppath_browse(self, event):  # wxGlade: paths_dialog.<event_handler>
		msppath_dlg = wx.DirDialog(None, "Choose a directory:",style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON, defaultPath=self.resultspath.GetValue())
		if msppath_dlg.ShowModal() == wx.ID_OK:
			self.msppath.SetValue((msppath_dlg.GetPath()))
		msppath_dlg.Destroy()
		self.msppath.SetFocus()
		event.Skip()
		
	
	def do_path_reset(self, event):  # wxGlade: paths_dialog.<event_handler>
		# Read the configuration from the file
		Config = ConfigParser.ConfigParser()
		Config.read("config.ini")
		if sys.platform == "win32":
			self.nistpath.SetValue(relpath(Config.get("main", "nistpath")))
		else:
			self.nistpath.SetValue(relpath(Config.get("main", "linuxnistpath")))
		self.resultspath.SetValue(relpath(Config.get("main", "resultspath")))
		self.rawpath.SetValue(relpath(Config.get("main", "rawpath")))
		self.csvpath.SetValue(relpath(Config.get("main", "csvpath")))
		self.spectrapath.SetValue(relpath(Config.get("main", "spectrapath")))
		self.msppath.SetValue(relpath(Config.get("main","msppath")))
		self.charts_path.SetValue(relpath(Config.get("main", "chartspath")))
		self.expr_path.SetValue(relpath(Config.get("main", "exprdir")))

	def on_expr_path_clear(self, event):  # wxGlade: paths_dialog.<event_handler>
		self.expr_path.Clear()
		self.expr_path.SetFocus()
		event.Skip()
	def on_expr_path_browse(self, event):  # wxGlade: paths_dialog.<event_handler>
		expr_path_dlg = wx.DirDialog(None, "Choose a directory:",style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON, defaultPath=self.resultspath.GetValue())
		if expr_path_dlg.ShowModal() == wx.ID_OK:
			self.expr_path.SetValue((expr_path_dlg.GetPath()))
		expr_path_dlg.Destroy()
		self.expr_path.SetFocus()
		event.Skip()
	def on_charts_path_clear(self, event):  # wxGlade: paths_dialog.<event_handler>
		self.charts_path.Clear()
		self.charts_path.SetFocus()
		event.Skip()
	def on_charts_path_browse(self, event):  # wxGlade: paths_dialog.<event_handler>
		chartspath_dlg = wx.DirDialog(None, "Choose a directory:", style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON,
									  defaultPath=self.resultspath.GetValue())
		if chartspath_dlg.ShowModal() == wx.ID_OK:
			self.charts_path.SetValue((chartspath_dlg.GetPath()))
		chartspath_dlg.Destroy()
		self.charts_path.SetFocus()
		event.Skip()
		
# end of class paths_dialog

# Statusbar and Importer Code
# Based on https://wiki.wxpython.org/Non-Blocking%20Gui
myEVT_STATUS = wx.NewEventType()
EVT_STATUS = wx.PyEventBinder(myEVT_STATUS, 1)
myEVT_QUEUE = wx.NewEventType()
EVT_QUEUE = wx.PyEventBinder(myEVT_QUEUE, 1)
myEVT_CONVERSION = wx.NewEventType()
myEVT_CONVERSION_LOG = wx.NewEventType()
EVT_CONVERSION = wx.PyEventBinder(myEVT_CONVERSION, 1)
EVT_CONVERSION_LOG = wx.PyEventBinder(myEVT_CONVERSION_LOG, 1)
myEVT_PROJECT = wx.NewEventType()
myEVT_PROJECT_LOG = wx.NewEventType()
EVT_PROJECT = wx.PyEventBinder(myEVT_PROJECT, 1)
EVT_PROJECT_LOG = wx.PyEventBinder(myEVT_PROJECT_LOG, 1)

class StatusEvent(wx.PyCommandEvent):
	"""Event to signal that a new status is ready to be displayed"""
	def __init__(self, etype, eid, value=None):
		"""Creates the event object"""
		wx.PyCommandEvent.__init__(self, etype, eid)
		self._value = value

	def GetValue(self):
		"""Returns the value from the event.
		@return: the value of this event

		"""
		return self._value

kill_status_thread = False

class StatusThread(threading.Thread):
	# Includes code from https://gist.github.com/samarthbhargav/5a515a399f7113137331
	def __init__(self, parent, value):
		"""
		@param parent: The gui object that should recieve the value
		@param value: value to 'calculate' to
		"""
		self._stopevent = threading.Event( )
		threading.Thread.__init__(self, name="StatusThread")
		self._parent = parent
		self._value = value

	def run(self):
		"""Overrides Thread.run. Don't call this directly its called internally
		when you call Thread.start().
		"""
		wait_time = 1.0
		while not self._stopevent.isSet( ):
			time.sleep(0.1) # our simulated calculation time
			wait_time -= 0.1
			if wait_time < 0.0:
				evt = StatusEvent(myEVT_STATUS, -1, self._value)
				wx.PostEvent(self._parent, evt)
				wait_time = 1.0
			
	
	def join(self, timeout=None):
		""" Stop the thread and wait for it to end. """
		self._stopevent.set( )
		threading.Thread.join(self, timeout)		
		
		
	"""	global kill_status_thread
		try:
			while True:
				print(kill_status_thread)
				if kill_status_thread:
					break
				time.sleep(1) # our simulated calculation time
				evt = StatusEvent(myEVT_STATUS, -1, self._value)
				wx.PostEvent(self._parent, evt)
			print("Status Thread Exiting")
		except RuntimeError: 
			print("StatusThread Exiting")
			return
			# a runtime error was being raised when the main window closed"""
			


conversion_thread_running = False
project_thread_running = False
queue_thread_running = False


		
class ConversionThread(threading.Thread):
	def __init__(self, parent, file_list):
		"""
		@param parent: The gui object that should recieve the value
		@param value: value to 'calculate' to
		"""
		threading.Thread.__init__(self)
		self._parent = parent
		self.file_list = file_list
		

	def run(self):
		"""Overrides Thread.run. Don't call this directly its called internally
		when you call Thread.start().
		"""
		try:
			global conversion_thread_running
			conversion_thread_running = True
			
			for raw_file in self.file_list:
				process = subprocess.Popen(["wine",
											"./lib/WatersRaw.exe",
											"-i",
											os.path.join(self._parent.Config.get("main", "rawpath"),
											raw_file)
											], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
				
				for line in iter(process.stdout.readline, b''):
						if not re.match(r'^\s*$', line.decode("utf-8")):# line is empty (has only the following: \t\n\r and whitespace)print(line.decode("utf-8"))
							evt = ConversionLogEvent(myEVT_CONVERSION_LOG, -1,log_text = line.decode("utf-8"))
							wx.PostEvent(self._parent, evt)
							
			# Conversion is now done
			evt = ConversionLogEvent(myEVT_CONVERSION_LOG, -1,log_text = "Conversion Finished\n")
			wx.PostEvent(self._parent, evt)	
			
			# Send desktop notification
		#	notification.notification(header = "GunShotMatch", 
		#			body = 'Conversion finished\n'+", ".join(self.file_list),
		#			icon = "./lib/GunShotMatch.ico", duration = 5, threaded = True)

			NotificationMessage("GunShotMatch",
					message='Import finished\n'+", ".join(self.file_list),
					parent=None, flags=wx.ICON_INFORMATION).Show()

			conversion_thread_running = False
			evt = ConversionEvent(myEVT_CONVERSION, -1)
			wx.PostEvent(self._parent, evt)
		except: 
			traceback.print_exc()
			conversion_thread_running = False
			# a runtime error was being raised when the main window closed




class ProjectThread(threading.Thread):
	def __init__(self, parent, file_list, pretty_name):
		"""
		@param parent: The gui object that should recieve the value
		@param value: value to 'calculate' to
		"""
		threading.Thread.__init__(self)
		self._parent = parent
		self.file_list = file_list
		self.pretty_name = pretty_name
		

	def run(self):
		"""Overrides Thread.run. Don't call this directly its called internally
		when you call Thread.start().
		"""
		try:
			global project_thread_running
			project_thread_running = True
			
			prefixList = []
			for jcamp_file in self.file_list:
				prefixList.append(os.path.splitext(jcamp_file)[0])
			
			args = ["python3", "-u", "./GSMatch_Rework.py", "--samples"] + prefixList + ["--name", self.pretty_name]
			
			process = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
			
			for line in iter(process.stdout.readline, b''):
				if not re.match(r'^\s*$', line.decode("utf-8")):# line is empty (has only the following: \t\n\r and whitespace)print(line.decode("utf-8"))
					if line != b'\r\x1b[K\n':
						#self._parent.project_log_text_control.AppendText(line.decode("utf-8"))
						project_log(self._parent,line.decode("utf-8"))
			for line in iter(process.stderr.readline, b''):
				if not re.match(r'^\s*$', line.decode("utf-8")):# line is empty (has only the following: \t\n\r and whitespace)print(line.decode("utf-8"))
					if line != b'\r\x1b[K\n':
						#self._parent.project_log_text_control.AppendText(line.decode("utf-8"))
						project_log(self._parent, line.decode("utf-8"))
			
			# From https://stackoverflow.com/q/36596354/3092681
			while process.poll() is None:
				# Process hasn't exited yet, let's wait some
				time.sleep(0.5)
			returncode = process.returncode
			
			if returncode == 0:
				# Conversion is now done
				project_log(self._parent,"New Project Created\n")
				
				NotificationMessage("GunShotMatch",
						message='New Project Created\n'+", ".join(self.file_list),
						parent=None, flags=wx.ICON_INFORMATION).Show()
			else:
				# Conversion somehow failed
				project_log(self._parent,"An Error Occurred: Check the details above for details.\n")
				project_log(self._parent,"Exit Code : {}\n".format(returncode))
				
				NotificationMessage("GunShotMatch",
									message='An Error Occurred in "New Project"\nCheck the log for details',
									parent=None, flags=wx.ICON_ERROR).Show()
			
			
			project_thread_running = False
			evt = ProjectEvent(myEVT_PROJECT, -1)
			wx.PostEvent(self._parent, evt)
		except:
			traceback.print_exc()
			conversion_thread_running = False
			# a runtime error was being raised when the main window closed

def project_log(instance, log_text):
	evt = ProjectLogEvent(myEVT_PROJECT_LOG, -1, log_text=log_text)
	wx.PostEvent(instance, evt)

class QueueThread(threading.Thread):
	def __init__(self, parent):
		"""
		@param parent: The gui object
		"""
		threading.Thread.__init__(self)
		self.parent = parent
	
	def run(self):
		"""Overrides Thread.run. Don't call this directly its called internally
		when you call Thread.start().
		"""
		try:
			global queue_thread_running
			queue_thread_running = True
			
			while project_thread_running:
				time.sleep(1)

			self.parent.project_log_text_control.Clear()
			self.parent.new_project_notebook.ChangeSelection(2)
			
			if self.parent.project_queue_grid.GetSelectedRows():
				queue_selection = self.parent.project_queue_grid.GetSelectedRows()
			else:
				queue_selection = list(range(self.parent.project_queue_grid.GetNumberRows()))
			
			for queue_entry in queue_selection:
				
				self.parent.project_queue_grid.SetCellValue(queue_entry, 0, "Waiting")
				self.parent.Config.set("import", "bb_points", self.parent.project_queue_grid.GetCellValue(queue_entry, 3))
				self.parent.Config.set("import", "bb_scans", self.parent.project_queue_grid.GetCellValue(queue_entry, 4))
				self.parent.Config.set("import", "noise_thresh", self.parent.project_queue_grid.GetCellValue(queue_entry, 5))
				self.parent.Config.set("import", "target_range", self.parent.project_queue_grid.GetCellValue(queue_entry, 6))
				self.parent.Config.set("import", "exclude_ions", self.parent.project_queue_grid.GetCellValue(queue_entry, 7))
				self.parent.Config.set("import", "tophat", self.parent.project_queue_grid.GetCellValue(queue_entry, 8))
				self.parent.Config.set("import", "tophat_unit", self.parent.project_queue_grid.GetCellValue(queue_entry, 9))
				self.parent.Config.set("import", "mass_range", self.parent.project_queue_grid.GetCellValue(queue_entry, 10))
				
				self.parent.Config.set("alignment", "rt_modulation", self.parent.project_queue_grid.GetCellValue(queue_entry, 11))
				self.parent.Config.set("alignment", "gap_penalty", self.parent.project_queue_grid.GetCellValue(queue_entry, 12))
				self.parent.Config.set("alignment", "min_peaks", self.parent.project_queue_grid.GetCellValue(queue_entry, 13))
				
				self.parent.Config.set("analysis", "do_quantitative", self.parent.project_queue_grid.GetCellValue(queue_entry, 14))
				self.parent.Config.set("analysis", "do_qualitative", self.parent.project_queue_grid.GetCellValue(queue_entry, 15))
				self.parent.Config.set("analysis", "do_merge", self.parent.project_queue_grid.GetCellValue(queue_entry, 16))
				self.parent.Config.set("analysis", "do_counter", self.parent.project_queue_grid.GetCellValue(queue_entry, 17))
				self.parent.Config.set("analysis", "do_spectra", self.parent.project_queue_grid.GetCellValue(queue_entry, 18))
				self.parent.Config.set("analysis", "do_charts", self.parent.project_queue_grid.GetCellValue(queue_entry, 19))

			
				# Check if the thread is already running:
				while project_thread_running:
					time.sleep(1)
				
				print("")
				# Clear log
				#self.parent.project_log_text_control.Clear()
				self.parent.save_config()
				
				# Files to process
				sample_list = self.parent.project_queue_grid.GetCellValue(queue_entry, 1).split(",")
				
				print("")
				project_log(self.parent, "Starting processing of:\n")
				project_log(self.parent, ", ".join(sample_list))
				project_log(self.parent, "\n\n")
				
			#	self.parent.project_log_text_control.AppendText("Starting processing of:\n")
			#	self.parent.project_log_text_control.AppendText(", ".join(sample_list))
			#	self.parent.project_log_text_control.AppendText("\n\n")
				
				pretty_name = self.parent.project_queue_grid.GetCellValue(queue_entry, 2)
				print(pretty_name)
				
				self.parent.project = ProjectThread(self.parent, sample_list, pretty_name)
				self.parent.project.start()
				self.parent.project_queue_grid.SetCellValue(queue_entry, 0, "Running")
				while project_thread_running:
					time.sleep(1)
				self.parent.project_queue_grid.SetCellValue(queue_entry, 0, "Done")
				print(f"{queue_entry} Done")
			
				time.sleep(5)

				#project_thread_running = False
				#evt = QueueEvent(myEVT_QUEUE, -1)
				#wx.PostEvent(self.parent, evt)
			print("Queue Done")
		except:
			traceback.print_exc()
			conversion_thread_running = False
	# a runtime error was being raised when the main window closed

			

# Constrain pan to x-axis
# From https://stackoverflow.com/questions/16705452/matplotlib-forcing-pan-zoom-to-constrain-to-x-axes
class My_Axes(matplotlib.axes.Axes):
	name = "My_Axes"
	def drag_pan(self, button, key, x, y):
		matplotlib.axes.Axes.drag_pan(self, button, 'x', x, y) # pretend key=='x'



class GSM_App(wx.App):
	def OnInit(self):
		self.frame = Launcher(None, wx.ID_ANY, "")
		self.SetTopWindow(self.frame)
		self.frame.Show()
		return True

# end of class GSM_App

if __name__ == "__main__":
	if sys.platform == "win32":
		import ctypes
		myappid = "GunShotMatchGUI"
		ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(myappid)
		
	GunShotMatch = GSM_App(0)
	GunShotMatch.MainLoop()

print("Goodbye :)")

sys.exit(0)

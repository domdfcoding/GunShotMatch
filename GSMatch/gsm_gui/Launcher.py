# -*- coding: UTF-8 -*-
#
#  Copyright (c) 2017-2019 Dominic Davis-Foster <dominic@davis-foster.co.uk>
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
# generated by wxGlade 0.9.3 on Tue Apr  9 13:47:34 2019
#


import re
import os
import wx
import sys
import csv
import json
import types
import numpy
#import pandas
import jinja2
import traceback
import webbrowser
import configparser as ConfigParser
import requests



from utils.paths import maybe_make, relpath
#from utils.progbar import ProgressStatusBar
from utils.ChromatogramDisplay import Display
from utils.wxTools import file_dialog
from utils.mathematical import df_count, rounders
from utils.helper import str2tuple, list2str
from utils.wxTools import coming_soon
import utils.pubchempy as pcp

import wx.html2
import wx.richtext
from wx import grid

from pyms.Peak.IO import load_peaks
from pyms.GCMS.Class import IonChromatogram

import matplotlib
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.backends.backend_wxagg import NavigationToolbar2WxAgg as NavigationToolbar

from gsm_core import pretty_name_from_info

from gsm_gui import border_config, ChartViewer, AboutDialog, paths_dialog, list_dialog
from gsm_gui.threads import StatusThread, EVT_STATUS, EVT_CONVERSION, EVT_CONVERSION_LOG, EVT_PROJECT, \
	EVT_PROJECT_LOG, EVT_COMPARISON, EVT_COMPARISON_LOG, ConversionThread, ProjectThread, QueueThread, \
	ComparisonThread, conversion_thread_running, project_thread_running, comparison_thread_running, \
	Flask_Thread, EVT_DATA_VIEWER

# begin wxGlade: dependencies
import wx.grid
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

#template_settings = {"css":os.path.join(os.getcwd(),"lib","bootstrap.min.css")}

# Constrain pan to x-axis
# From https://stackoverflow.com/questions/16705452/matplotlib-forcing-pan-zoom-to-constrain-to-x-axes
class My_Axes(matplotlib.axes.Axes):
	name = "My_Axes"
	def drag_pan(self, button, key, x, y):
		matplotlib.axes.Axes.drag_pan(self, button, 'x', x, y) # pretend key=='x'


class Launcher(wx.Frame):
	def __init__(self, *args, **kwds):
		# begin wxGlade: Launcher.__init__
		kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
		wx.Frame.__init__(self, *args, **kwds)
		
		# Menu Bar
		self.frame_menubar = wx.MenuBar()
		wxglade_tmp_menu = wx.Menu()
		self.frame_menubar.i_paths = wxglade_tmp_menu.Append(wx.ID_ANY, "Configure Paths", "")
		self.Bind(wx.EVT_MENU, self.on_menu_paths, id=self.frame_menubar.i_paths.GetId())
		self.frame_menubar.i_rescan = wxglade_tmp_menu.Append(wx.ID_ANY, "Rescan Files", "")
		self.Bind(wx.EVT_MENU, self.rescan_files, id=self.frame_menubar.i_rescan.GetId())
		wxglade_tmp_menu.AppendSeparator()
		self.frame_menubar.i_about = wxglade_tmp_menu.Append(wx.ID_ANY, "About", "")
		self.Bind(wx.EVT_MENU, self.on_menu_About, id=self.frame_menubar.i_about.GetId())
		wxglade_tmp_menu.AppendSeparator()
		self.frame_menubar.i_exit = wxglade_tmp_menu.Append(wx.ID_ANY, "Exit", "")
		self.Bind(wx.EVT_MENU, self.on_menu_Exit, id=self.frame_menubar.i_exit.GetId())
		self.frame_menubar.Append(wxglade_tmp_menu, "Menu")
		wxglade_tmp_menu = wx.Menu()
		self.frame_menubar.i_menu_radar = wxglade_tmp_menu.Append(wx.ID_ANY, "Radar Chart", "")
		self.Bind(wx.EVT_MENU, self.on_menu_radar, id=self.frame_menubar.i_menu_radar.GetId())
		self.frame_menubar.i_menu_mean_pa = wxglade_tmp_menu.Append(wx.ID_ANY, "Mean Peak Area", "")
		self.Bind(wx.EVT_MENU, self.on_menu_mean_pa, id=self.frame_menubar.i_menu_mean_pa.GetId())
		self.frame_menubar.i_menu_pa = wxglade_tmp_menu.Append(wx.ID_ANY, "Peak Area", "")
		self.Bind(wx.EVT_MENU, self.on_menu_pa, id=self.frame_menubar.i_menu_pa.GetId())
		self.frame_menubar.i_menu_bw = wxglade_tmp_menu.Append(wx.ID_ANY, "Box Whisker", "")
		self.Bind(wx.EVT_MENU, self.on_menu_box_whisker, id=self.frame_menubar.i_menu_bw.GetId())
		self.frame_menubar.i_menu_pca = wxglade_tmp_menu.Append(wx.ID_ANY, "Principal Component Analysis", "")
		self.Bind(wx.EVT_MENU, self.on_menu_pca, id=self.frame_menubar.i_menu_pca.GetId())
		self.frame_menubar.Append(wxglade_tmp_menu, "Chart Viewer")
		self.SetMenuBar(self.frame_menubar)
		# Menu Bar end
		self.statusbar = self.CreateStatusBar(2)
		self.statusbar.SetMinHeight(22)
		self.notebook_1 = wx.Notebook(self, wx.ID_ANY)
		self.Launcher = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.Launcher.Bind(wx.EVT_SET_FOCUS, self.refresh_launcher)
		self.launcher_parent_panel = wx.Panel(self.Launcher, wx.ID_ANY, style=wx.BORDER_SUNKEN)
		self.import_raw_button = wx.Button(self.launcher_parent_panel, wx.ID_ANY, "", style=wx.BU_AUTODRAW)
		self.import_raw_button.Bind(wx.EVT_SET_FOCUS, self.refresh_launcher)
		self.import_info_button = wx.BitmapButton(self.launcher_parent_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/info_48.png", wx.BITMAP_TYPE_ANY))
		self.new_project_button = wx.BitmapButton(self.launcher_parent_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/new_project_110.png", wx.BITMAP_TYPE_ANY), style=wx.BU_AUTODRAW | wx.BU_EXACTFIT)
		self.new_info_button = wx.BitmapButton(self.launcher_parent_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/info_48.png", wx.BITMAP_TYPE_ANY))
		self.open_project_button = wx.BitmapButton(self.launcher_parent_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/open_project_110.png", wx.BITMAP_TYPE_ANY))
		self.open_info_button = wx.BitmapButton(self.launcher_parent_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/info_48.png", wx.BITMAP_TYPE_ANY))
		self.comparison_button = wx.BitmapButton(self.launcher_parent_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/comparison_green_110.png", wx.BITMAP_TYPE_ANY))
		self.comparison_info_button = wx.BitmapButton(self.launcher_parent_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/info_48.png", wx.BITMAP_TYPE_ANY))
		self.launcher_right_panel = wx.Panel(self.Launcher, wx.ID_ANY, style=wx.BORDER_SUNKEN)
		self.messages_panel = wx.Panel(self.launcher_right_panel, wx.ID_ANY)
		self.messages = wx.richtext.RichTextCtrl(self.messages_panel, wx.ID_ANY, style=wx.richtext.RE_MULTILINE | wx.richtext.RE_READONLY)
		self.Import = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.import_picker_panel = wx.Panel(self.Import, wx.ID_ANY)
		self.check_list_box_1 = wx.CheckListBox(self.import_picker_panel, wx.ID_ANY, choices=[], style=wx.LB_HSCROLL | wx.LB_MULTIPLE | wx.LB_SORT)
		self.import_btn = wx.Button(self.import_picker_panel, wx.ID_ANY, "Import")
		self.import_log_panel = wx.Panel(self.Import, wx.ID_ANY)
		self.import_log_text_control = wx.TextCtrl(self.import_log_panel, wx.ID_ANY, "", style=wx.TE_CHARWRAP | wx.TE_MULTILINE | wx.TE_READONLY)
		self.New_Project = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.new_project_notebook = wx.Notebook(self.New_Project, wx.ID_ANY, style=wx.NB_BOTTOM)
		self.new_project_settings = wx.Panel(self.new_project_notebook, wx.ID_ANY)
		self.new_project_picker_panel = wx.Panel(self.new_project_settings, wx.ID_ANY)
		self.check_list_box_2 = wx.CheckListBox(self.new_project_picker_panel, wx.ID_ANY, choices=[], style=wx.LB_HSCROLL | wx.LB_MULTIPLE | wx.LB_SORT)
		self.new_project_delete_btn = wx.Button(self.new_project_picker_panel, wx.ID_ANY, "Delete")
		self.new_project_settings_panel = wx.Panel(self.new_project_settings, wx.ID_ANY)
		self.bb_points_value = wx.SpinCtrl(self.new_project_settings_panel, wx.ID_ANY, "0", min=0, max=100, style=0)
		self.bb_scans_value = wx.SpinCtrl(self.new_project_settings_panel, wx.ID_ANY, "0", min=0, max=100, style=0)
		self.alignment_Dw_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.alignment_Gw_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.alignment_min_peaks_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.mass_range_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.base_peak_filter_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.noise_thresh_value = wx.SpinCtrl(self.new_project_settings_panel, wx.ID_ANY, "0", min=0, max=100, style=0)
		self.tophat_struct_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.tophat_struct_units = wx.Choice(self.new_project_settings_panel, wx.ID_ANY, choices=["min", "sec", "ms"])
		self.target_range_min_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.target_range_max_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.pretty_name_value = wx.TextCtrl(self.new_project_settings_panel, wx.ID_ANY, "")
		self.pretty_name_clear = wx.BitmapButton(self.new_project_settings_panel, wx.ID_ANY, wx.ArtProvider.GetBitmap(wx.ART_GO_BACK, wx.ART_MENU))
		self.project_quantitative = wx.CheckBox(self.new_project_settings_panel, wx.ID_ANY, "Quantitative")
		self.project_merge = wx.CheckBox(self.new_project_settings_panel, wx.ID_ANY, "Merge")
		self.project_qualitative = wx.CheckBox(self.new_project_settings_panel, wx.ID_ANY, "Qualitative")
		self.project_counter = wx.CheckBox(self.new_project_settings_panel, wx.ID_ANY, "Counter")
		self.project_spectra = wx.CheckBox(self.new_project_settings_panel, wx.ID_ANY, "Spectra")
		self.project_charts = wx.CheckBox(self.new_project_settings_panel, wx.ID_ANY, "Charts")
		self.import_apply_btn = wx.Button(self.new_project_settings_panel, wx.ID_ANY, "Apply")
		self.default = wx.Button(self.new_project_settings_panel, wx.ID_ANY, "Default")
		self.reset = wx.Button(self.new_project_settings_panel, wx.ID_ANY, "Reset")
		self.queue_btn = wx.Button(self.new_project_settings_panel, wx.ID_ANY, "Add to Queue")
		self.run_btn = wx.Button(self.new_project_settings_panel, wx.ID_ANY, "Run")
		self.new_project_queue = wx.Panel(self.new_project_notebook, wx.ID_ANY)
		self.project_queue_panel = wx.Panel(self.new_project_queue, wx.ID_ANY)
		self.project_queue_grid = wx.grid.Grid(self.project_queue_panel, wx.ID_ANY, size=(1, 1))
		self.project_queue_clear_btn = wx.Button(self.project_queue_panel, wx.ID_ANY, "Clear")
		self.project_queue_delete_btn = wx.Button(self.project_queue_panel, wx.ID_ANY, "Delete")
		self.project_queue_save_btn = wx.Button(self.project_queue_panel, wx.ID_ANY, "Save Queue")
		self.project_queue_load_btn = wx.Button(self.project_queue_panel, wx.ID_ANY, "Load Queue")
		self.project_queue_run_btn = wx.Button(self.project_queue_panel, wx.ID_ANY, "Run")
		self.new_project_log = wx.Panel(self.new_project_notebook, wx.ID_ANY)
		self.project_log_panel = wx.Panel(self.new_project_log, wx.ID_ANY)
		self.project_log_text_control = wx.TextCtrl(self.project_log_panel, wx.ID_ANY, "", style=wx.TE_CHARWRAP | wx.TE_MULTILINE | wx.TE_READONLY)
		self.project_log_save_btn = wx.Button(self.project_log_panel, wx.ID_ANY, "Save Log")
		self.Browse_Project = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.browse_project_notebook = wx.Notebook(self.Browse_Project, wx.ID_ANY, style=wx.NB_BOTTOM)
		self.browse_project_charts = wx.Panel(self.browse_project_notebook, wx.ID_ANY)
		self.charts_toolbar = wx.Panel(self.browse_project_charts, wx.ID_ANY, style=wx.BORDER_SUNKEN)
		self.charts_toolbar.SetMaxSize((-1,40))
		self.charts_focus_thief = wx.Button(self.charts_toolbar, wx.ID_ANY, "")
		self.charts_CloseProject = wx.BitmapButton(self.charts_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/close_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.open_project_body_panel = wx.Panel(self.browse_project_charts, wx.ID_ANY, style=wx.BORDER_SUNKEN)
		self.radar_chart_button = wx.BitmapButton(self.open_project_body_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/radar_chart_192.png", wx.BITMAP_TYPE_ANY))
		self.mean_peak_area_button = wx.BitmapButton(self.open_project_body_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/mean_peak_area_192.png", wx.BITMAP_TYPE_ANY))
		self.open_project_header_browser = wx.html2.WebView.New(self.open_project_body_panel, wx.ID_ANY)
		self.open_project_header_browser.SetMaxSize((200,200))
		self.box_whisker_button = wx.BitmapButton(self.open_project_body_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/box_whisker_192.png", wx.BITMAP_TYPE_ANY))
		self.peak_area_button = wx.BitmapButton(self.open_project_body_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/peak_area_192.png", wx.BITMAP_TYPE_ANY))
		self.chromatogram_button = wx.BitmapButton(self.open_project_body_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/HPLC_Chromatogram_by_Fredrik_Edfors_from_the_Noun_Project_192.png", wx.BITMAP_TYPE_ANY))
		self.browse_project_chromatogram = wx.Panel(self.browse_project_notebook, wx.ID_ANY)
		self.chromatogram_toolbar = wx.Panel(self.browse_project_chromatogram, wx.ID_ANY, style=wx.BORDER_SUNKEN)
		self.chromatogram_toolbar.SetMaxSize((-1,40))
		self.focus_thief = wx.Button(self.chromatogram_toolbar, wx.ID_ANY, "")
		self.CloseProject = wx.BitmapButton(self.chromatogram_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/close_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.OpenSample = wx.BitmapButton(self.chromatogram_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/open_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.ViewPeakList = wx.BitmapButton(self.chromatogram_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/list_view_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.PreviousSample = wx.BitmapButton(self.chromatogram_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/go_back_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.NextSample = wx.BitmapButton(self.chromatogram_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/go_forward_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.chrom_ResetView = wx.BitmapButton(self.chromatogram_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/home_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.chrom_PreviousView = wx.BitmapButton(self.chromatogram_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/go_up_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.chrom_Zoom_Btn = wx.BitmapButton(self.chromatogram_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/zoom_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.chrom_Pan_Btn = wx.BitmapButton(self.chromatogram_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/gimp-tool-move.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.ViewSpectrum_Btn = wx.BitmapButton(self.chromatogram_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/Mass_Spectrum_by_Fredrik_Edfors_from_the_Noun_Project.24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.config_borders_button = wx.Button(self.chromatogram_toolbar, wx.ID_ANY, "Configure Borders")
		self.chrom_png_button = wx.ToggleButton(self.chromatogram_toolbar, wx.ID_ANY, "PNG")
		self.chrom_svg_button = wx.ToggleButton(self.chromatogram_toolbar, wx.ID_ANY, "SVG")
		self.chrom_pdf_button = wx.ToggleButton(self.chromatogram_toolbar, wx.ID_ANY, "PDF")
		self.chrom_save_btn = wx.BitmapButton(self.chromatogram_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/save_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.chromatogram_parent_panel = wx.Panel(self.browse_project_chromatogram, wx.ID_ANY, style=wx.BORDER_SUNKEN)
		
		# create the figure with a single plot and create a canvas with the figure
		self.chromatogram_figure = Figure()
		matplotlib.projections.register_projection(My_Axes)
		self.chromatogram_axes = self.chromatogram_figure.add_subplot(111, projection="My_Axes")  # 1x1 grid, first subplot
		
		
		
		self.chromatogram_canvas = FigureCanvas(self.chromatogram_parent_panel, wx.ID_ANY, self.chromatogram_figure)
		self.browse_project_data = wx.Panel(self.browse_project_notebook, wx.ID_ANY)
		self.dv_toolbar = wx.Panel(self.browse_project_data, wx.ID_ANY, style=wx.BORDER_SUNKEN)
		self.dv_toolbar.SetMinSize((1,40))
		self.dv_toolbar.SetMaxSize((-1,40))
		self.dv_focus_thief = wx.Button(self.dv_toolbar, wx.ID_ANY, "")
		self.dv_CloseProject = wx.BitmapButton(self.dv_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/close_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.dv_main_panel = wx.Panel(self.browse_project_data, wx.ID_ANY, style=wx.BORDER_SUNKEN)
		self.data_viewer_v_splitter = wx.SplitterWindow(self.dv_main_panel, wx.ID_ANY, style=wx.SP_3D | wx.SP_BORDER | wx.SP_LIVE_UPDATE)
		self.dv_list_panel = wx.Panel(self.data_viewer_v_splitter, wx.ID_ANY)
		self.data_viewer_list = wx.ListCtrl(self.dv_list_panel, wx.ID_ANY, style=wx.LC_HRULES | wx.LC_REPORT | wx.LC_VRULES)
		self.dv_data_panel = wx.Panel(self.data_viewer_v_splitter, wx.ID_ANY)
		self.data_viewer_h_splitter = wx.SplitterWindow(self.dv_data_panel, wx.ID_ANY, style=wx.SP_3D | wx.SP_BORDER | wx.SP_LIVE_UPDATE)
		self.dv_spec_panel = wx.Panel(self.data_viewer_h_splitter, wx.ID_ANY)
		self.data_viewer_notebook = wx.Notebook(self.dv_spec_panel, wx.ID_ANY, style=wx.NB_BOTTOM)
		self.data_viewer_reference = wx.Panel(self.data_viewer_notebook, wx.ID_ANY)
		self.dv_reference_panel = wx.Panel(self.data_viewer_reference, wx.ID_ANY, style=wx.BORDER_SUNKEN)
		
		# create the figure with a single plot and create a canvas with the figure
		self.dv_reference_spec_figure = Figure()
		matplotlib.projections.register_projection(My_Axes)
		self.dv_reference_spec_axes = self.dv_reference_spec_figure.add_subplot(111, projection="My_Axes")  # 1x1 grid, first subplot
		
		
		
		self.dv_reference_spec_canvas = FigureCanvas(self.dv_reference_panel, wx.ID_ANY, self.dv_reference_spec_figure)
		self.dv_reference_toolbar = wx.Panel(self.data_viewer_reference, wx.ID_ANY, style=wx.BORDER_SUNKEN)
		self.dv_reference_toolbar.SetMaxSize((-1,40))
		self.dv_reference_focus_thief = wx.Button(self.dv_reference_toolbar, wx.ID_ANY, "")
		self.dv_reference_previous_btn = wx.BitmapButton(self.dv_reference_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/go_back_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.dv_reference_next_btn = wx.BitmapButton(self.dv_reference_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/go_forward_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.dv_reference_png_button = wx.ToggleButton(self.dv_reference_toolbar, wx.ID_ANY, "PNG")
		self.dv_reference_svg_button = wx.ToggleButton(self.dv_reference_toolbar, wx.ID_ANY, "SVG")
		self.dv_reference_pdf_button = wx.ToggleButton(self.dv_reference_toolbar, wx.ID_ANY, "PDF")
		self.dv_reference_save_btn = wx.BitmapButton(self.dv_reference_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/save_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.data_viewer_samples = wx.Panel(self.data_viewer_notebook, wx.ID_ANY)
		self.dv_samples_panel = wx.Panel(self.data_viewer_samples, wx.ID_ANY, style=wx.BORDER_SUNKEN)
		
		# create the figure with a single plot and create a canvas with the figure
		self.dv_samples_spec_figure = Figure()
		matplotlib.projections.register_projection(My_Axes)
		self.dv_samples_spec_axes = self.dv_samples_spec_figure.add_subplot(111, projection="My_Axes")  # 1x1 grid, first subplot
		
		
		
		self.dv_samples_spec_canvas = FigureCanvas(self.dv_samples_panel, wx.ID_ANY, self.dv_samples_spec_figure)
		self.dv_samples_toolbar = wx.Panel(self.data_viewer_samples, wx.ID_ANY, style=wx.BORDER_SUNKEN)
		self.dv_samples_toolbar.SetMaxSize((-1,40))
		self.dv_samples_focus_thief = wx.Button(self.dv_samples_toolbar, wx.ID_ANY, "")
		self.dv_samples_previous_btn = wx.BitmapButton(self.dv_samples_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/go_back_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.dv_samples_next_btn = wx.BitmapButton(self.dv_samples_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/go_forward_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.dv_samples_png_button = wx.ToggleButton(self.dv_samples_toolbar, wx.ID_ANY, "PNG")
		self.dv_samples_svg_button = wx.ToggleButton(self.dv_samples_toolbar, wx.ID_ANY, "SVG")
		self.dv_samples_pdf_button = wx.ToggleButton(self.dv_samples_toolbar, wx.ID_ANY, "PDF")
		self.dv_samples_save_btn = wx.BitmapButton(self.dv_samples_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/save_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.data_viewer_head2tail = wx.Panel(self.data_viewer_notebook, wx.ID_ANY)
		self.dv_head2tail_panel = wx.Panel(self.data_viewer_head2tail, wx.ID_ANY, style=wx.BORDER_SUNKEN)
		
		# create the figure with a single plot and create a canvas with the figure
		self.dv_head2tail_spec_figure = Figure()
		matplotlib.projections.register_projection(My_Axes)
		self.dv_head2tail_spec_axes = self.dv_head2tail_spec_figure.add_subplot(111, projection="My_Axes")  # 1x1 grid, first subplot
		
		
		
		self.dv_head2tail_spec_canvas = FigureCanvas(self.dv_head2tail_panel, wx.ID_ANY, self.dv_head2tail_spec_figure)
		self.dv_head2tail_toolbar = wx.Panel(self.data_viewer_head2tail, wx.ID_ANY, style=wx.BORDER_SUNKEN)
		self.dv_head2tail_toolbar.SetMaxSize((-1,40))
		self.dv_head2tail_focus_thief = wx.Button(self.dv_head2tail_toolbar, wx.ID_ANY, "")
		self.dv_head2tail_previous_btn = wx.BitmapButton(self.dv_head2tail_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/go_back_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.dv_head2tail_next_btn = wx.BitmapButton(self.dv_head2tail_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/go_forward_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.dv_head2tail_png_button = wx.ToggleButton(self.dv_head2tail_toolbar, wx.ID_ANY, "PNG")
		self.dv_head2tail_svg_button = wx.ToggleButton(self.dv_head2tail_toolbar, wx.ID_ANY, "SVG")
		self.dv_head2tail_pdf_button = wx.ToggleButton(self.dv_head2tail_toolbar, wx.ID_ANY, "PDF")
		self.dv_head2tail_save_btn = wx.BitmapButton(self.dv_head2tail_toolbar, wx.ID_ANY, wx.Bitmap("./lib/icons/save_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.dv_html_panel = wx.Panel(self.data_viewer_h_splitter, wx.ID_ANY)
		self.dv_html = wx.html2.WebView.New(self.dv_html_panel, wx.ID_ANY)
		self.dv_html_home = "http://domdfcoding.github.com/GunShotMatch"
		self.dv_html.LoadURL(self.dv_html_home)
		self.browse_project_comparison = wx.Panel(self.browse_project_notebook, wx.ID_ANY)
		self.Compare_Projects = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.comparison_panel = wx.Panel(self.Compare_Projects, wx.ID_ANY)
		self.comparison_left_picker = wx.TextCtrl(self.comparison_panel, wx.ID_ANY, "", style=wx.TE_READONLY)
		self.comparison_left_browse_btn = wx.BitmapButton(self.comparison_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/open_16.png", wx.BITMAP_TYPE_ANY))
		self.comparison_left_header = wx.html2.WebView.New(self.comparison_panel, wx.ID_ANY)
		self.comparison_right_picker = wx.TextCtrl(self.comparison_panel, wx.ID_ANY, "", style=wx.TE_READONLY)
		self.comparison_right_browse_btn = wx.BitmapButton(self.comparison_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/open_16.png", wx.BITMAP_TYPE_ANY))
		self.comparison_right_header = wx.html2.WebView.New(self.comparison_panel, wx.ID_ANY)
		self.comparison_alignment_Dw_value = wx.SpinCtrlDouble(self.comparison_panel, wx.ID_ANY, "0.0", min=0.0, max=99.0)
		self.comparison_alignment_Dw_value.SetDigits(2)
		self.comparison_alignment_Gw_value = wx.SpinCtrlDouble(self.comparison_panel, wx.ID_ANY, "0.0", min=0.0, max=99.0)
		self.comparison_alignment_Gw_value.SetDigits(2)
		self.comparison_alignment_min_peaks_value = wx.SpinCtrlDouble(self.comparison_panel, wx.ID_ANY, "0.0", min=0.0, max=99.0)
		self.significance_level_value = wx.SpinCtrlDouble(self.comparison_panel, wx.ID_ANY, "0.05", min=0.0, max=1.0)
		self.significance_level_value.SetDigits(3)
		self.comparison_apply_btn = wx.Button(self.comparison_panel, wx.ID_ANY, "Apply")
		self.comparison_default_btn = wx.Button(self.comparison_panel, wx.ID_ANY, "Default")
		self.comparison_reset_btn = wx.Button(self.comparison_panel, wx.ID_ANY, "Reset")
		self.run_comparison_button = wx.Button(self.comparison_panel, wx.ID_ANY, u"▶ Run Comparison")
		self.comparison_radar_button = wx.Button(self.comparison_panel, wx.ID_ANY, "Radar Chart")
		self.comparison_mean_pa_button = wx.Button(self.comparison_panel, wx.ID_ANY, "Mean Peak Area")
		self.comparison_box_whisker_btn = wx.Button(self.comparison_panel, wx.ID_ANY, "Box Whisker Plot")
		self.comparison_pca_btn = wx.Button(self.comparison_panel, wx.ID_ANY, "")
		self.comparison_log_text_control = wx.TextCtrl(self.comparison_panel, wx.ID_ANY, "", style=wx.TE_CHARWRAP | wx.TE_MULTILINE | wx.TE_READONLY)
		self.Help = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.help_toolbar_panel = wx.Panel(self.Help, wx.ID_ANY)
		self.chromatogram_toolbar.SetMaxSize((-1,40))
		self.help_focus_thief = wx.Button(self.help_toolbar_panel, wx.ID_ANY, "")
		self.help_back_btn = wx.BitmapButton(self.help_toolbar_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/go_back_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.help_forward_btn = wx.BitmapButton(self.help_toolbar_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/go_forward_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.help_home_btn = wx.BitmapButton(self.help_toolbar_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/home_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.help_url_text_ctrl = wx.TextCtrl(self.help_toolbar_panel, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL | wx.TE_PROCESS_ENTER)
		self.help_go_btn = wx.BitmapButton(self.help_toolbar_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/go_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.help_readme_btn = wx.BitmapButton(self.help_toolbar_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/help_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.help_github_btn = wx.BitmapButton(self.help_toolbar_panel, wx.ID_ANY, wx.Bitmap("./lib/icons/GitHub-Mark_24.png", wx.BITMAP_TYPE_ANY), style=wx.BORDER_NONE | wx.BU_AUTODRAW | wx.BU_EXACTFIT | wx.BU_NOTEXT)
		self.help_open_browser_btn = wx.Button(self.help_toolbar_panel, wx.ID_ANY, "Open in browser")
		self.help_parent_panel = wx.Panel(self.Help, wx.ID_ANY, style=wx.BORDER_SUNKEN)
		self.help_browser = wx.html2.WebView.New(self.help_parent_panel, wx.ID_ANY)
		self.help_home ="http://domdfcoding.github.com/GunShotMatch"
		self.help_browser.LoadURL(self.help_home)

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_BUTTON, self.on_import, self.import_raw_button)
		self.Bind(wx.EVT_BUTTON, self.do_import_info, self.import_info_button)
		self.Bind(wx.EVT_BUTTON, self.on_new_project, self.new_project_button)
		self.Bind(wx.EVT_BUTTON, self.do_new_info, self.new_info_button)
		self.Bind(wx.EVT_BUTTON, self.on_open_project, self.open_project_button)
		self.Bind(wx.EVT_BUTTON, self.do_open_info, self.open_info_button)
		self.Bind(wx.EVT_BUTTON, self.on_open_comparison, self.comparison_button)
		self.Bind(wx.EVT_BUTTON, self.do_comparison_info, self.comparison_info_button)
		self.Bind(wx.EVT_BUTTON, self.do_import, self.import_btn)
		self.Bind(wx.EVT_BUTTON, self.do_delete, self.new_project_delete_btn)
		self.Bind(wx.EVT_BUTTON, self.on_pretty_name_clear, self.pretty_name_clear)
		self.Bind(wx.EVT_BUTTON, self.do_apply, self.import_apply_btn)
		self.Bind(wx.EVT_BUTTON, self.do_default, self.default)
		self.Bind(wx.EVT_BUTTON, self.do_reset, self.reset)
		self.Bind(wx.EVT_BUTTON, self.do_enqueue, self.queue_btn)
		self.Bind(wx.EVT_BUTTON, self.do_new_project, self.run_btn)
		self.Bind(wx.EVT_BUTTON, self.on_queue_clear, self.project_queue_clear_btn)
		self.Bind(wx.EVT_BUTTON, self.on_queue_delete, self.project_queue_delete_btn)
		self.Bind(wx.EVT_BUTTON, self.on_save_queue, self.project_queue_save_btn)
		self.Bind(wx.EVT_BUTTON, self.on_load_queue, self.project_queue_load_btn)
		self.Bind(wx.EVT_BUTTON, self.on_project_queue_run, self.project_queue_run_btn)
		self.Bind(wx.EVT_BUTTON, self.on_project_log_save, self.project_log_save_btn)
		self.Bind(wx.EVT_BUTTON, self.on_close_project, self.charts_CloseProject)
		self.Bind(wx.EVT_BUTTON, self.show_radar_chart, self.radar_chart_button)
		self.Bind(wx.EVT_BUTTON, self.show_mean_peak_area_chart, self.mean_peak_area_button)
		self.Bind(wx.EVT_BUTTON, self.show_box_whisker_chart, self.box_whisker_button)
		self.Bind(wx.EVT_BUTTON, self.show_peak_area_chart, self.peak_area_button)
		self.Bind(wx.EVT_BUTTON, self.show_chromatogram, self.chromatogram_button)
		self.Bind(wx.EVT_BUTTON, self.on_close_project, self.CloseProject)
		self.Bind(wx.EVT_BUTTON, self.on_open_sample, self.OpenSample)
		self.Bind(wx.EVT_BUTTON, self.on_view_peak_list, self.ViewPeakList)
		self.Bind(wx.EVT_BUTTON, self.on_previous_sample, self.PreviousSample)
		self.Bind(wx.EVT_BUTTON, self.on_next_sample, self.NextSample)
		self.Bind(wx.EVT_BUTTON, self.on_chromatogram_reset_view, self.chrom_ResetView)
		self.Bind(wx.EVT_BUTTON, self.on_chromatogram_previous_view, self.chrom_PreviousView)
		self.Bind(wx.EVT_BUTTON, self.on_chromatogram_zoom, self.chrom_Zoom_Btn)
		self.Bind(wx.EVT_BUTTON, self.on_chromatogram_pan, self.chrom_Pan_Btn)
		self.Bind(wx.EVT_BUTTON, self.on_view_spectrum, self.ViewSpectrum_Btn)
		self.Bind(wx.EVT_BUTTON, self.do_configure_borders, self.config_borders_button)
		self.Bind(wx.EVT_BUTTON, self.do_save_chrom, self.chrom_save_btn)
		self.Bind(wx.EVT_BUTTON, self.on_close_project, self.dv_CloseProject)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.do_select_peak, self.data_viewer_list)
		self.Bind(wx.EVT_BUTTON, self.dv_do_save_reference, self.dv_reference_save_btn)
		self.Bind(wx.EVT_BUTTON, self.dv_on_samples_previous, self.dv_samples_previous_btn)
		self.Bind(wx.EVT_BUTTON, self.dv_on_samples_next, self.dv_samples_next_btn)
		self.Bind(wx.EVT_BUTTON, self.dv_do_save_samples, self.dv_samples_save_btn)
		self.Bind(wx.EVT_BUTTON, self.dv_on_head2tail_previous, self.dv_head2tail_previous_btn)
		self.Bind(wx.EVT_BUTTON, self.dv_on_head2tail_next, self.dv_head2tail_next_btn)
		self.Bind(wx.EVT_BUTTON, self.dv_do_save_head2tail, self.dv_head2tail_save_btn)
		self.Bind(wx.EVT_BUTTON, self.on_left_comparison_browse, self.comparison_left_browse_btn)
		self.Bind(wx.EVT_BUTTON, self.on_right_comparison_browse, self.comparison_right_browse_btn)
		self.Bind(wx.EVT_BUTTON, self.comparison_run, self.run_comparison_button)
		self.Bind(wx.EVT_BUTTON, self.on_help_back, self.help_back_btn)
		self.Bind(wx.EVT_BUTTON, self.on_help_forward, self.help_forward_btn)
		self.Bind(wx.EVT_BUTTON, self.on_help_home, self.help_home_btn)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_help_go, self.help_url_text_ctrl)
		self.Bind(wx.EVT_BUTTON, self.on_help_go, self.help_go_btn)
		self.Bind(wx.EVT_BUTTON, self.on_help_readme, self.help_readme_btn)
		self.Bind(wx.EVT_BUTTON, self.on_help_github, self.help_github_btn)
		self.Bind(wx.EVT_BUTTON, self.on_help_browser, self.help_open_browser_btn)
		# end wxGlade
		
		self.Bind(wx.EVT_BUTTON, self.do_comparison_apply, self.comparison_apply_btn)
		self.Bind(wx.EVT_BUTTON, self.do_comparison_default, self.comparison_default_btn)
		self.Bind(wx.EVT_BUTTON, self.do_comparison_reset, self.comparison_reset_btn)
		self.Bind(wx.EVT_BUTTON, self.comparison_show_radar, self.comparison_radar_button)
		self.Bind(wx.EVT_BUTTON, self.comparison_show_box_whisker, self.comparison_box_whisker_btn)
		self.Bind(wx.EVT_BUTTON, self.comparison_show_mean_peak_area, self.comparison_mean_pa_button)
		self.Bind(wx.EVT_BUTTON, self.comparison_show_pca, self.comparison_pca_btn)
		
		if sys.platform == "win32":
			self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.notebook_1_handler_win32, self.notebook_1)
		else:
			self.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGING, self.notebook_1_handler, self.notebook_1)
			
		# Configuration
		#self.Config = ConfigParser.ConfigParser()
		#self.Config.read("config.ini")
		from gsm_core import GSMConfig
		self.Config = GSMConfig("config.ini")
		
		# Load Settings &c.
		self.rescan_files()
		self.do_reset()
		self.do_comparison_reset()
		
		self.pretty_name_list = {}
		with open("lib/pretty_names_list", "r") as pretty_name_file:
			for name in pretty_name_file.readlines():
				# print(name)
				self.pretty_name_list[name.rstrip("\r\n")] = ''
		# print(self.pretty_name_list)
		self.on_pretty_name_clear()
		self.pretty_name_value.Clear()
		# for name in self.pretty_name_list:
		#	self.pretty_name_value.Append(name)
		
		self.pretty_name_value.AutoComplete([name for name in self.pretty_name_list])
		
		self.project_queue_grid.DeleteRows(0, 10)
		self.on_load_queue(pathname="lib/queue.csv")
		
		# Window Size and Position
		self.SetMinSize((1140, 650))
		self.SetSize((1140, 650))
		self.Center()
		self.SetIcon(wx.Icon("lib/icons/GunShotMatch.ico"))
		internal_config = ConfigParser.ConfigParser()
		internal_config.read("lib/gsmatch.ini")
		position = internal_config.get("MAIN", "position").split(",")
		position = tuple([int(x) for x in position])
		if not any(x > y for x, y in zip(position, wx.GetDisplaySize())):
			self.Move(*position)
		
		# Help Browser Setup
		self.Bind(wx.html2.EVT_WEBVIEW_NAVIGATED, self.help_update_url, self.help_browser)
		
		# Thread Setup
		# self.Bind(EVT_QUEUE, self.OnQueueDone)
		self.status_buffer = []
		self.worker = StatusThread(self, 1)
		# self.worker.daemon = True
		self.worker.start()
		self.Bind(EVT_STATUS, self.OnStatus)
		self.Bind(EVT_CONVERSION, self.OnImportDone)
		self.Bind(EVT_CONVERSION_LOG, self.OnImportLog)
		self.Bind(EVT_PROJECT, self.OnProjectDone)
		self.Bind(EVT_PROJECT_LOG, self.OnProjectLog)
		self.Bind(EVT_COMPARISON, self.OnComparisonDone)
		self.Bind(EVT_COMPARISON_LOG, self.OnComparisonLog)
		
		self.Bind(EVT_DATA_VIEWER, self.Data_Viewer_Ready)
		
		self.display_chromatogram()
		
		self.current_project = None
		self.current_project_name = None
		
		self.chrom_pdf_button.SetValue(True)
		self.chrom_png_button.SetValue(True)
		self.chrom_svg_button.SetValue(True)
		
		self.comparison_right_project = None
		self.comparison_right_project_name = None
		self.comparison_left_project = None
		self.comparison_left_project_name = None
		
		self.browser_peak_data = []
		
		# Setup Jinja2 Template
		templateLoader = jinja2.FileSystemLoader(searchpath="./")
		templateEnv = jinja2.Environment(loader=templateLoader)
		TEMPLATE_FILE = "lib/properties_template.html"
		self.template = templateEnv.get_template(TEMPLATE_FILE)
		self.template.globals['rounders'] = rounders
		self.template.globals['np'] = numpy
		self.template.globals['len'] = len
	
	def __set_properties(self):
		# begin wxGlade: Launcher.__set_properties
		self.SetTitle("GunShotMatch")
		_icon = wx.NullIcon
		_icon.CopyFromBitmap(wx.Bitmap("./lib/icons/GunShotMatch logo256.png", wx.BITMAP_TYPE_ANY))
		self.SetIcon(_icon)
		self.statusbar.SetStatusWidths([350, 300])
		
		# statusbar fields
		statusbar_fields = ["Status:", ""]
		for i in range(len(statusbar_fields)):
			self.statusbar.SetStatusText(statusbar_fields[i], i)
		self.import_raw_button.SetMinSize((128, 128))
		self.import_raw_button.SetToolTip("Import .RAW Files")
		self.import_raw_button.SetBitmap(wx.Bitmap("./lib/icons/import_110.png", wx.BITMAP_TYPE_ANY))
		self.import_info_button.SetToolTip("Show help for \"Import\"")
		self.import_info_button.SetSize(self.import_info_button.GetBestSize())
		self.new_project_button.SetMinSize((128, 128))
		self.new_project_button.SetToolTip("Create New Project")
		self.new_info_button.SetToolTip("Show help for \"New Project\"")
		self.new_info_button.SetSize(self.new_info_button.GetBestSize())
		self.open_project_button.SetMinSize((128, 128))
		self.open_project_button.SetToolTip("Open Project")
		self.open_info_button.SetToolTip("Show help for \"Open Project\"")
		self.open_info_button.SetSize(self.open_info_button.GetBestSize())
		self.comparison_button.SetMinSize((128, 128))
		self.comparison_button.SetToolTip("Open Project")
		self.comparison_info_button.SetToolTip("Show help for \"Comparison\"")
		self.comparison_info_button.SetSize(self.comparison_info_button.GetBestSize())
		self.launcher_parent_panel.SetBackgroundColour(wx.Colour(240, 240, 240))
		self.Launcher.SetBackgroundColour(wx.Colour(240, 240, 240))
		self.check_list_box_1.SetMinSize((256, 128))
		self.check_list_box_1.SetMinSize((256, 128))
		self.check_list_box_2.SetMinSize((256, 128))
		self.check_list_box_2.SetMinSize((256, 128))
		self.bb_points_value.SetMinSize((120, 29))
		self.bb_scans_value.SetMinSize((120, 29))
		self.alignment_Dw_value.SetMinSize((50, 29))
		self.alignment_Dw_value.SetMaxLength(4)
		self.alignment_Gw_value.SetMinSize((50, 29))
		self.alignment_Gw_value.SetMaxLength(4)
		self.alignment_min_peaks_value.SetMinSize((50, 29))
		self.alignment_min_peaks_value.SetMaxLength(4)
		self.mass_range_value.SetMinSize((300, 29))
		self.base_peak_filter_value.SetMinSize((300, 29))
		self.base_peak_filter_value.SetToolTip("Peaks with these base ions (i.e. the most intense peak in the mass spectrum) will be excluded from the results. This can be useful for excluding compounds related to septum bleed, which usually have a base ion at m/z 73")
		self.noise_thresh_value.SetMinSize((120, 29))
		self.tophat_struct_value.SetMinSize((50, 29))
		self.tophat_struct_value.SetMaxLength(4)
		self.tophat_struct_units.SetSelection(0)
		self.target_range_min_value.SetMinSize((55, 29))
		self.target_range_min_value.SetMaxLength(5)
		self.target_range_max_value.SetMinSize((55, 29))
		self.target_range_max_value.SetMaxLength(5)
		self.pretty_name_value.SetMinSize((260, 29))
		self.pretty_name_clear.SetSize(self.pretty_name_clear.GetBestSize())
		self.project_quantitative.SetValue(1)
		self.project_merge.SetValue(1)
		self.project_qualitative.SetValue(1)
		self.project_counter.SetValue(1)
		self.project_spectra.SetValue(1)
		self.project_charts.SetValue(1)
		self.project_queue_grid.CreateGrid(10, 20)
		self.project_queue_grid.EnableEditing(0)
		self.project_queue_grid.SetColLabelValue(0, "Status")
		self.project_queue_grid.SetColSize(0, 80)
		self.project_queue_grid.SetColLabelValue(1, "prefixList")
		self.project_queue_grid.SetColSize(1, 300)
		self.project_queue_grid.SetColLabelValue(2, "pretty_name")
		self.project_queue_grid.SetColSize(2, 90)
		self.project_queue_grid.SetColLabelValue(3, "bb_points")
		self.project_queue_grid.SetColSize(3, 80)
		self.project_queue_grid.SetColLabelValue(4, "bb_scans")
		self.project_queue_grid.SetColSize(4, 80)
		self.project_queue_grid.SetColLabelValue(5, "noise_thresh")
		self.project_queue_grid.SetColSize(5, 100)
		self.project_queue_grid.SetColLabelValue(6, "target_range")
		self.project_queue_grid.SetColSize(6, 100)
		self.project_queue_grid.SetColLabelValue(7, "exclude_ions")
		self.project_queue_grid.SetColSize(7, 100)
		self.project_queue_grid.SetColLabelValue(8, "tophat")
		self.project_queue_grid.SetColSize(8, 73)
		self.project_queue_grid.SetColLabelValue(9, "tophat_unit")
		self.project_queue_grid.SetColSize(9, 93)
		self.project_queue_grid.SetColLabelValue(10, "mass_range")
		self.project_queue_grid.SetColSize(10, 93)
		self.project_queue_grid.SetColLabelValue(11, "rt_modulation")
		self.project_queue_grid.SetColSize(11, 110)
		self.project_queue_grid.SetColLabelValue(12, "gap_penalty")
		self.project_queue_grid.SetColSize(12, 93)
		self.project_queue_grid.SetColLabelValue(13, "min_peaks")
		self.project_queue_grid.SetColSize(13, 83)
		self.project_queue_grid.SetColLabelValue(14, "do_quantitative")
		self.project_queue_grid.SetColSize(14, 123)
		self.project_queue_grid.SetColLabelValue(15, "do_qualitative")
		self.project_queue_grid.SetColSize(15, 110)
		self.project_queue_grid.SetColLabelValue(16, "do_merge")
		self.project_queue_grid.SetColSize(16, 83)
		self.project_queue_grid.SetColLabelValue(17, "do_counter")
		self.project_queue_grid.SetColSize(17, 90)
		self.project_queue_grid.SetColLabelValue(18, "do_spectra")
		self.project_queue_grid.SetColSize(18, 83)
		self.project_queue_grid.SetColLabelValue(19, "do_charts")
		self.project_queue_grid.SetColSize(19, 83)
		self.charts_focus_thief.SetMinSize((1, 1))
		self.charts_CloseProject.SetMinSize((38, 38))
		self.charts_CloseProject.SetToolTip("Close Project")
		self.charts_toolbar.SetMinSize((-1, 32))
		self.radar_chart_button.SetMinSize((200, 200))
		self.mean_peak_area_button.SetMinSize((200, 200))
		self.open_project_header_browser.SetMinSize((200, 200))
		self.box_whisker_button.SetMinSize((200, 200))
		self.peak_area_button.SetMinSize((200, 200))
		self.chromatogram_button.SetMinSize((200, 200))
		self.focus_thief.SetMinSize((1, 1))
		self.CloseProject.SetMinSize((38, 38))
		self.CloseProject.SetToolTip("Close Project")
		self.OpenSample.SetMinSize((38, 38))
		self.OpenSample.SetToolTip("Open Sample Chromatogram")
		self.ViewPeakList.SetMinSize((38, 38))
		self.ViewPeakList.SetToolTip("View Peak List")
		self.PreviousSample.SetMinSize((38, 38))
		self.PreviousSample.SetToolTip("Previous Sample")
		self.NextSample.SetMinSize((38, 38))
		self.NextSample.SetToolTip("Next Sample")
		self.chrom_ResetView.SetMinSize((38, 38))
		self.chrom_ResetView.SetToolTip("Reset View")
		self.chrom_PreviousView.SetMinSize((38, 38))
		self.chrom_PreviousView.SetToolTip("Previous View")
		self.chrom_Zoom_Btn.SetMinSize((38, 38))
		self.chrom_Zoom_Btn.SetToolTip("Pan")
		self.chrom_Pan_Btn.SetMinSize((38, 38))
		self.chrom_Pan_Btn.SetToolTip("Pan")
		self.ViewSpectrum_Btn.SetMinSize((38, 38))
		self.ViewSpectrum_Btn.SetToolTip("View Mass Spectrum")
		self.chrom_png_button.SetMinSize((45, -1))
		self.chrom_svg_button.SetMinSize((45, -1))
		self.chrom_pdf_button.SetMinSize((45, -1))
		self.chrom_save_btn.SetSize(self.chrom_save_btn.GetBestSize())
		self.chromatogram_toolbar.SetMinSize((-1, 32))
		self.chromatogram_canvas.SetMinSize((1, 1))
		self.dv_focus_thief.SetMinSize((1, 1))
		self.dv_CloseProject.SetMinSize((38, 38))
		self.dv_CloseProject.SetToolTip("Close Project")
		self.dv_toolbar.SetMinSize((-1, 32))
		self.data_viewer_list.AppendColumn("Time", format=wx.LIST_FORMAT_LEFT, width=80)
		self.data_viewer_list.AppendColumn("Name", format=wx.LIST_FORMAT_LEFT, width=400)
		self.data_viewer_list.AppendColumn("CAS", format=wx.LIST_FORMAT_LEFT, width=80)
		self.dv_reference_focus_thief.SetMinSize((1, 1))
		self.dv_reference_previous_btn.SetMinSize((38, 38))
		self.dv_reference_previous_btn.SetToolTip("Go back")
		self.dv_reference_previous_btn.Enable(False)
		self.dv_reference_next_btn.SetMinSize((38, 38))
		self.dv_reference_next_btn.SetToolTip("Go forward")
		self.dv_reference_next_btn.Enable(False)
		self.dv_reference_png_button.SetMinSize((45, -1))
		self.dv_reference_svg_button.SetMinSize((45, -1))
		self.dv_reference_pdf_button.SetMinSize((45, -1))
		self.dv_reference_save_btn.SetMinSize((38, 38))
		self.dv_reference_toolbar.SetMaxSize((10000000,40))
		self.dv_samples_focus_thief.SetMinSize((1, 1))
		self.dv_samples_previous_btn.SetMinSize((38, 38))
		self.dv_samples_previous_btn.SetToolTip("Go back")
		self.dv_samples_next_btn.SetMinSize((38, 38))
		self.dv_samples_next_btn.SetToolTip("Go forward")
		self.dv_samples_png_button.SetMinSize((45, -1))
		self.dv_samples_svg_button.SetMinSize((45, -1))
		self.dv_samples_pdf_button.SetMinSize((45, -1))
		self.dv_samples_save_btn.SetMinSize((38, 38))
		self.dv_samples_toolbar.SetMaxSize((10000000,40))
		self.dv_head2tail_focus_thief.SetMinSize((1, 1))
		self.dv_head2tail_previous_btn.SetMinSize((38, 38))
		self.dv_head2tail_previous_btn.SetToolTip("Go back")
		self.dv_head2tail_next_btn.SetMinSize((38, 38))
		self.dv_head2tail_next_btn.SetToolTip("Go forward")
		self.dv_head2tail_png_button.SetMinSize((45, -1))
		self.dv_head2tail_svg_button.SetMinSize((45, -1))
		self.dv_head2tail_pdf_button.SetMinSize((45, -1))
		self.dv_head2tail_save_btn.SetMinSize((38, 38))
		self.dv_head2tail_toolbar.SetMaxSize((10000000,40))
		self.data_viewer_h_splitter.SetMinimumPaneSize(40)
		self.data_viewer_v_splitter.SetMinimumPaneSize(20)
		self.comparison_left_picker.SetMinSize((171, -1))
		self.comparison_left_browse_btn.SetMinSize((29, 29))
		self.comparison_left_header.SetMinSize((200, 160))
		self.comparison_right_picker.SetMinSize((171, -1))
		self.comparison_right_browse_btn.SetMinSize((29, 29))
		self.comparison_right_header.SetMinSize((200, 160))
		self.comparison_alignment_Dw_value.SetMinSize((120, 29))
		self.comparison_alignment_Dw_value.SetIncrement(0.01)
		self.comparison_alignment_Gw_value.SetMinSize((120, 29))
		self.comparison_alignment_Gw_value.SetIncrement(0.01)
		self.comparison_alignment_min_peaks_value.SetMinSize((120, 29))
		self.significance_level_value.SetIncrement(0.001)
		self.run_comparison_button.Enable(False)
		self.comparison_radar_button.Enable(False)
		self.comparison_mean_pa_button.Enable(False)
		self.comparison_box_whisker_btn.Enable(False)
		self.comparison_pca_btn.Enable(False)
		self.comparison_pca_btn.SetLabel("Principal\nComponent\nAnalysis")
		self.help_focus_thief.SetMinSize((1, 1))
		self.help_back_btn.SetMinSize((38, 38))
		self.help_back_btn.SetToolTip("Go back")
		self.help_forward_btn.SetMinSize((38, 38))
		self.help_forward_btn.SetToolTip("Go forward")
		self.help_home_btn.SetMinSize((38, 38))
		self.help_home_btn.SetToolTip("Open the homepage")
		self.help_url_text_ctrl.SetMinSize((380, -1))
		self.help_go_btn.SetMinSize((38, 38))
		self.help_go_btn.SetToolTip("Go to URL")
		self.help_readme_btn.SetMinSize((38, 38))
		self.help_readme_btn.SetToolTip("View Readme")
		self.help_github_btn.SetMinSize((38, 38))
		self.help_github_btn.SetToolTip("View GitHub page")
		self.help_toolbar_panel.SetMaxSize((10000000,40))
		self.notebook_1.SetBackgroundColour(wx.Colour(240, 240, 240))
		# end wxGlade
		
		log_font = wx.Font(12, wx.FONTFAMILY_TELETYPE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "FreeMono")
		
		self.import_log_text_control.SetFont(log_font)
		self.project_log_text_control.SetFont(log_font)
		self.comparison_log_text_control.SetFont(log_font)

	def __do_layout(self):
		# begin wxGlade: Launcher.__do_layout
		parent_sizer = wx.BoxSizer(wx.VERTICAL)
		help_parent_sizer = wx.BoxSizer(wx.VERTICAL)
		help_main_sizer = wx.BoxSizer(wx.VERTICAL)
		help_toolbar_sizer = wx.BoxSizer(wx.HORIZONTAL)
		comparison_parent_sizer = wx.BoxSizer(wx.VERTICAL)
		comparison_sizer = wx.BoxSizer(wx.HORIZONTAL)
		comparison_log_sizer = wx.BoxSizer(wx.VERTICAL)
		comparison_option_sizer = wx.BoxSizer(wx.VERTICAL)
		comparison_settings_grid = wx.FlexGridSizer(1, 3, 10, 10)
		comparison_button_sizer = wx.BoxSizer(wx.VERTICAL)
		comparison_settings_sizer = wx.BoxSizer(wx.VERTICAL)
		comparison_settings_button_sizer = wx.BoxSizer(wx.HORIZONTAL)
		comparison_alignment_grid = wx.FlexGridSizer(3, 2, 0, 0)
		comparison_alignment_Dw_sizer = wx.BoxSizer(wx.HORIZONTAL)
		comparison_pickers_grid = wx.FlexGridSizer(1, 3, 10, 10)
		comparison_right = wx.BoxSizer(wx.VERTICAL)
		comparison_right_picker_sizer = wx.BoxSizer(wx.HORIZONTAL)
		comparison_left = wx.BoxSizer(wx.VERTICAL)
		comparison_left_picker_sizer = wx.BoxSizer(wx.HORIZONTAL)
		browse_project_tab_sizer = wx.BoxSizer(wx.VERTICAL)
		data_viewer_sizer = wx.BoxSizer(wx.VERTICAL)
		dv_main_sizer = wx.BoxSizer(wx.HORIZONTAL)
		dv_data_sizer = wx.BoxSizer(wx.HORIZONTAL)
		dv_html_sizer = wx.BoxSizer(wx.HORIZONTAL)
		dv_spec_sizer = wx.BoxSizer(wx.VERTICAL)
		dv_head2tail_main_sizer = wx.BoxSizer(wx.VERTICAL)
		dv_head2tail_toolbar_sizer = wx.BoxSizer(wx.HORIZONTAL)
		dv_head2tail_sizer = wx.BoxSizer(wx.VERTICAL)
		dv_sample_main_sizer = wx.BoxSizer(wx.VERTICAL)
		dv_samples_toolbar_sizer = wx.BoxSizer(wx.HORIZONTAL)
		dv_samples_sizer = wx.BoxSizer(wx.VERTICAL)
		dv_reference_main_sizer = wx.BoxSizer(wx.VERTICAL)
		dv_reference_toolbar_sizer = wx.BoxSizer(wx.HORIZONTAL)
		dv_reference_sizer = wx.BoxSizer(wx.VERTICAL)
		dv_list_sizer = wx.BoxSizer(wx.HORIZONTAL)
		dv_toolbar_sizer = wx.BoxSizer(wx.HORIZONTAL)
		browse_project_chromatogram_sizer = wx.BoxSizer(wx.VERTICAL)
		chromatogram_main_sizer = wx.BoxSizer(wx.VERTICAL)
		chrom_toolbar_sizer = wx.BoxSizer(wx.HORIZONTAL)
		browse_project_charts_sizer = wx.BoxSizer(wx.VERTICAL)
		open_project_body_sizer = wx.GridSizer(2, 3, 5, 5)
		chromatogram_sizer = wx.BoxSizer(wx.VERTICAL)
		peak_area_sizer = wx.BoxSizer(wx.VERTICAL)
		box_whisker_sizer = wx.BoxSizer(wx.VERTICAL)
		open_project_header_sizer = wx.BoxSizer(wx.VERTICAL)
		mean_peak_area_sizer = wx.BoxSizer(wx.VERTICAL)
		radar_chart_sizer = wx.BoxSizer(wx.VERTICAL)
		charts_toolbar_sizer = wx.BoxSizer(wx.HORIZONTAL)
		new_project_tab_sizer = wx.BoxSizer(wx.HORIZONTAL)
		project_log_tab_sizer = wx.BoxSizer(wx.HORIZONTAL)
		project_log_sizer = wx.BoxSizer(wx.VERTICAL)
		project_queue_tab_sizer = wx.BoxSizer(wx.HORIZONTAL)
		project_queue_sizer = wx.BoxSizer(wx.VERTICAL)
		project_queue_btn_sizer = wx.BoxSizer(wx.HORIZONTAL)
		project_settings_sizer = wx.BoxSizer(wx.HORIZONTAL)
		new_project_settings_v_sizer = wx.BoxSizer(wx.VERTICAL)
		new_project_settings_grid_sizer = wx.FlexGridSizer(9, 3, 10, 10)
		new_project_button_sizer = wx.BoxSizer(wx.VERTICAL)
		project_settings_run_sizer = wx.BoxSizer(wx.HORIZONTAL)
		project_settings_button_sizer = wx.BoxSizer(wx.HORIZONTAL)
		new_project_steps_sizer = wx.GridSizer(4, 2, 0, 0)
		pretty_name_sizer = wx.BoxSizer(wx.VERTICAL)
		pretty_name_value_sizer = wx.BoxSizer(wx.HORIZONTAL)
		range_sizer = wx.BoxSizer(wx.VERTICAL)
		target_range_grid_sizer = wx.FlexGridSizer(1, 4, 0, 0)
		tophat_grid_sizer = wx.FlexGridSizer(1, 3, 0, 0)
		noise_thresh_grid_sizer_copy = wx.FlexGridSizer(1, 3, 0, 0)
		filter_sizer = wx.BoxSizer(wx.VERTICAL)
		mass_range_sizer = wx.BoxSizer(wx.VERTICAL)
		alignment_sizer = wx.BoxSizer(wx.VERTICAL)
		alignment_grid_sizer = wx.GridSizer(3, 2, 0, 0)
		alignment_Dw_sizer = wx.BoxSizer(wx.HORIZONTAL)
		bb_sizer = wx.BoxSizer(wx.VERTICAL)
		bb_grid_sizer = wx.GridSizer(2, 2, 0, 0)
		new_project_picker_sizer = wx.BoxSizer(wx.VERTICAL)
		import_tab_sizer = wx.BoxSizer(wx.HORIZONTAL)
		import_log_sizer = wx.BoxSizer(wx.VERTICAL)
		import_picker_sizer = wx.BoxSizer(wx.VERTICAL)
		launcher_parent_sizer = wx.BoxSizer(wx.HORIZONTAL)
		launcher_right_sizer = wx.BoxSizer(wx.VERTICAL)
		messages_sizer = wx.BoxSizer(wx.VERTICAL)
		launcher_sizer = wx.BoxSizer(wx.HORIZONTAL)
		launcher_grid = wx.GridSizer(4, 3, 20, 20)
		launcher_grid.Add(self.import_raw_button, 0, wx.ALIGN_CENTER, 64)
		import_description_label = wx.StaticText(self.launcher_parent_panel, wx.ID_ANY, "Import PerkinElmer/Waters .RAW files and convert to JCAMP-DX format.", style=wx.ALIGN_LEFT)
		import_description_label.Wrap(256)
		launcher_grid.Add(import_description_label, 0, wx.ALIGN_CENTER_VERTICAL, 64)
		launcher_grid.Add(self.import_info_button, 0, wx.ALIGN_CENTER, 1)
		launcher_grid.Add(self.new_project_button, 0, wx.ALIGN_CENTER, 64)
		new_project_description_label = wx.StaticText(self.launcher_parent_panel, wx.ID_ANY, "Create a new project for a set of samples, performing pre-processing before extracting spectra and generating reports.", style=wx.ALIGN_LEFT)
		new_project_description_label.Wrap(256)
		launcher_grid.Add(new_project_description_label, 0, wx.ALIGN_CENTER_VERTICAL, 64)
		launcher_grid.Add(self.new_info_button, 0, wx.ALIGN_CENTER, 1)
		launcher_grid.Add(self.open_project_button, 0, wx.ALIGN_CENTER, 64)
		open_project_description_label = wx.StaticText(self.launcher_parent_panel, wx.ID_ANY, "Open an existing project for viewing", style=wx.ALIGN_LEFT)
		open_project_description_label.Wrap(256)
		launcher_grid.Add(open_project_description_label, 0, wx.ALIGN_CENTER_VERTICAL, 64)
		launcher_grid.Add(self.open_info_button, 0, wx.ALIGN_CENTER, 0)
		launcher_grid.Add(self.comparison_button, 0, wx.ALIGN_CENTER, 64)
		comparison_description_label = wx.StaticText(self.launcher_parent_panel, wx.ID_ANY, "Compare two projects", style=wx.ALIGN_LEFT)
		comparison_description_label.Wrap(256)
		launcher_grid.Add(comparison_description_label, 0, wx.ALIGN_CENTER_VERTICAL, 64)
		launcher_grid.Add(self.comparison_info_button, 0, wx.ALIGN_CENTER, 1)
		launcher_sizer.Add(launcher_grid, 0, wx.ALIGN_CENTER | wx.BOTTOM | wx.EXPAND | wx.TOP, 10)
		self.launcher_parent_panel.SetSizer(launcher_sizer)
		launcher_parent_sizer.Add(self.launcher_parent_panel, 3, wx.ALIGN_CENTER | wx.ALL | wx.EXPAND, 10)
		messages_label = wx.StaticText(self.messages_panel, wx.ID_ANY, "Messages")
		messages_label.SetFont(wx.Font(16, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
		messages_sizer.Add(messages_label, 0, wx.ALL, 5)
		messages_sizer.Add(self.messages, 1, wx.EXPAND, 0)
		self.messages_panel.SetSizer(messages_sizer)
		launcher_right_sizer.Add(self.messages_panel, 1, wx.ALL | wx.EXPAND, 5)
		self.launcher_right_panel.SetSizer(launcher_right_sizer)
		launcher_parent_sizer.Add(self.launcher_right_panel, 2, wx.BOTTOM | wx.EXPAND | wx.RIGHT | wx.TOP, 10)
		self.Launcher.SetSizer(launcher_parent_sizer)
		import_picker_label = wx.StaticText(self.import_picker_panel, wx.ID_ANY, ".RAW Files to Import")
		import_picker_sizer.Add(import_picker_label, 0, wx.BOTTOM, 18)
		import_picker_sizer.Add(self.check_list_box_1, 1, wx.BOTTOM | wx.EXPAND, 7)
		import_picker_sizer.Add(self.import_btn, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RIGHT, 9)
		self.import_picker_panel.SetSizer(import_picker_sizer)
		import_tab_sizer.Add(self.import_picker_panel, 4, wx.ALL | wx.EXPAND, 10)
		import_log_label = wx.StaticText(self.import_log_panel, wx.ID_ANY, "Log:")
		import_log_sizer.Add(import_log_label, 0, wx.TOP, 5)
		import_log_sizer.Add(self.import_log_text_control, 4, wx.EXPAND | wx.TOP, 5)
		self.import_log_panel.SetSizer(import_log_sizer)
		import_tab_sizer.Add(self.import_log_panel, 5, wx.ALL | wx.EXPAND, 10)
		self.Import.SetSizer(import_tab_sizer)
		new_project_picker_label = wx.StaticText(self.new_project_picker_panel, wx.ID_ANY, "Samples to Process: ")
		new_project_picker_sizer.Add(new_project_picker_label, 0, wx.BOTTOM, 18)
		new_project_picker_sizer.Add(self.check_list_box_2, 1, wx.BOTTOM | wx.EXPAND, 7)
		new_project_picker_sizer.Add(self.new_project_delete_btn, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RIGHT, 9)
		self.new_project_picker_panel.SetSizer(new_project_picker_sizer)
		project_settings_sizer.Add(self.new_project_picker_panel, 5, wx.ALL | wx.EXPAND, 10)
		bb_top_text = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Settings for Biller and Biemann Peak Detection")
		bb_top_text.SetToolTip("Settings for PyMS implementation of BillerBiemann peak detection")
		bb_sizer.Add(bb_top_text, 0, 0, 0)
		bb_points_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Number of Points: ")
		bb_points_label.SetToolTip("The window width, in data points, for detecting the local maxima")
		bb_grid_sizer.Add(bb_points_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		bb_grid_sizer.Add(self.bb_points_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		bb_scans_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Number of Scans: ")
		bb_scans_label.SetToolTip("The number of scans across which neighbouring, apexing, ions are combined and considered as belonging to the same peak")
		bb_grid_sizer.Add(bb_scans_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		bb_grid_sizer.Add(self.bb_scans_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		bb_sizer.Add(bb_grid_sizer, 1, wx.ALL | wx.EXPAND, 5)
		new_project_settings_grid_sizer.Add(bb_sizer, 1, wx.EXPAND, 0)
		new_project_v_line_1 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		new_project_settings_grid_sizer.Add(new_project_v_line_1, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 2)
		alignment_top_text = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Settings for Dynamic Peak Alignment")
		alignment_top_text.SetToolTip("Settings for PyMS Dynamic Peak Alignment")
		alignment_sizer.Add(alignment_top_text, 0, 0, 0)
		alignment_Dw_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "RT Modulation: ")
		alignment_grid_sizer.Add(alignment_Dw_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_Dw_sizer.Add(self.alignment_Dw_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_Dw_label_2 = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, " s", style=wx.ALIGN_LEFT)
		alignment_Dw_sizer.Add(alignment_Dw_label_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_grid_sizer.Add(alignment_Dw_sizer, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
		alignment_Gw_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Gap Penalty: ")
		alignment_grid_sizer.Add(alignment_Gw_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_grid_sizer.Add(self.alignment_Gw_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_min_peaks_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Min Peaks: ")
		alignment_grid_sizer.Add(alignment_min_peaks_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_grid_sizer.Add(self.alignment_min_peaks_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_sizer.Add(alignment_grid_sizer, 1, wx.ALL | wx.EXPAND, 5)
		new_project_settings_grid_sizer.Add(alignment_sizer, 1, wx.EXPAND, 0)
		new_project_h_line_1 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_grid_sizer.Add(new_project_h_line_1, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
		new_project_settings_grid_sizer.Add((0, 0), 0, 0, 0)
		new_project_h_line_3 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_grid_sizer.Add(new_project_h_line_3, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
		mass_range_top_text = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Mass Range:   (min, max)")
		mass_range_sizer.Add(mass_range_top_text, 0, 0, 5)
		mass_range_sizer.Add(self.mass_range_value, 0, wx.BOTTOM | wx.RIGHT | wx.TOP, 6)
		mass_range_text_bottom = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "This must be small enough to encompass all samples")
		mass_range_sizer.Add(mass_range_text_bottom, 0, wx.BOTTOM | wx.LEFT, 10)
		new_project_settings_grid_sizer.Add(mass_range_sizer, 1, wx.EXPAND, 0)
		new_project_v_line_4 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		new_project_settings_grid_sizer.Add(new_project_v_line_4, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 2)
		base_peak_filter_text_1 = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Exclude peaks with the following base ion(s):")
		base_peak_filter_text_1.SetToolTip("Peaks with these base ions (i.e. the most intense peak in the mass spectrum) will be excluded from the results. This can be useful for excluding compounds related to septum bleed, which usually have a base ion at m/z 73")
		filter_sizer.Add(base_peak_filter_text_1, 0, 0, 0)
		filter_sizer.Add(self.base_peak_filter_value, 0, wx.BOTTOM | wx.RIGHT | wx.TOP, 6)
		base_peak_filter_text_2 = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Seperate multiple values with commas ( , )")
		base_peak_filter_text_2.SetToolTip("Peaks with these base ions (i.e. the most intense peak in the mass spectrum) will be excluded from the results. This can be useful for excluding compounds related to septum bleed, which usually have a base ion at m/z 73")
		filter_sizer.Add(base_peak_filter_text_2, 0, wx.BOTTOM | wx.LEFT, 10)
		new_project_settings_grid_sizer.Add(filter_sizer, 1, wx.EXPAND, 0)
		new_project_h_line_4 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_grid_sizer.Add(new_project_h_line_4, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
		new_project_settings_grid_sizer.Add((0, 0), 0, 0, 0)
		new_project_h_line_5 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_grid_sizer.Add(new_project_h_line_5, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
		noise_thresh_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Noise Filtering Threshold: ")
		noise_thresh_grid_sizer_copy.Add(noise_thresh_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		noise_thresh_grid_sizer_copy.Add(self.noise_thresh_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		noise_thresh_ions = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "ions")
		noise_thresh_grid_sizer_copy.Add(noise_thresh_ions, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		new_project_settings_grid_sizer.Add(noise_thresh_grid_sizer_copy, 1, wx.EXPAND, 5)
		new_project_v_line_6 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		new_project_settings_grid_sizer.Add(new_project_v_line_6, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 2)
		tophat_struct_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Tophat Structural Element: ")
		tophat_struct_label.SetToolTip("Structural element for PyMS Tophat baseline correction. The structural element needs to be larger than the features one wants to retain in the spectrum after the top-hat transform")
		tophat_grid_sizer.Add(tophat_struct_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		tophat_grid_sizer.Add(self.tophat_struct_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		tophat_grid_sizer.Add(self.tophat_struct_units, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		new_project_settings_grid_sizer.Add(tophat_grid_sizer, 1, wx.EXPAND, 5)
		new_project_h_line_6 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_grid_sizer.Add(new_project_h_line_6, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
		new_project_settings_grid_sizer.Add((0, 0), 0, 0, 0)
		new_project_h_line_7 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_grid_sizer.Add(new_project_h_line_7, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
		target_range_top_text = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Search for peaks between these times:")
		range_sizer.Add(target_range_top_text, 0, 0, 5)
		target_range_grid_sizer.Add(self.target_range_min_value, 0, 0, 0)
		target_mid_text = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "minutes and ")
		target_range_grid_sizer.Add(target_mid_text, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		target_range_grid_sizer.Add(self.target_range_max_value, 0, 0, 0)
		target_post_text = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "minutes")
		target_range_grid_sizer.Add(target_post_text, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		range_sizer.Add(target_range_grid_sizer, 1, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, 5)
		new_project_settings_grid_sizer.Add(range_sizer, 1, wx.EXPAND, 0)
		new_project_v_line_7 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		new_project_settings_grid_sizer.Add(new_project_v_line_7, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 2)
		pretty_name_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "(Optional) Human-Readable Name:")
		pretty_name_sizer.Add(pretty_name_label, 0, wx.BOTTOM, 5)
		pretty_name_value_sizer.Add(self.pretty_name_value, 0, 0, 0)
		pretty_name_value_sizer.Add(self.pretty_name_clear, 0, 0, 0)
		pretty_name_sizer.Add(pretty_name_value_sizer, 1, wx.EXPAND, 0)
		new_project_settings_grid_sizer.Add(pretty_name_sizer, 1, wx.EXPAND, 0)
		new_project_h_line_8 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_grid_sizer.Add(new_project_h_line_8, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
		new_project_settings_grid_sizer.Add((0, 0), 0, 0, 0)
		new_project_h_line_9 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_grid_sizer.Add(new_project_h_line_9, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 2)
		steps_label = wx.StaticText(self.new_project_settings_panel, wx.ID_ANY, "Processing Steps: ")
		new_project_steps_sizer.Add(steps_label, 0, 0, 0)
		new_project_steps_sizer.Add((0, 0), 0, 0, 0)
		new_project_steps_sizer.Add(self.project_quantitative, 0, 0, 0)
		new_project_steps_sizer.Add(self.project_merge, 0, 0, 0)
		new_project_steps_sizer.Add(self.project_qualitative, 0, 0, 0)
		new_project_steps_sizer.Add(self.project_counter, 0, 0, 0)
		new_project_steps_sizer.Add(self.project_spectra, 0, wx.TOP, 5)
		new_project_steps_sizer.Add(self.project_charts, 0, wx.TOP, 7)
		new_project_settings_grid_sizer.Add(new_project_steps_sizer, 1, wx.EXPAND, 0)
		new_project_v_line_8 = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		new_project_settings_grid_sizer.Add(new_project_v_line_8, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 2)
		project_settings_button_sizer.Add(self.import_apply_btn, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RIGHT, 9)
		project_settings_button_sizer.Add(self.default, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RIGHT, 9)
		project_settings_button_sizer.Add(self.reset, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RIGHT, 9)
		new_project_button_sizer.Add(project_settings_button_sizer, 1, wx.ALIGN_RIGHT, 20)
		project_settings_run_sizer.Add(self.queue_btn, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RIGHT | wx.TOP, 9)
		project_settings_run_sizer.Add(self.run_btn, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RIGHT | wx.TOP, 9)
		new_project_button_sizer.Add(project_settings_run_sizer, 1, wx.ALIGN_RIGHT, 0)
		new_project_settings_grid_sizer.Add(new_project_button_sizer, 1, wx.EXPAND, 0)
		new_project_settings_v_sizer.Add(new_project_settings_grid_sizer, 1, wx.EXPAND, 0)
		new_project_line = wx.StaticLine(self.new_project_settings_panel, wx.ID_ANY)
		new_project_settings_v_sizer.Add(new_project_line, 0, wx.EXPAND | wx.TOP, 10)
		self.new_project_settings_panel.SetSizer(new_project_settings_v_sizer)
		project_settings_sizer.Add(self.new_project_settings_panel, 5, wx.ALL | wx.EXPAND, 10)
		self.new_project_settings.SetSizer(project_settings_sizer)
		project_queue_label = wx.StaticText(self.project_queue_panel, wx.ID_ANY, "Queue:")
		project_queue_sizer.Add(project_queue_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 5)
		project_queue_sizer.Add(self.project_queue_grid, 14, wx.BOTTOM | wx.EXPAND | wx.TOP, 4)
		project_queue_btn_sizer.Add(self.project_queue_clear_btn, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		project_queue_btn_sizer.Add(self.project_queue_delete_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 5)
		project_queue_btn_sizer.Add(self.project_queue_save_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 50)
		project_queue_btn_sizer.Add(self.project_queue_load_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 5)
		project_queue_btn_sizer.Add(self.project_queue_run_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT | wx.LEFT, 50)
		project_queue_sizer.Add(project_queue_btn_sizer, 1, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT, 0)
		self.project_queue_panel.SetSizer(project_queue_sizer)
		project_queue_tab_sizer.Add(self.project_queue_panel, 1, wx.ALL | wx.EXPAND, 10)
		self.new_project_queue.SetSizer(project_queue_tab_sizer)
		project_log_label = wx.StaticText(self.project_log_panel, wx.ID_ANY, "Log:")
		project_log_sizer.Add(project_log_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 5)
		project_log_sizer.Add(self.project_log_text_control, 4, wx.EXPAND | wx.TOP, 5)
		project_log_sizer.Add(self.project_log_save_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
		self.project_log_panel.SetSizer(project_log_sizer)
		project_log_tab_sizer.Add(self.project_log_panel, 1, wx.ALL | wx.EXPAND, 10)
		self.new_project_log.SetSizer(project_log_tab_sizer)
		self.new_project_notebook.AddPage(self.new_project_settings, "Settings")
		self.new_project_notebook.AddPage(self.new_project_queue, "Queue")
		self.new_project_notebook.AddPage(self.new_project_log, "Log")
		new_project_tab_sizer.Add(self.new_project_notebook, 1, wx.EXPAND, 0)
		self.New_Project.SetSizer(new_project_tab_sizer)
		charts_toolbar_sizer.Add(self.charts_focus_thief, 0, 0, 0)
		charts_toolbar_sizer.Add(self.charts_CloseProject, 0, 0, 0)
		chrom_toolbar_spacer_3 = wx.StaticLine(self.charts_toolbar, wx.ID_ANY, style=wx.LI_VERTICAL)
		charts_toolbar_sizer.Add(chrom_toolbar_spacer_3, 0, wx.EXPAND, 0)
		charts_toolbar_sizer.Add((0, 0), 0, 0, 0)
		charts_toolbar_sizer.Add((0, 0), 0, 0, 0)
		self.charts_toolbar.SetSizer(charts_toolbar_sizer)
		browse_project_charts_sizer.Add(self.charts_toolbar, 1, wx.EXPAND, 0)
		radar_chart_label = wx.StaticText(self.open_project_body_panel, wx.ID_ANY, "Radar Chart", style=wx.ALIGN_CENTER)
		radar_chart_sizer.Add(radar_chart_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 25)
		radar_chart_sizer.Add(self.radar_chart_button, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		open_project_body_sizer.Add(radar_chart_sizer, 1, wx.EXPAND | wx.TOP, 10)
		mean_peak_area_label = wx.StaticText(self.open_project_body_panel, wx.ID_ANY, "Mean Peak Area")
		mean_peak_area_sizer.Add(mean_peak_area_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 25)
		mean_peak_area_sizer.Add(self.mean_peak_area_button, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		open_project_body_sizer.Add(mean_peak_area_sizer, 1, wx.EXPAND | wx.TOP, 10)
		open_project_header_info_label = wx.StaticText(self.open_project_body_panel, wx.ID_ANY, "Samples in this Project:", style=wx.ALIGN_LEFT)
		open_project_header_sizer.Add(open_project_header_info_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 25)
		open_project_header_sizer.Add(self.open_project_header_browser, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.TOP, 5)
		open_project_body_sizer.Add(open_project_header_sizer, 1, wx.EXPAND | wx.TOP, 10)
		box_whisker_label = wx.StaticText(self.open_project_body_panel, wx.ID_ANY, "Box & Whisker Plot", style=wx.ALIGN_CENTER)
		box_whisker_sizer.Add(box_whisker_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 25)
		box_whisker_sizer.Add(self.box_whisker_button, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		open_project_body_sizer.Add(box_whisker_sizer, 1, wx.EXPAND, 0)
		peak_area_label = wx.StaticText(self.open_project_body_panel, wx.ID_ANY, "Peak Area", style=wx.ALIGN_CENTER)
		peak_area_sizer.Add(peak_area_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 25)
		peak_area_sizer.Add(self.peak_area_button, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		open_project_body_sizer.Add(peak_area_sizer, 1, wx.EXPAND, 0)
		chromatogram_label = wx.StaticText(self.open_project_body_panel, wx.ID_ANY, "Chromatogram")
		chromatogram_sizer.Add(chromatogram_label, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		chromatogram_sizer.Add(self.chromatogram_button, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		open_project_body_sizer.Add(chromatogram_sizer, 1, wx.EXPAND, 0)
		self.open_project_body_panel.SetSizer(open_project_body_sizer)
		browse_project_charts_sizer.Add(self.open_project_body_panel, 7, wx.EXPAND, 10)
		self.browse_project_charts.SetSizer(browse_project_charts_sizer)
		chrom_toolbar_sizer.Add(self.focus_thief, 0, 0, 0)
		chrom_toolbar_sizer.Add(self.CloseProject, 0, 0, 0)
		chrom_toolbar_sizer.Add(self.OpenSample, 0, 0, 0)
		chrom_toolbar_spacer_1 = wx.StaticLine(self.chromatogram_toolbar, wx.ID_ANY, style=wx.LI_VERTICAL)
		chrom_toolbar_sizer.Add(chrom_toolbar_spacer_1, 0, wx.EXPAND, 0)
		chrom_toolbar_sizer.Add(self.ViewPeakList, 0, 0, 0)
		chrom_toolbar_sizer.Add(self.PreviousSample, 0, 0, 0)
		chrom_toolbar_sizer.Add(self.NextSample, 0, 0, 0)
		chrom_toolbar_spacer_2 = wx.StaticLine(self.chromatogram_toolbar, wx.ID_ANY, style=wx.LI_VERTICAL)
		chrom_toolbar_sizer.Add(chrom_toolbar_spacer_2, 0, wx.EXPAND, 0)
		chrom_toolbar_sizer.Add(self.chrom_ResetView, 0, 0, 0)
		chrom_toolbar_sizer.Add(self.chrom_PreviousView, 0, 0, 0)
		chrom_toolbar_sizer.Add(self.chrom_Zoom_Btn, 0, 0, 0)
		chrom_toolbar_sizer.Add(self.chrom_Pan_Btn, 0, 0, 0)
		chrom_toolbar_sizer.Add(self.ViewSpectrum_Btn, 0, 0, 0)
		chrom_toolbar_spacer_4 = wx.StaticLine(self.chromatogram_toolbar, wx.ID_ANY, style=wx.LI_VERTICAL)
		chrom_toolbar_sizer.Add(chrom_toolbar_spacer_4, 0, wx.EXPAND, 0)
		chrom_toolbar_sizer.Add(self.config_borders_button, 0, wx.ALIGN_CENTER | wx.LEFT | wx.RIGHT, 5)
		chrom_toolbar_spacer_5 = wx.StaticLine(self.chromatogram_toolbar, wx.ID_ANY, style=wx.LI_VERTICAL)
		chrom_toolbar_sizer.Add(chrom_toolbar_spacer_5, 0, wx.EXPAND, 0)
		chrom_save_label = wx.StaticText(self.chromatogram_toolbar, wx.ID_ANY, "Save: ")
		chrom_toolbar_sizer.Add(chrom_save_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 5)
		chrom_toolbar_sizer.Add(self.chrom_png_button, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		chrom_toolbar_sizer.Add(self.chrom_svg_button, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		chrom_toolbar_sizer.Add(self.chrom_pdf_button, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		chrom_toolbar_sizer.Add(self.chrom_save_btn, 0, 0, 0)
		chrom_toolbar_sizer.Add((0, 0), 0, 0, 0)
		chrom_toolbar_sizer.Add((0, 0), 0, 0, 0)
		chrom_toolbar_sizer.Add((0, 0), 0, 0, 0)
		self.chromatogram_toolbar.SetSizer(chrom_toolbar_sizer)
		browse_project_chromatogram_sizer.Add(self.chromatogram_toolbar, 1, wx.EXPAND, 0)
		chromatogram_main_sizer.Add(self.chromatogram_canvas, 1, wx.EXPAND, 0)
		self.chromatogram_parent_panel.SetSizer(chromatogram_main_sizer)
		browse_project_chromatogram_sizer.Add(self.chromatogram_parent_panel, 1, wx.EXPAND, 10)
		self.browse_project_chromatogram.SetSizer(browse_project_chromatogram_sizer)
		dv_toolbar_sizer.Add(self.dv_focus_thief, 0, 0, 0)
		dv_toolbar_sizer.Add(self.dv_CloseProject, 0, 0, 0)
		dv_toolbar_spacer_1 = wx.StaticLine(self.dv_toolbar, wx.ID_ANY, style=wx.LI_VERTICAL)
		dv_toolbar_spacer_1.SetMinSize((-1, 38))
		dv_toolbar_sizer.Add(dv_toolbar_spacer_1, 0, wx.BOTTOM | wx.EXPAND, 5)
		dv_toolbar_sizer.Add((0, 0), 0, 0, 0)
		dv_toolbar_sizer.Add((0, 0), 0, 0, 0)
		self.dv_toolbar.SetSizer(dv_toolbar_sizer)
		data_viewer_sizer.Add(self.dv_toolbar, 1, wx.EXPAND, 0)
		dv_list_sizer.Add(self.data_viewer_list, 1, wx.EXPAND | wx.LEFT | wx.TOP, 5)
		dv_list_line = wx.StaticLine(self.dv_list_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		dv_list_sizer.Add(dv_list_line, 0, wx.EXPAND, 0)
		self.dv_list_panel.SetSizer(dv_list_sizer)
		dv_reference_sizer.Add(self.dv_reference_spec_canvas, 1, wx.EXPAND, 0)
		self.dv_reference_panel.SetSizer(dv_reference_sizer)
		dv_reference_main_sizer.Add(self.dv_reference_panel, 1, wx.EXPAND, 10)
		dv_reference_toolbar_sizer.Add(self.dv_reference_focus_thief, 0, 0, 0)
		dv_reference_toolbar_sizer.Add(self.dv_reference_previous_btn, 0, 0, 0)
		dv_reference_toolbar_sizer.Add(self.dv_reference_next_btn, 0, 0, 0)
		dv_reference_toolbar_spacer_1 = wx.StaticLine(self.dv_reference_toolbar, wx.ID_ANY, style=wx.LI_VERTICAL)
		dv_reference_toolbar_sizer.Add(dv_reference_toolbar_spacer_1, 0, wx.EXPAND, 0)
		dv_reference_save_label = wx.StaticText(self.dv_reference_toolbar, wx.ID_ANY, "Save: ")
		dv_reference_toolbar_sizer.Add(dv_reference_save_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 5)
		dv_reference_toolbar_sizer.Add(self.dv_reference_png_button, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		dv_reference_toolbar_sizer.Add(self.dv_reference_svg_button, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		dv_reference_toolbar_sizer.Add(self.dv_reference_pdf_button, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		dv_reference_toolbar_sizer.Add(self.dv_reference_save_btn, 0, 0, 0)
		dv_reference_toolbar_spacer_2 = wx.StaticLine(self.dv_reference_toolbar, wx.ID_ANY, style=wx.LI_VERTICAL)
		dv_reference_toolbar_sizer.Add(dv_reference_toolbar_spacer_2, 0, wx.EXPAND, 0)
		self.dv_reference_toolbar.SetSizer(dv_reference_toolbar_sizer)
		dv_reference_main_sizer.Add(self.dv_reference_toolbar, 0, wx.EXPAND, 0)
		self.data_viewer_reference.SetSizer(dv_reference_main_sizer)
		dv_samples_sizer.Add(self.dv_samples_spec_canvas, 1, wx.EXPAND, 0)
		self.dv_samples_panel.SetSizer(dv_samples_sizer)
		dv_sample_main_sizer.Add(self.dv_samples_panel, 1, wx.EXPAND, 10)
		dv_samples_toolbar_sizer.Add(self.dv_samples_focus_thief, 0, 0, 0)
		dv_samples_toolbar_sizer.Add(self.dv_samples_previous_btn, 0, 0, 0)
		dv_samples_toolbar_sizer.Add(self.dv_samples_next_btn, 0, 0, 0)
		dv_samples_toolbar_spacer_1 = wx.StaticLine(self.dv_samples_toolbar, wx.ID_ANY, style=wx.LI_VERTICAL)
		dv_samples_toolbar_sizer.Add(dv_samples_toolbar_spacer_1, 0, wx.EXPAND, 0)
		dv_samples_save_label = wx.StaticText(self.dv_samples_toolbar, wx.ID_ANY, "Save: ")
		dv_samples_toolbar_sizer.Add(dv_samples_save_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 5)
		dv_samples_toolbar_sizer.Add(self.dv_samples_png_button, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		dv_samples_toolbar_sizer.Add(self.dv_samples_svg_button, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		dv_samples_toolbar_sizer.Add(self.dv_samples_pdf_button, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		dv_samples_toolbar_sizer.Add(self.dv_samples_save_btn, 0, 0, 0)
		dv_samples_toolbar_spacer_2 = wx.StaticLine(self.dv_samples_toolbar, wx.ID_ANY, style=wx.LI_VERTICAL)
		dv_samples_toolbar_sizer.Add(dv_samples_toolbar_spacer_2, 0, wx.EXPAND, 0)
		self.dv_samples_toolbar.SetSizer(dv_samples_toolbar_sizer)
		dv_sample_main_sizer.Add(self.dv_samples_toolbar, 0, wx.EXPAND, 0)
		self.data_viewer_samples.SetSizer(dv_sample_main_sizer)
		dv_head2tail_sizer.Add(self.dv_head2tail_spec_canvas, 1, wx.EXPAND, 0)
		self.dv_head2tail_panel.SetSizer(dv_head2tail_sizer)
		dv_head2tail_main_sizer.Add(self.dv_head2tail_panel, 1, wx.EXPAND, 10)
		dv_head2tail_toolbar_sizer.Add(self.dv_head2tail_focus_thief, 0, 0, 0)
		dv_head2tail_toolbar_sizer.Add(self.dv_head2tail_previous_btn, 0, 0, 0)
		dv_head2tail_toolbar_sizer.Add(self.dv_head2tail_next_btn, 0, 0, 0)
		dv_head2tail_toolbar_spacer_1 = wx.StaticLine(self.dv_head2tail_toolbar, wx.ID_ANY, style=wx.LI_VERTICAL)
		dv_head2tail_toolbar_sizer.Add(dv_head2tail_toolbar_spacer_1, 0, wx.EXPAND, 0)
		dv_head2tail_save_label = wx.StaticText(self.dv_head2tail_toolbar, wx.ID_ANY, "Save: ")
		dv_head2tail_toolbar_sizer.Add(dv_head2tail_save_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 5)
		dv_head2tail_toolbar_sizer.Add(self.dv_head2tail_png_button, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		dv_head2tail_toolbar_sizer.Add(self.dv_head2tail_svg_button, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		dv_head2tail_toolbar_sizer.Add(self.dv_head2tail_pdf_button, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		dv_head2tail_toolbar_sizer.Add(self.dv_head2tail_save_btn, 0, 0, 0)
		dv_head2tail_toolbar_spacer_2 = wx.StaticLine(self.dv_head2tail_toolbar, wx.ID_ANY, style=wx.LI_VERTICAL)
		dv_head2tail_toolbar_sizer.Add(dv_head2tail_toolbar_spacer_2, 0, wx.EXPAND, 0)
		self.dv_head2tail_toolbar.SetSizer(dv_head2tail_toolbar_sizer)
		dv_head2tail_main_sizer.Add(self.dv_head2tail_toolbar, 0, wx.EXPAND, 0)
		self.data_viewer_head2tail.SetSizer(dv_head2tail_main_sizer)
		self.data_viewer_notebook.AddPage(self.data_viewer_reference, "Reference")
		self.data_viewer_notebook.AddPage(self.data_viewer_samples, "Samples")
		self.data_viewer_notebook.AddPage(self.data_viewer_head2tail, "Head to Tail")
		dv_spec_sizer.Add(self.data_viewer_notebook, 1, wx.EXPAND, 0)
		dv_data_line = wx.StaticLine(self.dv_spec_panel, wx.ID_ANY)
		dv_spec_sizer.Add(dv_data_line, 0, wx.EXPAND, 0)
		self.dv_spec_panel.SetSizer(dv_spec_sizer)
		dv_html_sizer.Add(self.dv_html, 1, wx.EXPAND, 0)
		self.dv_html_panel.SetSizer(dv_html_sizer)
		self.data_viewer_h_splitter.SplitHorizontally(self.dv_spec_panel, self.dv_html_panel)
		dv_data_sizer.Add(self.data_viewer_h_splitter, 1, wx.EXPAND, 0)
		self.dv_data_panel.SetSizer(dv_data_sizer)
		self.data_viewer_v_splitter.SplitVertically(self.dv_list_panel, self.dv_data_panel)
		dv_main_sizer.Add(self.data_viewer_v_splitter, 1, wx.EXPAND, 0)
		self.dv_main_panel.SetSizer(dv_main_sizer)
		data_viewer_sizer.Add(self.dv_main_panel, 7, wx.EXPAND, 10)
		self.browse_project_data.SetSizer(data_viewer_sizer)
		self.browse_project_notebook.AddPage(self.browse_project_charts, "Charts")
		self.browse_project_notebook.AddPage(self.browse_project_chromatogram, "Chromatogram")
		self.browse_project_notebook.AddPage(self.browse_project_data, "Data")
		self.browse_project_notebook.AddPage(self.browse_project_comparison, "Compare")
		browse_project_tab_sizer.Add(self.browse_project_notebook, 1, wx.EXPAND, 0)
		browse_project_tab_sizer.Add((0, 0), 0, 0, 0)
		browse_project_tab_sizer.Add((0, 0), 0, 0, 0)
		self.Browse_Project.SetSizer(browse_project_tab_sizer)
		comparison_left_label = wx.StaticText(self.comparison_panel, wx.ID_ANY, "Compare these Samples...", style=wx.ALIGN_LEFT)
		comparison_left.Add(comparison_left_label, 0, 0, 25)
		comparison_left_picker_sizer.Add(self.comparison_left_picker, 0, 0, 0)
		comparison_left_picker_sizer.Add(self.comparison_left_browse_btn, 0, 0, 0)
		comparison_left.Add(comparison_left_picker_sizer, 0, wx.BOTTOM | wx.TOP, 5)
		comparison_left.Add(self.comparison_left_header, 0, wx.EXPAND, 5)
		comparison_pickers_grid.Add(comparison_left, 1, wx.EXPAND, 0)
		comparison_picker_v_line = wx.StaticLine(self.comparison_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		comparison_pickers_grid.Add(comparison_picker_v_line, 1, wx.EXPAND | wx.LEFT | wx.RIGHT, 5)
		comparison_right_label = wx.StaticText(self.comparison_panel, wx.ID_ANY, "... To These Samples", style=wx.ALIGN_LEFT)
		comparison_right.Add(comparison_right_label, 0, 0, 25)
		comparison_right_picker_sizer.Add(self.comparison_right_picker, 0, 0, 0)
		comparison_right_picker_sizer.Add(self.comparison_right_browse_btn, 0, 0, 0)
		comparison_right.Add(comparison_right_picker_sizer, 0, wx.BOTTOM | wx.TOP, 5)
		comparison_right.Add(self.comparison_right_header, 0, wx.EXPAND, 5)
		comparison_pickers_grid.Add(comparison_right, 1, wx.EXPAND, 0)
		comparison_option_sizer.Add(comparison_pickers_grid, 1, wx.EXPAND, 10)
		static_line_3 = wx.StaticLine(self.comparison_panel, wx.ID_ANY)
		comparison_option_sizer.Add(static_line_3, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 10)
		comparison_settings_label = wx.StaticText(self.comparison_panel, wx.ID_ANY, "Settings")
		comparison_settings_label.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
		comparison_settings_sizer.Add(comparison_settings_label, 0, 0, 0)
		comparison_alignment_top_text = wx.StaticText(self.comparison_panel, wx.ID_ANY, "Dynamic Peak Alignment")
		comparison_alignment_top_text.SetToolTip("Settings for PyMS Dynamic Peak Alignment")
		comparison_settings_sizer.Add(comparison_alignment_top_text, 0, wx.TOP, 5)
		comparison_alignment_Dw_label = wx.StaticText(self.comparison_panel, wx.ID_ANY, "RT Modulation: ")
		comparison_alignment_grid.Add(comparison_alignment_Dw_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		comparison_alignment_Dw_sizer.Add(self.comparison_alignment_Dw_value, 0, 0, 0)
		comparison_alignment_Dw_label_2 = wx.StaticText(self.comparison_panel, wx.ID_ANY, " s", style=wx.ALIGN_LEFT)
		comparison_alignment_Dw_sizer.Add(comparison_alignment_Dw_label_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		comparison_alignment_grid.Add(comparison_alignment_Dw_sizer, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
		comparison_alignment_Gw_label = wx.StaticText(self.comparison_panel, wx.ID_ANY, "Gap Penalty: ")
		comparison_alignment_grid.Add(comparison_alignment_Gw_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		comparison_alignment_grid.Add(self.comparison_alignment_Gw_value, 0, 0, 0)
		comparison_alignment_min_peaks_label = wx.StaticText(self.comparison_panel, wx.ID_ANY, "Min Peaks: ")
		comparison_alignment_grid.Add(comparison_alignment_min_peaks_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		comparison_alignment_grid.Add(self.comparison_alignment_min_peaks_value, 0, 0, 0)
		comparison_settings_sizer.Add(comparison_alignment_grid, 1, wx.ALL | wx.EXPAND, 5)
		significance_level_label = wx.StaticText(self.comparison_panel, wx.ID_ANY, u"Significance Level (α): ")
		comparison_settings_sizer.Add(significance_level_label, 0, wx.BOTTOM | wx.TOP, 5)
		comparison_settings_sizer.Add(self.significance_level_value, 0, 0, 0)
		comparison_line_4 = wx.StaticLine(self.comparison_panel, wx.ID_ANY)
		comparison_settings_sizer.Add(comparison_line_4, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 10)
		comparison_settings_button_sizer.Add(self.comparison_apply_btn, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RIGHT, 9)
		comparison_settings_button_sizer.Add(self.comparison_default_btn, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RIGHT, 9)
		comparison_settings_button_sizer.Add(self.comparison_reset_btn, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.RIGHT, 9)
		comparison_settings_sizer.Add(comparison_settings_button_sizer, 1, wx.ALIGN_RIGHT, 20)
		comparison_settings_grid.Add(comparison_settings_sizer, 1, wx.EXPAND, 0)
		static_line_8 = wx.StaticLine(self.comparison_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		comparison_settings_grid.Add(static_line_8, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 5)
		comparison_button_sizer.Add(self.run_comparison_button, 0, 0, 0)
		static_line_2 = wx.StaticLine(self.comparison_panel, wx.ID_ANY)
		comparison_button_sizer.Add(static_line_2, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 10)
		comparison_charts_label = wx.StaticText(self.comparison_panel, wx.ID_ANY, "Charts")
		comparison_charts_label.SetFont(wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
		comparison_button_sizer.Add(comparison_charts_label, 0, wx.BOTTOM, 5)
		comparison_button_sizer.Add(self.comparison_radar_button, 0, wx.BOTTOM | wx.LEFT, 3)
		comparison_button_sizer.Add(self.comparison_mean_pa_button, 0, wx.BOTTOM | wx.LEFT, 3)
		comparison_button_sizer.Add(self.comparison_box_whisker_btn, 0, wx.BOTTOM | wx.LEFT, 3)
		comparison_button_sizer.Add(self.comparison_pca_btn, 0, wx.BOTTOM | wx.LEFT, 3)
		comparison_settings_grid.Add(comparison_button_sizer, 1, wx.EXPAND, 0)
		comparison_option_sizer.Add(comparison_settings_grid, 2, wx.EXPAND | wx.LEFT, 10)
		comparison_sizer.Add(comparison_option_sizer, 1, wx.EXPAND | wx.RIGHT, 10)
		comparison_log_line = wx.StaticLine(self.comparison_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		comparison_sizer.Add(comparison_log_line, 0, wx.EXPAND, 0)
		comparison_log_label = wx.StaticText(self.comparison_panel, wx.ID_ANY, "Log:")
		comparison_log_sizer.Add(comparison_log_label, 0, wx.BOTTOM, 5)
		comparison_log_sizer.Add(self.comparison_log_text_control, 4, wx.EXPAND | wx.RIGHT, 10)
		comparison_sizer.Add(comparison_log_sizer, 3, wx.ALL | wx.EXPAND, 10)
		self.comparison_panel.SetSizer(comparison_sizer)
		comparison_parent_sizer.Add(self.comparison_panel, 7, wx.ALL | wx.EXPAND, 10)
		self.Compare_Projects.SetSizer(comparison_parent_sizer)
		help_toolbar_sizer.Add(self.help_focus_thief, 0, 0, 0)
		help_toolbar_sizer.Add(self.help_back_btn, 0, 0, 0)
		help_toolbar_sizer.Add(self.help_forward_btn, 0, 0, 0)
		help_toolbar_sizer.Add(self.help_home_btn, 0, 0, 0)
		help_toolbar_spacer_1 = wx.StaticLine(self.help_toolbar_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		help_toolbar_sizer.Add(help_toolbar_spacer_1, 0, wx.EXPAND, 0)
		help_toolbar_sizer.Add(self.help_url_text_ctrl, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 5)
		help_toolbar_sizer.Add(self.help_go_btn, 0, 0, 0)
		help_toolbar_spacer_2 = wx.StaticLine(self.help_toolbar_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		help_toolbar_sizer.Add(help_toolbar_spacer_2, 0, wx.EXPAND, 0)
		help_toolbar_sizer.Add(self.help_readme_btn, 0, 0, 0)
		help_toolbar_sizer.Add(self.help_github_btn, 0, 0, 0)
		help_toolbar_spacer_3 = wx.StaticLine(self.help_toolbar_panel, wx.ID_ANY, style=wx.LI_VERTICAL)
		help_toolbar_sizer.Add(help_toolbar_spacer_3, 0, wx.EXPAND, 0)
		help_toolbar_sizer.Add(self.help_open_browser_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 5)
		self.help_toolbar_panel.SetSizer(help_toolbar_sizer)
		help_parent_sizer.Add(self.help_toolbar_panel, 1, wx.EXPAND, 0)
		help_main_sizer.Add(self.help_browser, 1, wx.EXPAND, 0)
		self.help_parent_panel.SetSizer(help_main_sizer)
		help_parent_sizer.Add(self.help_parent_panel, 1, wx.EXPAND, 10)
		self.Help.SetSizer(help_parent_sizer)
		self.notebook_1.AddPage(self.Launcher, "Launcher")
		self.notebook_1.AddPage(self.Import, "Import")
		self.notebook_1.AddPage(self.New_Project, "New Project")
		self.notebook_1.AddPage(self.Browse_Project, "Browse Project")
		self.notebook_1.AddPage(self.Compare_Projects, "Compare")
		self.notebook_1.AddPage(self.Help, "Help")
		parent_sizer.Add(self.notebook_1, 1, wx.ALL | wx.EXPAND, 3)
		self.SetSizer(parent_sizer)
		parent_sizer.Fit(self)
		self.Layout()
		# end wxGlade
		
		# Following code by Ray Pasco (c) 2005
		# http://wxpython-users.1045709.n5.nabble.com/Gauge-in-Statusbar-td2321906.html
		# sbarfield = 1  # put progressbar (gauge) in this statusbar field
		# self.maxcount = 1000  # arbitrary full-scale count
		# self.progbar = ProgressStatusBar(self, self.statusbar,
		#										 2, sbarfield, self.maxcount)
		# Thanks Ray
		
		self.Bind(wx.EVT_CLOSE, self.on_close)
		
	def size_change(self, event):
		# code to run whenever window resized
		self.chromatogram_canvas.draw()
		self.chromatogram_canvas.Refresh()
		if type(event) == wx._core.SizeEvent:
			event.Skip()
	
	def refresh_launcher(self, event):
		self.launcher_parent_panel.Layout()
		self.launcher_parent_panel.Update()
		self.launcher_parent_panel.Refresh()
	
	def notebook_1_handler(self, event):  # wxGlade: Launcher.<event_handler>
		# New Project Disable
		if event.GetSelection() == 3 and self.current_project_name == None:
			selected_project = file_dialog(self, "info", "Choose a Project to Open", "info files",
										   style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST,
										   #defaultDir=self.Config.get("main", "resultspath"))
										   defaultDir=self.Config.RESULTS_DIRECTORY)
			if selected_project == None:
				event.Veto()
			else:
				self.setup_project_browser(selected_project)
	
	# Double click on New Project
	# elif event.GetSelection() == 2 and event.GetOldSelection() == 2:
	#	self.new_project_notebook.SetSelection(0)
	
	# Double click on Browse Project
	# elif event.GetSelection() == 3 and event.GetOldSelection() == 3:
	#	self.browse_project_notebook.SetSelection(0)

	def notebook_1_handler_win32(self, event):
		# Special case for Windows
		old_selection = event.GetOldSelection()
		if self.notebook_1.GetSelection() == 3:
			selected_project = file_dialog(self, "info", "Choose a Project to Open", "info files",
										   style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST,
										   #defaultDir=self.Config.get("main", "resultspath"))
										   defaultDir=self.Config.RESULTS_DIRECTORY)
			if selected_project == None:
				self.notebook_1.SetSelection(old_selection)
			else:
				self.setup_project_browser(selected_project)


	"""Menu Options"""
	
	def on_menu_paths(self, event):  # wxGlade: Launcher.<event_handler>
		paths_dlg = paths_dialog.paths_dialog(self)
		paths_dlg.Layout()
		if paths_dlg.ShowModal() == wx.ID_OK:
			#if sys.platform == "win32":
				#self.Config.set("main", "nistpath", relpath(paths_dlg.nistpath.GetValue()))
			self.Config.nist_path = relpath(paths_dlg.nistpath.GetValue())
			#else:
			#	self.Config.set("main", "linuxnistpath", relpath(paths_dlg.nistpath.GetValue()))
			#self.Config.set("main", "resultspath", relpath(paths_dlg.resultspath.GetValue()))
			#self.Config.set("main", "rawpath", relpath(paths_dlg.rawpath.GetValue()))
			#self.Config.set("main", "csvpath", relpath(paths_dlg.csvpath.GetValue()))
			#self.Config.set("main", "spectrapath", relpath(paths_dlg.spectrapath.GetValue()))
			#self.Config.set("main", "chartspath", relpath(paths_dlg.charts_path.GetValue()))
			#self.Config.set("main", "msppath", relpath(paths_dlg.msppath.GetValue()))
			#self.Config.set("main", "exprdir", relpath(paths_dlg.expr_path.GetValue()))
			
			self.Config.RESULTS_DIRECTORY = relpath(paths_dlg.resultspath.GetValue())
			self.Config.RAW_DIRECTORY = relpath(paths_dlg.rawpath.GetValue())
			self.Config.CSV_DIRECTORY = relpath(paths_dlg.csvpath.GetValue())
			self.Config.SPECTRA_DIRECTORY = relpath(paths_dlg.spectrapath.GetValue())
			self.Config.CHARTS_DIRECTORY = relpath(paths_dlg.charts_path.GetValue())
			self.Config.MSP_DIRECTORY = relpath(paths_dlg.msppath.GetValue())
			self.Config.EXPERIMENTS_DIRECTORY = relpath(paths_dlg.expr_path.GetValue())
			
			maybe_make(relpath(paths_dlg.msppath.GetValue()))
			maybe_make(relpath(paths_dlg.resultspath.GetValue()))
			maybe_make(relpath(paths_dlg.expr_path.GetValue()))
			maybe_make(relpath(paths_dlg.charts_path.GetValue()))
			maybe_make(relpath(paths_dlg.csvpath.GetValue()))
			maybe_make(relpath(paths_dlg.spectrapath.GetValue()))
			
			self.status("Preferences applied", 5)
		
		self.rescan_files()
		event.Skip()
	
	def on_menu_About(self, event):  # wxGlade: Launcher.<event_handler>
		about_dlg = AboutDialog.AboutDialog(self)
		about_dlg.ShowModal()
	
	def on_menu_Exit(self, event):  # wxGlade: Launcher.<event_handler>
		self.Close()
	
	def on_menu_radar(self, event):  # wxGlade: Launcher.<event_handler>
		self.ChartViewer = ChartViewer.ChartViewer(self, chart_type="radar")
		self.ChartViewer.Show()
		self.ChartViewer.Raise()
		event.Skip()
		
	def on_menu_mean_pa(self, event):  # wxGlade: Launcher.<event_handler>
		self.ChartViewer = ChartViewer.ChartViewer(self, chart_type="mean_peak_area")
		self.ChartViewer.Show()
		self.ChartViewer.Raise()
		event.Skip()
		
	def on_menu_pa(self, event):  # wxGlade: Launcher.<event_handler>
		self.ChartViewer = ChartViewer.ChartViewer(self, chart_type="peak_area")
		self.ChartViewer.Show()
		self.ChartViewer.Raise()
		event.Skip()
		
	def on_menu_box_whisker(self, event):  # wxGlade: Launcher.<event_handler>
		self.ChartViewer = ChartViewer.ChartViewer(self, chart_type="box_whisker")
		self.ChartViewer.Show()
		self.ChartViewer.Raise()
		event.Skip()
	
	def on_menu_pca(self, event):  # wxGlade: Launcher.<event_handler>
		self.ChartViewer = ChartViewer.ChartViewer(self, chart_type="pca")
		self.ChartViewer.Show()
		self.ChartViewer.Raise()
		event.Skip()
		
	
	"""Status Bar"""
	
	def status(self, message, timeout=3):
		for i in range(timeout):
			self.status_buffer.append(message)
		self.OnStatus(0)
	
	def reset_status(self):
		self.statusbar.SetStatusText("Status: Ready", 0)
	
	rest_message = "Ready"
	
	def OnStatus(self, evt):
		if len(self.status_buffer) > 0:
			self.statusbar.SetStatusText("Status: {}".format(self.status_buffer.pop(0)), 0)
		else:
			self.statusbar.SetStatusText("Status: {}".format(self.rest_message), 0)
	
	"""Rescan Functions"""
	
	def rescan_files(self, *args):  # wxGlade: Launcher.<event_handler>
		#raw_dir = os.path.abspath(self.Config.get("main", "rawpath"))
		raw_dir = os.path.abspath(self.Config.RAW_DIRECTORY)
		#resultspath = os.path.abspath(self.Config.get("main", "resultspath"))
		
		# List of files in RAW directory for Import
		self.raw_list = []
		for rawfile in os.listdir(raw_dir):
			if os.path.splitext(rawfile)[1].lower() == ".raw":
				self.raw_list.append(rawfile)
		self.raw_list.sort()
		
		self.check_list_box_1.Clear()
		for item in self.raw_list:
			self.check_list_box_1.Append(item)
		
		# List of Samples for New Project
		self.jcamp_list = []
		for jcampfile in os.listdir(raw_dir):
			if os.path.splitext(jcampfile)[1].lower() == ".jdx":
				self.jcamp_list.append(jcampfile)
		self.jcamp_list.sort()
		
		self.check_list_box_2.Clear()
		for item in self.jcamp_list:
			self.check_list_box_2.Append(item)
	
	def get_sample_list(self, *args):
		selections_index = self.check_list_box_1.GetSelections() + list(self.check_list_box_1.GetCheckedItems())
		selections_index.sort()
		
		selected = []
		
		for choice in self.sample_choices:
			if self.sample_choices.index(choice) in selections_index:
				selected.append(choice)
		selected.sort()
		self.sample_list = selected
		return selected
	
	"""Open Project Picker"""
	
	def on_open_project_picker_clear(self, event):  # wxGlade: Launcher.<event_handler>
		coming_soon()
		event.Skip()
	
	def on_open_project_picker_open(self, event):  # wxGlade: Launcher.<event_handler>
		coming_soon()
		event.Skip()
	
	"""Exit Functions"""
	
	def on_close(self, event):  # here
		self.save_config()
		
		self.on_save_queue(pathname="lib/queue.csv")
		
		with open("lib/pretty_names_list", "w") as pretty_name_file:
			for pretty_name in self.pretty_name_list:
				pretty_name_file.write(pretty_name)
				pretty_name_file.write("\n")
		
		# Read internal settings
		internal_config = ConfigParser.ConfigParser()
		internal_config.read("lib/gsmatch.ini")
		
		screen_pos = self.GetPosition()
		
		# Save Internal Settings
		internal_config.set("MAIN", "position", "{},{}".format(*screen_pos))
		
		internal_config.set("last_comparison", "left", str(self.comparison_left_project))
		internal_config.set("last_comparison", "right", str(self.comparison_right_project))
		
		with open("lib/gsmatch.ini", "w") as configfile:
			configfile.write("#GunShotMatch Internal Configuration File.\n#Do not edit this file\n")
		with open("lib/gsmatch.ini", "a") as configfile:
			internal_config.write(configfile)
		
		if event.CanVeto():
			if any([conversion_thread_running, project_thread_running]):  # background worker still running
				wx.MessageBox("A process is still running.\nPlease wait for it to finish.", "Please Wait",
							  wx.ICON_ERROR | wx.OK)
				event.Veto()
				return
			
			if wx.MessageBox("Close GunShotMatch?",
							 "Please confirm",
							 wx.ICON_QUESTION | wx.YES_NO) != wx.YES:
				event.Veto()
				return
		
		print("Waiting for threads to finish...")
		self.worker.join()
		requests.get("http://localhost:5000/shutdown")
		self.flask.join()
		
		self.Destroy()  # you may also do:  event.Skip() since the default event handler does call Destroy(), too
	
	def save_config(self):
		#with open("config.ini", "w") as configfile:
		#	self.Config.write(configfile)
		self.Config.save_config()
	
	def on_exit(self, event):
		self.worker._stop()
	
	"""Launcher Tab Buttons"""
	
	def on_import(self, event):  # wxGlade: Launcher.<event_handler>
		self.notebook_1.SetSelection(1)
	
	def on_new_project(self, event):  # wxGlade: Launcher.<event_handler>
		self.notebook_1.SetSelection(2)
	
	def on_open_project(self, *args):  # wxGlade: Launcher.<event_handler>
		selected_project = file_dialog(self, "info", "Choose a Project to Open", "info files",
									   style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST,
									   #defaultDir=self.Config.get("main", "resultspath"))
									   defaultDir=self.Config.RESULTS_DIRECTORY)
		if selected_project != None:
			self.setup_project_browser(selected_project)
			self.notebook_1.SetSelection(3)
	
	def on_open_comparison(self, event):  # wxGlade: Launcher.<event_handler>
		self.notebook_1.SetSelection(4)
	
	def do_import_info(self, event):  # wxGlade: Launcher.<event_handler>
		coming_soon()
		event.Skip()
	
	def do_new_info(self, event):  # wxGlade: Launcher.<event_handler>
		coming_soon()
		event.Skip()
	
	def do_open_info(self, event):  # wxGlade: Launcher.<event_handler>
		coming_soon()
		event.Skip()
	
	def do_comparison_info(self, event):  # wxGlade: Launcher.<event_handler>
		coming_soon()
		event.Skip()
	
	"""Import Tab Buttons"""
	
	def do_import(self, event):  # wxGlade: Launcher.<event_handler>
		# Check if the thread is already running:
		if conversion_thread_running:
			wx.MessageBox("The conversion process is already running.\nPlease wait for it to finish.",
						  "Please Wait",
						  wx.ICON_ERROR | wx.OK)
			return
		
		# Files to import
		file_list = list(set(
			list(self.check_list_box_1.GetCheckedStrings()) + [self.check_list_box_1.GetString(item) for item in
															   self.check_list_box_1.GetSelections()]))
		
		file_list.sort()
		
		if len(file_list) == 0:
			self.status("Please choose one or more samples!")
			return
		
		self.import_log_text_control.AppendText("Starting conversion of:\n")
		self.import_log_text_control.AppendText(", ".join(file_list))
		self.import_log_text_control.AppendText("\n\n")
		
		# Clear Selections
		for index in self.check_list_box_1.GetSelections():
			self.check_list_box_1.Deselect(index)
		self.check_list_box_1.SetCheckedItems([0])
		self.check_list_box_1.Check(0, False)
		# self.check_list_box_1.Select(0)
		
		self.converter = ConversionThread(self, file_list)
		self.converter.start()
	
	"""Import Tab Logging"""
	
	def OnImportDone(self, event):
		self.rescan_files()
		self.status("Import Complete", 5)
	
	def OnImportLog(self, evt):
		self.import_log_text_control.AppendText(evt.log_text)
	
	# print(evt.log_text.encode("utf-8"))
	
	"""New Project > Settings Tab Buttons"""
	
	def do_apply(self, *args):  # wxGlade: Launcher.<event_handler>
		# Save the settings
		self.Config.bb_points = self.bb_points_value.GetValue()
		self.Config.bb_scans = self.bb_scans_value.GetValue()
		self.Config.noise_thresh = self.noise_thresh_value.GetValue()
		self.Config.target_range = (self.target_range_min_value.GetValue(), self.target_range_max_value.GetValue())
		self.Config.base_peak_filter = self.base_peak_filter_value.GetValue().split(",")
		self.Config.tophat = self.tophat_struct_value.GetValue()
		self.Config.tophat_unit = ["m", "s", "ms"][self.tophat_struct_units.GetSelection()]
		self.Config.rt_modulation = self.alignment_Dw_value.GetValue()
		self.Config.gap_penalty = self.alignment_Gw_value.GetValue()
		self.Config.min_peaks = self.alignment_min_peaks_value.GetValue()
		self.Config.mass_range = str2tuple(self.mass_range_value.GetValue())
		
		#self.Config.set("import", "bb_points", bb_points)
		#self.Config.set("import", "bb_scans", bb_scans)
		#self.Config.set("import", "noise_thresh", noise_thresh)
		#self.Config.set("import", "target_range", "{},{}".format(*target_range))
		#self.Config.set("import", "exclude_ions", base_peak_filter)
		#self.Config.set("import", "tophat", tophat)
		#self.Config.set("import", "tophat_unit", tophat_unit)
		#self.Config.set("import", "mass_range", mass_range)
		
		#self.Config.set("alignment", "rt_modulation", rt_modulation)
		#self.Config.set("alignment", "gap_penalty", gap_penalty)
		#self.Config.set("alignment", "min_peaks", min_peaks)
		
		#self.Config.set("analysis", "do_quantitative", str(self.project_quantitative.GetValue()))
		#self.Config.set("analysis", "do_qualitative", str(self.project_qualitative.GetValue()))
		#self.Config.set("analysis", "do_merge", str(self.project_merge.GetValue()))
		#self.Config.set("analysis", "do_counter", str(self.project_counter.GetValue()))
		#self.Config.set("analysis", "do_spectra", str(self.project_spectra.GetValue()))
		#self.Config.set("analysis", "do_charts", str(self.project_charts.GetValue()))
		
		self.Config.do_quantitative = str(self.project_quantitative.GetValue())
		self.Config.do_qualitative = str(self.project_qualitative.GetValue())
		self.Config.do_merge =  str(self.project_merge.GetValue())
		self.Config.do_counter = str(self.project_counter.GetValue())
		self.Config.do_spectra = str(self.project_spectra.GetValue())
		self.Config.do_charts = str(self.project_charts.GetValue())
	
	def do_reset(self, *args):  # wxGlade: Launcher.<event_handler>
		# Read import settings
		#self.bb_points_value.SetValue(self.Config.get("import", "bb_points"))
		#self.bb_scans_value.SetValue(self.Config.get("import", "bb_scans"))
		#self.noise_thresh_value.SetValue(self.Config.get("import", "noise_thresh"))
		self.bb_points_value.SetValue(self.Config.bb_points)
		self.bb_scans_value.SetValue(self.Config.bb_scans)
		self.noise_thresh_value.SetValue(self.Config.noise_thresh)
		#target_range = self.Config.get("import", "target_range").split(",")
		target_range = self.Config.target_range
		#self.target_range_min_value.SetValue(target_range[0]).strip())
		#self.target_range_max_value.SetValue(target_range[1]).strip())
		self.target_range_min_value.SetValue(str(target_range[0]))
		self.target_range_max_value.SetValue(str(target_range[1]))
		#self.base_peak_filter_value.SetValue(self.Config.get("import", "exclude_ions"))
		#self.tophat_struct_value.SetValue(self.Config.get("import", "tophat"))
		self.base_peak_filter_value.SetValue(list2str(self.Config.base_peak_filter))
		self.tophat_struct_value.SetValue(self.Config.tophat)
		#tophat_unit = self.Config.get("import", "tophat_unit")
		tophat_unit = self.Config.tophat_unit
		if tophat_unit == "m":
			tophat_unit = 0
		elif tophat_unit == "s":
			tophat_unit = 1
		elif tophat_unit == "ms":
			tophat_unit = 2
		self.tophat_struct_units.SetSelection(tophat_unit)
		#self.mass_range_value.SetValue(self.Config.get("import", "mass_range"))
		
		#self.alignment_Dw_value.SetValue(self.Config.get("alignment", "rt_modulation"))
		#self.alignment_Gw_value.SetValue(self.Config.get("alignment", "gap_penalty"))
		#self.alignment_min_peaks_value.SetValue(self.Config.get("alignment", "min_peaks"))
		
		#self.project_quantitative.SetValue(self.Config.getboolean("analysis", "do_quantitative"))
		#self.project_qualitative.SetValue(self.Config.getboolean("analysis", "do_qualitative"))
		#self.project_merge.SetValue(self.Config.getboolean("analysis", "do_merge"))
		#self.project_counter.SetValue(self.Config.getboolean("analysis", "do_counter"))
		#self.project_spectra.SetValue(self.Config.getboolean("analysis", "do_spectra"))
		#self.project_charts.SetValue(self.Config.getboolean("analysis", "do_charts"))
		
		self.mass_range_value.SetValue(f"{self.Config.mass_range[0]},{self.Config.mass_range[1]}")
		
		self.alignment_Dw_value.SetValue(str(self.Config.rt_modulation))
		self.alignment_Gw_value.SetValue(str(self.Config.gap_penalty))
		self.alignment_min_peaks_value.SetValue(str(self.Config.min_peaks))
		
		self.project_quantitative.SetValue(self.Config.do_quantitative)
		self.project_qualitative.SetValue(self.Config.do_qualitative)
		self.project_merge.SetValue(self.Config.do_merge)
		self.project_counter.SetValue(self.Config.do_counter)
		self.project_spectra.SetValue(self.Config.do_spectra)
		self.project_charts.SetValue(self.Config.do_charts)
	
	def do_default(self, *args):  # wxGlade: Launcher.<event_handler>
		# Reset to default Settings
		Config = ConfigParser.ConfigParser()
		Config.read("lib/default.ini")
		self.bb_points_value.SetValue(Config.get("import", "bb_points"))
		self.bb_scans_value.SetValue(Config.get("import", "bb_scans"))
		self.noise_thresh_value.SetValue(Config.get("import", "noise_thresh"))
		target_range = Config.get("import", "target_range").split(",")
		self.target_range_min_value.SetValue(target_range[0].strip())
		self.target_range_max_value.SetValue(target_range[1].strip())
		self.base_peak_filter_value.SetValue(Config.get("import", "exclude_ions"))
		self.tophat_struct_value.SetValue(Config.get("import", "tophat"))
		tophat_unit = self.Config.get("import", "tophat_unit")
		if tophat_unit == "m":
			tophat_unit = 0
		elif tophat_unit == "s":
			tophat_unit = 1
		elif tophat_unit == "ms":
			tophat_unit = 2
		self.tophat_struct_units.SetSelection(tophat_unit)
		self.mass_range_value.SetValue(Config.get("import", "mass_range"))
		
		self.alignment_Dw_value.SetValue(Config.get("alignment", "rt_modulation"))
		self.alignment_Gw_value.SetValue(Config.get("alignment", "gap_penalty"))
		self.alignment_min_peaks_value.SetValue(Config.get("alignment", "min_peaks"))
		
		self.project_quantitative.SetValue(Config.getboolean("analysis", "do_quantitative"))
		self.project_qualitative.SetValue(Config.getboolean("analysis", "do_qualitative"))
		self.project_merge.SetValue(Config.getboolean("analysis", "do_merge"))
		self.project_counter.SetValue(Config.getboolean("analysis", "do_counter"))
		self.project_spectra.SetValue(Config.getboolean("analysis", "do_spectra"))
		self.project_charts.SetValue(Config.getboolean("analysis", "do_charts"))
	
	def do_enqueue(self, event):  # wxGlade: Launcher.<event_handler>
		# self.do_apply()
		# self.save_config()
		
		# Files to process
		sample_list = list(set(
			list(self.check_list_box_2.GetCheckedStrings()) + [self.check_list_box_2.GetString(item) for item in
															   self.check_list_box_2.GetSelections()]))
		sample_list.sort()
		
		if len(sample_list) < 2:
			wx.MessageBox("Please choose two or more samples!", "Error", wx.ICON_ERROR | wx.OK)
			return
		
		pretty_name = self.pretty_name_value.GetValue()
		if pretty_name == '':
			pretty_name = re.sub(r'\d+', '', str(os.path.splitext(sample_list[0])[0].rstrip("\n\r "))).replace("__",
																											   "_")
		else:
			self.pretty_name_list[pretty_name] = ''
			# self.pretty_name_value.Clear()
			# for name in self.pretty_name_list:
			#	self.pretty_name_value.Append(name)
			self.pretty_name_value.AutoComplete([name for name in self.pretty_name_list])
			self.on_pretty_name_clear()
		print(pretty_name)
		
		## Add sample_list to config file
		# self.Config.set("samples", "samples", ",".join(sample_list))
		
		# with open(f"configs/{pretty_name}.ini","w") as configfile:
		#	self.Config.write(configfile)
		
		# Clear Selections
		for index in self.check_list_box_2.GetSelections():
			self.check_list_box_2.Deselect(index)
		self.check_list_box_2.SetCheckedItems([0])
		self.check_list_box_2.Check(0, False)
		# self.check_list_box_2.Select(0)
		
		self.project_queue_grid.AppendRows()
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 0, "Ready")
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 1, ",".join(sample_list))
		# self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 2, f"configs/{pretty_name}.ini")
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 2, pretty_name)
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 3,
											 str(self.bb_points_value.GetValue()))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 4,
											 str(self.bb_scans_value.GetValue()))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 5,
											 str(self.noise_thresh_value.GetValue()))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 6, ",".join(
			(self.target_range_min_value.GetValue(), self.target_range_max_value.GetValue())))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 7,
											 self.base_peak_filter_value.GetValue())
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 8,
											 self.tophat_struct_value.GetValue())
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 9,
											 ["m", "s", "ms"][self.tophat_struct_units.GetSelection()])
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 10,
											 self.mass_range_value.GetValue())
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 11,
											 self.alignment_Dw_value.GetValue())
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 12,
											 self.alignment_Gw_value.GetValue())
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 13,
											 self.alignment_min_peaks_value.GetValue())
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 14,
											 str(self.project_quantitative.GetValue()))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 15,
											 str(self.project_qualitative.GetValue()))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 16,
											 str(self.project_merge.GetValue()))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 17,
											 str(self.project_counter.GetValue()))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 18,
											 str(self.project_spectra.GetValue()))
		self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1, 19,
											 str(self.project_charts.GetValue()))
		
		event.Skip()
	
	def do_new_project(self, *args):  # wxGlade: Launcher.<event_handler>
		# Check if the thread is already running:
		if project_thread_running:
			wx.MessageBox("The project process is already running.\nPlease wait for it to finish.", "Please Wait",
						  wx.ICON_ERROR | wx.OK)
			return
		
		# Clear log
		self.project_log_text_control.Clear()
		self.do_apply()
		self.save_config()
		
		# Files to process
		sample_list = list(set(
			list(self.check_list_box_2.GetCheckedStrings()) + [self.check_list_box_2.GetString(item) for item in
															   self.check_list_box_2.GetSelections()]))
		sample_list.sort()
		
		if len(sample_list) < 2:
			wx.MessageBox("Please choose two or more samples!", "Error", wx.ICON_ERROR | wx.OK)
			# self.status("Please choose two or more samples!")
			return
		
		self.new_project_notebook.ChangeSelection(2)
		
		self.project_log_text_control.AppendText("Starting processing of:\n")
		self.project_log_text_control.AppendText(", ".join(sample_list))
		self.project_log_text_control.AppendText("\n\n")
		
		pretty_name = self.pretty_name_value.GetValue()
		if pretty_name == '':
			pretty_name = re.sub(r'\d+', '', str(os.path.splitext(sample_list[0])[0].rstrip("\n\r "))).replace("__",
																											   "_")
		else:
			self.pretty_name_list[pretty_name] = ''
			# self.pretty_name_value.Clear()
			# for name in self.pretty_name_list:
			#	self.pretty_name_value.Append(name)
			self.pretty_name_value.AutoComplete([name for name in self.pretty_name_list])
			self.on_pretty_name_clear()
		print(pretty_name)
		
		# Clear Selections
		for index in self.check_list_box_2.GetSelections():
			self.check_list_box_2.Deselect(index)
		self.check_list_box_2.SetCheckedItems([0])
		self.check_list_box_2.Check(0, False)
		# self.check_list_box_2.Select(0)
		
		# return
		
		self.project = ProjectThread(self, sample_list, pretty_name)
		self.project.start()
	
	def on_pretty_name_clear(self, *args):  # wxGlade: Launcher.<event_handler>
		self.pretty_name_value.SetValue('')
		self.pretty_name_value.SetFocus()
	
	"""New Project > Queue Tab Buttons"""
	
	def on_queue_clear(self, event):  # wxGlade: Launcher.<event_handler>
		self.project_queue_grid.DeleteRows(0, 10)
		event.Skip()
	
	def on_queue_delete(self, event):  # wxGlade: Launcher.<event_handler>
		for row_idx in self.project_queue_grid.GetSelectedRows()[::-1]:
			self.project_queue_grid.DeleteRows(row_idx)
		
		event.Skip()
	
	def on_save_queue(self, event=None, pathname=None):  # wxGlade: Launcher.<event_handler>
		if not pathname:
			pathname = file_dialog(self, "csv", "Save Queue", "csv files")
		
		try:
			with open(pathname, 'w') as file:
				for row in range(self.project_queue_grid.GetNumberRows()):
					for column in range(self.project_queue_grid.GetNumberCols()):
						file.write(self.project_queue_grid.GetCellValue(row, column))
						file.write(";")
					
					file.write("\n")
		except IOError:
			wx.LogError("Cannot save current data in file '%s'." % pathname)
	
	def on_load_queue(self, event=None, pathname=None):  # wxGlade: Launcher.<event_handler>
		if not pathname:
			pathname = file_dialog(self, "csv", "Save Queue", "csv files", style=wx.FD_OPEN)
		
		try:
			with open(pathname, 'r') as file:
				queue_reader = csv.reader(file, delimiter=';')
				for row in queue_reader:
					self.project_queue_grid.AppendRows()
					for col_idx, cell in enumerate(row):
						if cell != '':
							self.project_queue_grid.SetCellValue(self.project_queue_grid.GetNumberRows() - 1,
																 col_idx,
																 cell)
		
		
		except IOError:
			wx.LogError("Cannot open the file '%s'." % pathname)
	
	def on_project_queue_run(self, event):  # wxGlade: Launcher.<event_handler>
		
		self.queue = QueueThread(self)
		self.queue.start()
		
		event.Skip()
	
	"""New Project > Log Tab"""
	
	def on_project_log_save(self, event):  # wxGlade: Launcher.<event_handler>
		pathname = file_dialog(self, "log", "Save log file", "log files")
		
		try:
			with open(pathname, 'w') as file:
				file.write(self.project_log_text_control.GetValue())
		except IOError:
			wx.LogError("Cannot save current data in file '%s'." % pathname)
			
			event.Skip()
	
	def OnProjectDone(self, event):
		self.status("Project Created", 5)
	
	def OnProjectLog(self, evt):
		# print(evt.log_text.replace("\r\033[K",""))
		self.project_log_text_control.AppendText(evt.log_text.replace("\r\033[K", ""))
	
	# print(evt.log_text.encode("utf-8"))
	
	"""Browse Project Tab"""
	
	def on_close_project(self, event):  # wxGlade: Launcher.<event_handler>
		try:
			requests.get("http://localhost:5000/shutdown")
		except:
			pass
			
		self.flask.join()
		
		self.current_project_name = None
		self.notebook_1.ChangeSelection(0)
		
		self.focus_thief.SetFocus()
		self.size_change(event)
		
		self.browser_sample_list = []
		self.browser_sample_idx = 0
		
		self.notebook_1.SetPageText(3, "Browse Project")
		
		self.open_project_header_browser.LoadURL("about:blank")
		
		# Load Chart Data
		self.comparison_chart_data = None
		
		self.comparison_prefixList = []
		
		self.browser_peak_data = []
		
		event.Skip()
	
	def setup_project_browser(self, selected_project):
		self.flask = Flask_Thread(self)
		self.flask.start()
		
		self.current_project = selected_project
		self.current_project_name = os.path.splitext(os.path.split(selected_project)[-1])[0]
		self.notebook_1.SetPageText(3, self.current_project_name)
		
		self.open_project_header_browser.LoadURL("file://{}".format(selected_project))
		
		with open(selected_project, "r") as f:
			self.current_prefixList = [x.rstrip("\r\n") for x in f.readlines()]
		#print(self.current_prefixList)
		
		self.browser_sample_list = self.current_prefixList
		
		self.browser_sample_idx = 0
		# print(self.browser_sample_list)
		# print(self.browser_sample_list[self.browser_sample_idx])
		
		# Show chromatogram for first sample
		self.display_chromatogram(self.browser_sample_list[self.browser_sample_idx])
		
		
		with open(os.path.join(self.Config.CSV_DIRECTORY, "{}_peak_data.json".format(self.current_project_name)), "r") as jsonfile:
			for peak in jsonfile.readlines():
				self.browser_peak_data.append(json.loads(peak))
		
		
		self.populate_data_viewer()

		
		
	
	"""Browse Project > Charts Tab Buttons"""
	
	def show_radar_chart(self, event):  # wxGlade: Launcher.<event_handler>
		self.ChartViewer = ChartViewer.ChartViewer(self,
												   chart_type="radar",
												   initial_samples=[self.current_project],
												   #chart_data=self.chart_data,
												   #pretty_names = [self.current_project_name],
												   #sample_lists={self.current_project_name: self.current_prefixList}
												  )
		self.ChartViewer.Show()
		self.ChartViewer.Raise()
		event.Skip()
	
	def show_mean_peak_area_chart(self, event):  # wxGlade: Launcher.<event_handler>
		self.ChartViewer = ChartViewer.ChartViewer(self,
												   chart_type="mean_peak_area",
												   initial_samples=[self.current_project],
												   #chart_data=self.chart_data,
												   #pretty_names = [self.current_project_name],
												   #sample_lists={self.current_project_name: self.current_prefixList}
												  )
		self.ChartViewer.Show()
		self.ChartViewer.Raise()
		event.Skip()
	
	def show_box_whisker_chart(self, event):  # wxGlade: Launcher.<event_handler>
		self.ChartViewer = ChartViewer.ChartViewer(self, chart_type="box_whisker",
												   #chart_data=self.chart_data,
												   initial_samples=[self.current_project],
												   #pretty_names = [self.current_project_name],
												   #sample_lists={self.current_project_name: self.current_prefixList}
												  )
		self.ChartViewer.Show()
		self.ChartViewer.Raise()
		event.Skip()
	
	def show_peak_area_chart(self, event):  # wxGlade: Launcher.<event_handler>
		self.ChartViewer = ChartViewer.ChartViewer(self, chart_type="peak_area",
												   initial_samples=[self.current_project],
												   #chart_data=self.chart_data,
												   #pretty_names = [self.current_project_name],
												   #sample_lists={self.current_project_name: self.current_prefixList}
												  )
		self.ChartViewer.Show()
		self.ChartViewer.Raise()
		event.Skip()
	
	def show_chromatogram(self, event):  # wxGlade: Launcher.<event_handler>
		self.browse_project_notebook.SetSelection(1)
		event.Skip()
	
	"""Browse Project > Chromatogram Tab"""
	
	# Toolbar Buttons
	def on_open_sample(self, event):  # wxGlade: Launcher.<event_handler>
		self.focus_thief.SetFocus()
		dlg = list_dialog.list_dialog(self, title="Choose Sample", label="Choose a sample: ", choices=self.browser_sample_list)
		res = dlg.ShowModal()
		if res == wx.ID_OK:
			#print(dlg.list_box.GetSelection())
			#print(dlg.list_box.GetString(dlg.list_box.GetSelection()))
			self.display_chromatogram(dlg.list_box.GetString(dlg.list_box.GetSelection()))
		
		dlg.Destroy()
		event.Skip()
	
	def on_view_peak_list(self, event):  # wxGlade: Launcher.<event_handler>
		coming_soon()
		self.focus_thief.SetFocus()
		event.Skip()
	
	def on_previous_sample(self, event):  # wxGlade: Launcher.<event_handler>
		self.browser_sample_idx -= 1
		if self.browser_sample_idx < 0:
			self.browser_sample_idx = len(self.browser_sample_list)-1

		self.display_chromatogram(self.browser_sample_list[self.browser_sample_idx])
		
		self.focus_thief.SetFocus()
		event.Skip()
	
	def on_next_sample(self, event):  # wxGlade: Launcher.<event_handler>
		self.browser_sample_idx += 1
		if self.browser_sample_idx > len(self.browser_sample_list)-1:
			self.browser_sample_idx = 0

		self.display_chromatogram(self.browser_sample_list[self.browser_sample_idx])
		
		self.focus_thief.SetFocus()
		event.Skip()
	
	def on_chromatogram_reset_view(self, event):  # wxGlade: Launcher.<event_handler>
		self.chromatogram_canvas.toolbar.home()
		self.focus_thief.SetFocus()
		event.Skip()
	
	def on_chromatogram_previous_view(self, event):  # wxGlade: Launcher.<event_handler>
		self.chromatogram_canvas.toolbar.back()
		self.focus_thief.SetFocus()
		event.Skip()
	
	def on_chromatogram_zoom(self, event):  # wxGlade: Launcher.<event_handler>
		self.chrom_Pan_Btn.Enable()
		self.ViewSpectrum_Btn.Enable()
		self.chromatogram_canvas.toolbar.zoom()
		self.focus_thief.SetFocus()
		self.chrom_Zoom_Btn.Disable()
		event.Skip()
	
	def on_chromatogram_pan(self, event):  # wxGlade: Launcher.<event_handler>
		self.chrom_Zoom_Btn.Enable()
		self.ViewSpectrum_Btn.Enable()
		self.chromatogram_canvas.toolbar.pan()
		self.focus_thief.SetFocus()
		self.chrom_Pan_Btn.Disable()
		event.Skip()
	
	def on_view_spectrum(self, event):  # wxGlade: Launcher.<event_handler>
		self.chrom_Pan_Btn.Enable()
		self.chrom_Zoom_Btn.Enable()
		coming_soon()
		self.focus_thief.SetFocus()
		self.ViewSpectrum_Btn.Disable()
		event.Skip()
	
	def do_configure_borders(self, event):  # wxGlade: Launcher.<event_handler>
		self.border_config = border_config.border_config(self, self.chromatogram_figure)
		self.border_config.Show()
	
	def do_save_chrom(self, event):  # wxGlade: Launcher.<event_handler>
		
		self.focus_thief.SetFocus()
		
		filetypes = []
		if self.chrom_png_button.GetValue():
			filetypes.append("png")
		if self.chrom_svg_button.GetValue():
			filetypes.append("svg")
		if self.chrom_pdf_button.GetValue():
			filetypes.append("pdf")
		
		if len(filetypes) == 0:
			wx.MessageBox("Please choose one or more filetypes", "Error", wx.ICON_ERROR | wx.OK)
			return
		
		pathname = os.path.splitext(file_dialog(self, "*", "Save Chart", "",
												#defaultDir=self.Config.get("main", "resultspath")))[0]
												defaultDir=self.Config.RESULTS_DIRECTORY))[0]
		
		# Do any of the files already exist?
		try:
			for filetype in filetypes:
				if os.path.isfile(f"{pathname}.{filetype}"):
					alert = wx.MessageDialog(self,
											 f'A file named "{pathname}.{filetype}" already exists.\nDo you want to replace it?',
											 "Overwrite File?",
											 wx.ICON_QUESTION | wx.OK | wx.CANCEL)
					alert.SetOKLabel("Replace")
					if alert.ShowModal() != wx.YES:
						return
				
				self.chromatogram_figure.savefig(f"{pathname}.{filetype}")
		
		except:
			wx.LogError("Cannot save file '%s'." % pathname)
			traceback.print_exc()
	
	# Display Function
	def display_chromatogram(self, sample_name=None):
		"""Chromatogram Diaplay"""
		
		print(sample_name)
		
		self.Bind(wx.EVT_SIZE, self.size_change)
		self.Bind(wx.EVT_MAXIMIZE, self.size_change)
		
		self.toolbar = NavigationToolbar(self.chromatogram_canvas)
		self.toolbar.Hide()
		
		self.chrom_zoom = True
		self.chrom_pan = False
		self.chrom_spec = False
		
		# Constrain zoom to x axis only
		# From https://stackoverflow.com/questions/16705452/matplotlib-forcing-pan-zoom-to-constrain-to-x-axes
		def press_zoom(self, event):
			event.key = 'x'
			NavigationToolbar.press_zoom(self, event)
		
		self.chromatogram_figure.canvas.toolbar.press_zoom = types.MethodType(press_zoom,
																			  self.chromatogram_figure.canvas.toolbar)
		
		time_list = []
		intensity_list = []
		
		display = Display(self.chromatogram_figure, self.chromatogram_axes)
		
		if sample_name:
			self.chromatogram_axes.clear()
			#ExprDir = self.Config.get("main", "exprdir")
			ExprDir = self.Config.EXPERIMENTS_DIRECTORY
			
			with open(os.path.join(ExprDir, "{}_tic.dat".format(sample_name))) as tic_file:
				ticreader = csv.reader(tic_file, delimiter=" ")
				for row in ticreader:
					row = list(filter(None, row))
					intensity_array = intensity_list.append(float(row[1]))
					time_list.append(float(row[0]))
			
			intensity_array = numpy.array(intensity_list)
			tic = IonChromatogram(intensity_array, time_list)
			
			peak_list = load_peaks(os.path.join(ExprDir, "{}_peaks.dat".format(sample_name)))
			
			display.plot_tic(tic, sample_name, minutes=True)
			# display.plot_peaks(filtered_peak_list, "Peaks")
			# display.do_plotting('TIC and PyMS Detected Peaks')
			#display.do_plotting(f'{sample_name} TIC')
			display.do_plotting('')
			
			y = tic.get_intensity_array()
			x = [time / 60 for time in tic.get_time_list()]
			
			self.chromatogram_axes.set_xlim(left=0, right=max(x))
		
		else:
			self.chromatogram_axes.text(0.5, 0.5, "Please select a Project", horizontalalignment="center",
										fontsize='32', transform=self.chromatogram_axes.transAxes)
		
		self.chromatogram_axes.set_ylim(bottom=0)
		self.chromatogram_axes.set_xlabel("Retention Time")
		self.chromatogram_axes.set_ylabel("Intensity")
		
		self.chromatogram_figure.subplots_adjust(left=0.1, bottom=0.125, top=0.9, right=0.97)
		# figure.tight_layout()
		self.chromatogram_canvas.draw()
		
		# def on_xlims_change(ax):
		def update_ylim(*args):
			#	print(*args)
			#	print(str(*args).startswith("MPL MouseEvent")) # Pan
			if (str(*args).startswith("My_AxesSubplot") and not self.chrom_Zoom_Btn.IsEnabled()) or (
					str(*args).startswith("MPL MouseEvent") and not self.chrom_Pan_Btn.IsEnabled()):  # Zoom, Pan
				#	print("updated xlims: ", axes.get_xlim())
				min_x_index = (numpy.abs(x - self.chromatogram_axes.get_xlim()[0])).argmin()
				max_x_index = (numpy.abs(x - self.chromatogram_axes.get_xlim()[1])).argmin()
				#	print(min_x_index, max_x_index)
				
				y_vals_for_range = numpy.take(y, [idx for idx in range(min_x_index, max_x_index)])
				#	print(max(y_vals_for_range))
				self.chromatogram_axes.set_ylim(bottom=0, top=max(y_vals_for_range) * 1.1)
				self.chromatogram_figure.canvas.draw()
				#	print("x-val: {}, y-val:{}
				self.size_change(0)
		
		self.chromatogram_axes.callbacks.connect('xlim_changed', update_ylim)
		self.chromatogram_figure.canvas.callbacks.connect("button_release_event", update_ylim)
	
	# Other Toolbar Options
	# Save chromatogram as image: save_figure(self, *args)
	# set_cursor(self, cursor)
	# Set the current cursor to one of the :class:`Cursors` enums values.
	
	# If required by the backend, this method should trigger an update in
	# the backend event loop after the cursor is set, as this method may be
	# called e.g. before a long-running task during which the GUI is not
	# updated.
	# set_history_buttons(self)
	# Enable or disable the back/forward button.
	# forward(self, *args)
	# move forward in the view lim stack.
	# print(axes.get_ylim())
	
	"""Help Tab Buttons"""
	
	def on_help_back(self, event):  # wxGlade: Launcher.<event_handler>
		self.help_browser.GoBack()
		self.help_focus_thief.SetFocus()
		event.Skip()
	
	def on_help_forward(self, event):  # wxGlade: Launcher.<event_handler>
		self.help_browser.GoForward()
		self.help_focus_thief.SetFocus()
		event.Skip()
	
	def on_help_home(self, event):  # wxGlade: Launcher.<event_handler>
		self.help_browser.LoadURL(self.help_home)
		self.help_focus_thief.SetFocus()
		event.Skip()
	
	def on_help_go(self, event):  # wxGlade: Launcher.<event_handler>
		print(self.help_url_text_ctrl.GetValue())
		url = self.help_url_text_ctrl.GetValue()
		if not url.startswith('http'):
			url = "http://" + url
		self.help_browser.LoadURL(url)
		self.help_focus_thief.SetFocus()
	
	# event.Skip()
	
	def on_help_readme(self, event):  # wxGlade: Launcher.<event_handler>
		self.help_browser.LoadURL("file://{}".format(os.path.join(os.getcwd(), "README.txt")))
		self.help_focus_thief.SetFocus()
		event.Skip()
	
	def on_help_github(self, event):  # wxGlade: Launcher.<event_handler>
		self.help_browser.LoadURL("http://github.com/domdfcoding/GunShotMatch")
		self.help_focus_thief.SetFocus()
		event.Skip()
	
	def on_help_browser(self, event):  # wxGlade: Launcher.<event_handler>
		webbrowser.open(self.help_url_text_ctrl.GetValue(), 2)
		self.help_focus_thief.SetFocus()
		event.Skip()
	
	def help_update_url(self, event):
		self.help_url_text_ctrl.SetValue(event.GetURL())
	

	"""Comparison Tab"""
	
	def on_left_comparison_browse(self, event):  # wxGlade: Launcher.<event_handler>
		selected_project = file_dialog(self, "info", "Choose a Project to Open", "info files",
									   style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST,
									   #defaultDir=self.Config.get("main", "resultspath"))
									   defaultDir=self.Config.RESULTS_DIRECTORY)
		if selected_project == None:
			return
		
		if pretty_name_from_info(selected_project) == self.comparison_right_project_name:
			wx.MessageBox("You cannot compare a project to itself!\nPlease choose a different project.", "Error",
						  wx.ICON_ERROR | wx.OK)
			return

		self.comparison_left_project = selected_project
		self.comparison_left_project_name = pretty_name_from_info(self.comparison_left_project)
		
		self.comparison_left_picker.SetValue(self.comparison_left_project_name)
		self.comparison_left_header.LoadURL("file://{}".format(self.comparison_left_project))
		
		self.comparison_check_enable()
		
	def on_right_comparison_browse(self, event):  # wxGlade: Launcher.<event_handler>
		selected_project = file_dialog(self, "info", "Choose a Project to Open", "info files",
									   style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST,
									   #defaultDir=self.Config.get("main", "resultspath"))
									   defaultDir=self.Config.RESULTS_DIRECTORY)
		if selected_project == None:
			return
		
		if pretty_name_from_info(selected_project) == self.comparison_left_project_name:
			wx.MessageBox("You cannot compare a project to itself!\nPlease choose a different project.", "Error",
						  wx.ICON_ERROR | wx.OK)
			return
		
		self.comparison_right_project = selected_project
		self.comparison_right_project_name = pretty_name_from_info(self.comparison_right_project)
		
		self.comparison_right_picker.SetValue(self.comparison_right_project_name)
		self.comparison_right_header.LoadURL("file://{}".format(self.comparison_right_project))
		
		self.comparison_check_enable()
		
	def comparison_check_enable(self):
		if self.comparison_right_project and self.comparison_left_project:
			self.run_comparison_button.Enable()
			self.comparison_box_whisker_btn.Enable()
			self.comparison_pca_btn.Enable()
			self.comparison_mean_pa_button.Enable()
			self.comparison_radar_button.Enable()
	
	def comparison_run(self, event):  # wxGlade: Launcher.<event_handler>
		a_value = self.significance_level_value.GetValue()
		
		self.comparison = ComparisonThread(self,
										   self.comparison_left_project,
										   self.comparison_right_project,
										   self.Config,
										   a_value)
		self.comparison.start()

	def do_comparison_apply(self, event):  # wxGlade: Launcher.<event_handler>
		# Save the settings
		self.Config.comparison_a = self.significance_level_value.GetValue()
		self.Config.comparison_rt_modulation = self.comparison_alignment_Dw_value.GetValue()
		self.Config.comparison_gap_penalty = self.comparison_alignment_Gw_value.GetValue()
		self.Config.comparison_min_peaks = int(self.comparison_alignment_min_peaks_value.GetValue())
		
		print("Event handler 'do_comparison_apply' not implemented!")
		event.Skip()
	
	def do_comparison_default(self, event):  # wxGlade: Launcher.<event_handler>
		# Read settings
		self.significance_level_value.SetValue(str(self.Config.comparison_a))
		self.comparison_alignment_Dw_value.SetValue(str(self.Config.comparison_rt_modulation))
		self.comparison_alignment_Gw_value.SetValue(str(self.Config.comparison_gap_penalty))
		self.comparison_alignment_min_peaks_value.SetValue(str(self.Config.comparison_min_peaks))
		
		print("Event handler 'do_comparison_default' not implemented!")
		event.Skip()
		
	def do_comparison_reset(self, *args):  # wxGlade: Launcher.<event_handler>
		# Reset to default Settings
		Config = ConfigParser.ConfigParser()
		Config.read("lib/default.ini")
		
		self.significance_level_value.SetValue(Config.get("comparison", "a"))
		self.comparison_alignment_Dw_value.SetValue(Config.get("comparison", "rt_modulation"))
		self.comparison_alignment_Gw_value.SetValue(Config.get("comparison", "gap_penalty"))
		self.comparison_alignment_min_peaks_value.SetValue(Config.get("comparison", "min_peaks"))
	
	def comparison_show_box_whisker(self, event):
		self.ChartViewer = ChartViewer.ChartViewer(self, chart_type="box_whisker",
												   initial_samples=[self.comparison_left_project,
																	self.comparison_right_project],
												  )
		self.ChartViewer.Show()
		self.ChartViewer.Raise()
		event.Skip()
	
	def comparison_show_pca(self, event):
		self.ChartViewer = ChartViewer.ChartViewer(self, chart_type="pca",
												   initial_samples=[self.comparison_left_project,
																	self.comparison_right_project],
												  )
		self.ChartViewer.Show()
		self.ChartViewer.Raise()
		event.Skip()
	
	def comparison_show_radar(self, event):  # wxGlade: Launcher.<event_handler>
		self.ChartViewer = ChartViewer.ChartViewer(self, chart_type="radar",
												   initial_samples=[self.comparison_left_project,
																	self.comparison_right_project],
												   )
		self.ChartViewer.Show()
		self.ChartViewer.Raise()
		event.Skip()
	
	def comparison_show_mean_peak_area(self, event):  # wxGlade: Launcher.<event_handler>
		self.ChartViewer = ChartViewer.ChartViewer(self, chart_type="mean_peak_area",
												   initial_samples=[self.comparison_left_project,
																	self.comparison_right_project],
												   )
		self.ChartViewer.Show()
		self.ChartViewer.Raise()
		event.Skip()
	
	def OnComparisonDone(self, event):
		self.status("Comparison Complete", 5)
	
	def OnComparisonLog(self, evt):
		self.comparison_log_text_control.AppendText(evt.log_text)
	
	
	"""Data Viewer"""
	
	def populate_data_viewer(self):
		self.data_viewer_list.DeleteAllItems()
	
		for peak in self.browser_peak_data:
			print(list(peak))
			print(list(peak["hits"][0]))
			self.data_viewer_list.Append([rounders(peak["average_rt"],"0.000"), peak["hits"][0]["Name"], peak["hits"][0]["CAS"]])


	def do_select_peak(self, event):  # wxGlade: Launcher.<event_handler>
		dv_selection = self.data_viewer_list.GetFocusedItem()
		self.dv_selection_data = self.browser_peak_data[dv_selection]
		
		CAS = self.dv_selection_data["hits"][0]["CAS"]
		
		data_path = os.path.join(self.Config.CSV_DIRECTORY, "{}_peak_data.json".format(self.current_project_name)).replace("&","%26")
		samples = "/".join(self.browser_sample_list)
		self.dv_url = f"http://localhost:5000/{samples}?filename={data_path}&index={dv_selection}"
		
		if os.path.isfile(os.path.join("cache", CAS)):
			self.Data_Viewer_Ready()
		else:
			#self.dv_html.LoadURL("http://webkit.org/blog-files/bounce.html")
			self.dv_html.LoadURL(f"http://localhost:5000/loader?url={self.dv_url}")
		return
	
	def Data_Viewer_Ready(self, *args):
		if self.dv_html.GetCurrentURL() != self.dv_url:
			self.dv_html.LoadURL(self.dv_url)
		
	def dv_do_save_reference(self, event):  # wxGlade: Launcher.<event_handler>
		print("Event handler 'dv_do_save_reference' not implemented!")
		event.Skip()
	def dv_on_samples_previous(self, event):  # wxGlade: Launcher.<event_handler>
		print("Event handler 'dv_on_samples_previous' not implemented!")
		event.Skip()
	def dv_on_samples_next(self, event):  # wxGlade: Launcher.<event_handler>
		print("Event handler 'dv_on_samples_next' not implemented!")
		event.Skip()
	def dv_do_save_samples(self, event):  # wxGlade: Launcher.<event_handler>
		print("Event handler 'dv_do_save_samples' not implemented!")
		event.Skip()
	def dv_on_head2tail_previous(self, event):  # wxGlade: Launcher.<event_handler>
		print("Event handler 'dv_on_head2tail_previous' not implemented!")
		event.Skip()
	def dv_on_head2tail_next(self, event):  # wxGlade: Launcher.<event_handler>
		print("Event handler 'dv_on_head2tail_next' not implemented!")
		event.Skip()
	def dv_do_save_head2tail(self, event):  # wxGlade: Launcher.<event_handler>
		print("Event handler 'dv_do_save_head2tail' not implemented!")
		event.Skip()
	def do_delete(self, event):  # wxGlade: Launcher.<event_handler>
		dlg = wx.MessageDialog(self, "Are you sure want to delete this sample?\nThis cannot be undone!", caption="Confirm Deletion",
					  style=wx.YES_NO | wx.NO_DEFAULT | wx.CENTRE | wx.ICON_EXCLAMATION, pos=wx.DefaultPosition)
		dlg.SetYesNoLabels("Confirm",wx.ID_CANCEL)
		res = dlg.ShowModal()
		if res == wx.ID_YES:
			print("The file should now be deleted")
		event.Skip()

# end of class Launcher



"""# Load Chart Data
self.comparison_chart_data = pandas.concat(
	[self.chart_data,
	 pandas.read_csv(f"Results/CSV/{self.comparison_project}_CHART_DATA.csv", sep=";",
					 index_col=0)
	 ], axis=1, sort=False)

with open(selected_project, "r") as f:
	self.comparison_prefixList = [x.rstrip("\r\n") for x in f.readlines()]

self.comparison_chart_data.drop("Compound Names", axis=1, inplace=True)
self.comparison_chart_data['Compound Names'] = self.comparison_chart_data.index

# determine order of compounds on graph
for compound in self.comparison_chart_data.index.values:
	self.comparison_chart_data["Count"] = self.comparison_chart_data.apply(df_count, args=(
		[f"{sample} Peak Area" for sample in [self.current_project_name, self.comparison_project]],),
																		   axis=1)

self.comparison_chart_data['Compound Names'] = self.comparison_chart_data.index
self.comparison_chart_data = self.comparison_chart_data.sort_values(['Count', 'Compound Names'])
self.comparison_chart_data.fillna(0, inplace=True)"""





#!/usr/bin/env python
#-*- coding: utf-8 -*-
#
#  CalibreInfoPanel.py
#
#  This file is part of GunShotMatch
#
#  Copyright (c) 2020 Dominic Davis-Foster <dominic@davis-foster.co.uk>
#
#  GunShotMatch is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  GunShotMatch is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#
# generated by wxGlade 0.9.3 on Tue Jan 14 13:07:17 2020
#

# stdlib
import re

# 3rd party
import wx

# this package
from GuiV2 import CalibreSearch
from GuiV2.CalibreSearch.calibre_db.model import CalibreModel


# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class CalibreInfoPanel(wx.Panel):
	def __init__(self, parent, id=wx.ID_ANY,
			pos=wx.DefaultPosition, size=wx.DefaultSize,
			style=wx.TAB_TRAVERSAL, name=wx.PanelNameStr):
		
		args = (parent, id, pos, size)
		kwds = {
				"style": style,
				"name": name,
				}
				
		# begin wxGlade: CalibreInfoPanel.__init__
		kwds["style"] = kwds.get("style", 0) | wx.TAB_TRAVERSAL
		wx.Panel.__init__(self, *args, **kwds)
		self.name_value = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.BORDER_NONE | wx.TE_MULTILINE | wx.TE_PROCESS_TAB)
		self.other_names_value = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.BORDER_NONE | wx.TE_MULTILINE | wx.TE_PROCESS_TAB)
		self.rimmed_value = wx.CheckBox(self, wx.ID_ANY, "Rimmed", style=wx.CHK_3STATE | wx.CHK_ALLOW_3RD_STATE_FOR_USER)
		self.belted_value = wx.CheckBox(self, wx.ID_ANY, "Belted")
		self.bottleneck_value = wx.CheckBox(self, wx.ID_ANY, "Bottleneck")
		self.rebated_value = wx.CheckBox(self, wx.ID_ANY, "Rebated")
		self.bullet_diameter_panel = CalibreSearch.MeasurementPanel(self, "Bullet Diameter", '', wx.ID_ANY)
		self.neck_diameter_panel = CalibreSearch.MeasurementPanel(self, "Neck Diameter", '', wx.ID_ANY)
		self.shoulder_diameter_panel = CalibreSearch.MeasurementPanel(self, "Shoulder Diameter", '', wx.ID_ANY)
		self.base_diameter_panel = CalibreSearch.MeasurementPanel(self, "Base Diameter", '', wx.ID_ANY)
		self.rim_diameter_panel = CalibreSearch.MeasurementPanel(self, "Rim Diameter", '', wx.ID_ANY)
		self.rim_thickness_panel = CalibreSearch.MeasurementPanel(self, "Rim Thickness", '', wx.ID_ANY)
		self.case_length_panel = CalibreSearch.MeasurementPanel(self, "Case Length", '', wx.ID_ANY)
		self.cartridge_length_panel = CalibreSearch.MeasurementPanel(self, "Cartridge Length", '', wx.ID_ANY)

		self.__set_properties()
		self.__do_layout()
		# end wxGlade
	
		self.name_value.Bind(wx.EVT_KEY_DOWN, self.OnKeyDown)
		self.other_names_value.Bind(wx.EVT_KEY_DOWN, self.OnKeyDown)

	def __set_properties(self):
		# begin wxGlade: CalibreInfoPanel.__set_properties
		self.rimmed_value.Set3StateValue(wx.CHK_UNCHECKED)
		# end wxGlade
	
	def __do_layout(self):
		# begin wxGlade: CalibreInfoPanel.__do_layout
		self.main_grid_sizer = wx.GridBagSizer(10, 10)
		case_type_sizer = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Case Type"), wx.VERTICAL)
		case_type_grid = wx.GridSizer(2, 2, 0, 2)
		self.other_names_sizer = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Other Names"), wx.VERTICAL)
		name_sizer = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Name"), wx.VERTICAL)
		name_sizer.Add(self.name_value, 0, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 5)
		self.main_grid_sizer.Add(name_sizer, (0, 0), (1, 1), wx.EXPAND, 0)
		self.other_names_sizer.Add(self.other_names_value, 2, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 5)
		self.main_grid_sizer.Add(self.other_names_sizer, (0, 1), (1, 1), wx.EXPAND, 0)
		case_type_grid.Add(self.rimmed_value, 0, 0, 0)
		case_type_grid.Add(self.belted_value, 0, 0, 0)
		case_type_grid.Add(self.bottleneck_value, 0, 0, 0)
		case_type_grid.Add(self.rebated_value, 0, 0, 0)
		case_type_sizer.Add(case_type_grid, 1, wx.BOTTOM | wx.EXPAND | wx.TOP, 3)
		self.main_grid_sizer.Add(case_type_sizer, (1, 0), (1, 1), wx.EXPAND, 0)
		self.main_grid_sizer.Add(self.bullet_diameter_panel, (2, 0), (1, 1), wx.EXPAND, 0)
		self.main_grid_sizer.Add(self.neck_diameter_panel, (2, 1), (1, 1), wx.EXPAND, 0)
		self.main_grid_sizer.Add(self.shoulder_diameter_panel, (3, 0), (1, 1), wx.EXPAND, 0)
		self.main_grid_sizer.Add(self.base_diameter_panel, (3, 1), (1, 1), wx.EXPAND, 0)
		self.main_grid_sizer.Add(self.rim_diameter_panel, (4, 0), (1, 1), wx.EXPAND, 0)
		self.main_grid_sizer.Add(self.rim_thickness_panel, (4, 1), (1, 1), wx.EXPAND, 0)
		self.main_grid_sizer.Add(self.case_length_panel, (5, 0), (1, 1), wx.EXPAND, 0)
		self.main_grid_sizer.Add(self.cartridge_length_panel, (5, 1), (1, 1), wx.EXPAND, 0)
		self.SetSizer(self.main_grid_sizer)
		self.main_grid_sizer.Fit(self)
		self.Layout()
		# end wxGlade
		
		self.main_grid_sizer.SetItemSpan(self.other_names_sizer, wx.GBSpan(2, 1))
		self._text_ctrl_colour = self.name_value.GetBackgroundColour()
	
	def GetCaseType(self):
		return {
				"Rimmed": self.rimmed_value.Get3StateValue(),
				"Belted": self.belted_value.GetValue(),
				"Bottleneck": self.bottleneck_value.GetValue(),
				"Rebated": self.rebated_value.GetValue(),
				}
	
	def SetCaseType(self, data_dict):
		if "Rimmed" in data_dict:
			self.rimmed_value.Set3StateValue(data_dict["Rimmed"]),
		
		if "Belted" in data_dict:
			self.belted_value.SetValue(data_dict["Belted"]),
		
		if "Bottleneck" in data_dict:
			self.bottleneck_value.SetValue(data_dict["Bottleneck"]),
		
		if "Rebated" in data_dict:
			self.rebated_value.SetValue(data_dict["Rebated"]),
	
	def ClearCaseType(self):
		self.rimmed_value.Set3StateValue(wx.CHK_UNCHECKED)
		self.belted_value.SetValue(wx.CHK_UNCHECKED)
		self.bottleneck_value.SetValue(wx.CHK_UNCHECKED)
		self.rebated_value.SetValue(wx.CHK_UNCHECKED)
	
	def Clear(self):
		
		for widget in {
				self.name_value,
				self.other_names_value,
				self.bullet_diameter_panel,
				self.neck_diameter_panel,
				self.shoulder_diameter_panel,
				self.base_diameter_panel,
				self.rim_diameter_panel,
				self.rim_thickness_panel,
				self.case_length_panel,
				self.cartridge_length_panel,
				}:
			widget.Clear()
		
		self.ClearCaseType()
		
	# def LoadData(self, data_dict):
	# 	self.Clear()
	#
	# 	self.name_value.SetValue(data_dict["name"])
	#
	# 	if "other_names" in data_dict:
	# 		self.other_names_value.SetValue("\n".join(data_dict["other_names"]))
	#
	# 	if "case_type" in data_dict:
	# 		self.SetCaseType(data_dict["case_type"])
	#
	# 	if "bullet_diameter" in data_dict:
	# 		self.bullet_diameter_panel.SetValue(data_dict["bullet_diameter"])
	#
	# 	if "neck_diameter" in data_dict:
	# 		self.neck_diameter_panel.SetValue(data_dict["neck_diameter"])
	#
	# 	if "shoulder_diameter" in data_dict:
	# 		self.shoulder_diameter_panel.SetValue(data_dict["shoulder_diameter"])
	#
	# 	if "base_diameter" in data_dict:
	# 		self.base_diameter_panel.SetValue(data_dict["base_diameter"])
	#
	# 	if "rim_diameter" in data_dict:
	# 		self.rim_diameter_panel.SetValue(data_dict["rim_diameter"])
	#
	# 	if "rim_thickness" in data_dict:
	# 		self.rim_thickness_panel.SetValue(data_dict["rim_thickness"])
	#
	# 	if "case_length" in data_dict:
	# 		self.case_length_panel.SetValue(data_dict["case_length"])
	#
	# 	if "cartridge_length" in data_dict:
	# 		self.cartridge_length_panel.SetValue(data_dict["cartridge_length"])
		
	def LoadData(self, data):
		"""
		Load SQLAlchemy model
		
		:param data:
		:type data:
		:return:
		:rtype:
		"""
		self.Clear()

		self.name_value.SetValue(data.name)
		
		self.other_names_value.SetValue("\n".join(data.other_names))

		self.bullet_diameter_panel.SetValue(data.bullet_diameter)
		self.neck_diameter_panel.SetValue(data.neck_diameter)
		self.shoulder_diameter_panel.SetValue(data.shoulder_diameter)
		self.base_diameter_panel.SetValue(data.base_diameter)
		self.rim_diameter_panel.SetValue(data.rim_diameter)
		self.rim_thickness_panel.SetValue(data.rim_thickness)
		self.case_length_panel.SetValue(data.case_length)
		self.cartridge_length_panel.SetValue(data.cartridge_length)
		
		self.rimmed_value.Set3StateValue(data.case_type_rimmed),
		self.belted_value.SetValue(data.case_type_belted),
		self.bottleneck_value.SetValue(data.case_type_bottleneck),
		self.rebated_value.SetValue(data.case_type_rebated),
	
	def GetData(self):
		"""
		Return SQLAlchemy model containing data entered in the panel.
		The type will never be set with this function as the panel does
		not contain that information
		
		:return:
		:rtype:
		"""
		
		other_names = re.split(r"[^A-Za-z0-9_.]+", self.other_names_value.GetValue())
		
		case_type = self.GetCaseType()
		
		return CalibreModel(
				name=self.name_value.GetValue(),
				other_names=other_names,
				bullet_diameter=self.bullet_diameter_panel.GetValue(),
				neck_diameter=self.neck_diameter_panel.GetValue(),
				shoulder_diameter=self.shoulder_diameter_panel.GetValue(),
				base_diameter=self.base_diameter_panel.GetValue(),
				rim_diameter=self.rim_diameter_panel.GetValue(),
				rim_thickness=self.rim_thickness_panel.GetValue(),
				case_length=self.case_length_panel.GetValue(),
				cartridge_length=self.cartridge_length_panel.GetValue(),
				case_type_rimmed=case_type["Rimmed"],
				case_type_belted=case_type["Belted"],
				case_type_bottleneck=case_type["Bottleneck"],
				case_type_rebated=case_type["Rebated"],
				type='',
				)
	
	def SetEditable(self, editable=True):
		for widget in {
				self.name_value,
				self.other_names_value,
				self.bullet_diameter_panel,
				self.neck_diameter_panel,
				self.shoulder_diameter_panel,
				self.base_diameter_panel,
				self.rim_diameter_panel,
				self.rim_thickness_panel,
				self.case_length_panel,
				self.cartridge_length_panel,
				}:
			widget.SetEditable(editable)
		
		for widget in {
				self.rimmed_value,
				self.belted_value,
				self.bottleneck_value,
				self.rebated_value,
				}:
			widget.Enable(editable)
		
		if editable:
			self.name_value.SetBackgroundColour(self._text_ctrl_colour)
			self.other_names_value.SetBackgroundColour(self._text_ctrl_colour)
		else:
			self.name_value.SetBackgroundColour(self.GetBackgroundColour())
			self.other_names_value.SetBackgroundColour(self.GetBackgroundColour())
			
	
	def IsEditable(self):
		for widget in {
				self.name_value,
				self.other_names_value,
				self.bullet_diameter_panel,
				self.neck_diameter_panel,
				self.neck_diameter_panel,
				self.shoulder_diameter_panel,
				self.base_diameter_panel,
				self.rim_diameter_panel,
				self.rim_thickness_panel,
				self.case_length_panel,
				self.cartridge_length_panel,
				self.rimmed_value,
				self.belted_value,
				self.bottleneck_value,
				self.rebated_value,
				}:
			if not widget.IsEditable():
				return False
		return True
	
	def OnKeyDown(self, event):
		if event.GetKeyCode() == wx.WXK_TAB:
			flags = wx.NavigationKeyEvent.IsForward
			if event.ShiftDown():
				flags = wx.NavigationKeyEvent.IsBackward
			if event.ControlDown():
				flags = not wx.NavigationKeyEvent.WinChange
			event.GetEventObject().GetParent().Navigate(flags)
		else:
			event.Skip()

# end of class CalibreInfoPanel



#  !/usr/bin/env python
#   -*- coding: utf-8 -*-
#
#  NewCalibreDialog.py
#
#  This file is part of GunShotMatch
#
#  Copyright Â© 2020 Dominic Davis-Foster <dominic@davis-foster.co.uk>
#
#  GunShotMatch is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  GunShotMatch is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#
# generated by wxGlade 0.9.3 on Fri Dec  6 20:32:07 2019
#

# 3rd party
import wx

# this package
from GuiV2 import CalibreSearch


class NewCalibreDialog(wx.Dialog):
	def __init__(
			self, parent, id=wx.ID_ANY, title="Calibre Search", pos=wx.DefaultPosition,
			style=wx.DEFAULT_DIALOG_STYLE, name=wx.DialogNameStr
			):
		"""
		:param parent: Can be None, a frame or another dialog box.
		:type parent: wx.Window
		:param id: An identifier for the dialog. A value of -1 is taken to mean a default.
		:type id: wx.WindowID
		:param title: The title of the dialog.
		:type title: str
		:param pos: The dialog position. The value DefaultPosition indicates a
		default position, chosen by either the windowing system or wxWidgets,
		depending on platform.
		:type pos: wx.Point
		:param style: The window style.
		:type style: int
		:param name: Used to associate a name with the window, allowing the
		application user to set Motif resource values for individual dialog boxes.
		:type name: str
		"""
		
		args = (parent, id, title, pos)
		kwds = {
				"style": style,
				"name": name,
				}
	
		kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE | wx.MINIMIZE_BOX
		wx.Dialog.__init__(self, *args, **kwds)
		self.info_panel = CalibreSearch.InfoPanel(self, wx.ID_ANY)
		self.info_panel.SetEditable(True)
		
		self.btns = self.CreateStdDialogButtonSizer(wx.OK | wx.CANCEL)
		self.FindWindowById(self.GetAffirmativeId()).SetLabel("&Add")

		self.type_selection = wx.ComboBox(
				self, choices=[
						"Rifles", "Handguns", "Military Rifles",
						"Rimfire Cartridges", "Shotgun Shells",
						"Blanks / Starting Gun Cartridges"
						])

		self._do_layout()
	
		self.Bind(wx.EVT_BUTTON, self.on_cancel, id=wx.ID_CANCEL)
		self.Bind(wx.EVT_BUTTON, self.on_add, id=wx.ID_OK)
	
	def _do_layout(self):
		main_sizer = wx.BoxSizer(wx.VERTICAL)
		main_sizer.Add(self.info_panel, 1, wx.EXPAND, 0)
		
		type_outer_sizer = wx.BoxSizer(wx.HORIZONTAL)
		type_sizer = wx.StaticBoxSizer(wx.VERTICAL, self, "Category / Type")
		type_sizer.Add(self.type_selection, 0, wx.ALL | wx.EXPAND, 5)

		type_outer_sizer.Add(type_sizer, 1, wx.RIGHT | wx.EXPAND, 13)
		main_sizer.Add(type_outer_sizer, 0, wx.LEFT | wx.BOTTOM | wx.EXPAND, 7)
		
		main_sizer.Add(self.btns, 0, wx.BOTTOM | wx.TOP | wx.EXPAND, 5)
		self.SetSizer(main_sizer)
		main_sizer.Fit(self)

		info_panel_size = self.info_panel.GetSize()
		dialog_size = (info_panel_size.x + 9, info_panel_size.y + 70)
		
		self.SetSize(dialog_size)
		self.SetMinSize(dialog_size)
		self.SetMaxSize(dialog_size)
		
		self.Layout()
		self.Refresh()
	
	def on_add(self, event):
		# TODO: Validation
		
		if self.IsModal():
			self.EndModal(wx.ID_ADD)
		else:
			self.Destroy()
	
	def on_cancel(self, event):
		if self.IsModal():
			self.EndModal(wx.ID_CANCEL)
		else:
			self.Destroy()
	
	def GetData(self):
		"""
		Return the SQLAlchemy CalibreModel object containing the data entered in the dialog
		:return:
		:rtype:
		"""
		
		data = self.info_panel.GetData()
		data.type = self.type_selection.GetValue()
		
		return data


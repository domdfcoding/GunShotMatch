#!/usr/bin/env python
#   -*- coding: utf-8 -*-
#
#  AmmunitionDetailsEditor.py
"""
Frame for editing an :class:``AmmunitionDetails`` record
"""
#
#  This file is part of GunShotMatch
#
#  Copyright © 2019-2020 Dominic Davis-Foster <dominic@davis-foster.co.uk>
#
#  GunShotMatch is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  GunShotMatch is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
# generated by wxGlade 0.9.3 on Wed Dec  4 09:52:37 2019
#


# 3rd party
from domdf_wxpython_tools import coming_soon, file_dialog
import wx
from wx.propgrid import PropertyGrid

# this package
from GuiV2.GSMatch2_Core import Ammunition
from GuiV2.GSMatch2_Core.GUI.toolbars import ToolData
from GuiV2.GSMatch2_Core.IDs import *


# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class AmmunitionDetailsEditor(wx.Frame):
	"""
	Frame for editing an :class:``AmmunitionDetails`` record
	"""
	
	def __init__(
			self, parent, filename=None, id=wx.ID_ANY, title='',
			pos=wx.DefaultPosition, size=wx.DefaultSize,
			style=wx.DEFAULT_FRAME_STYLE, name="AmmunitionDetailsEditor"):
		"""
		:param parent: The window parent. This may be, and often is, None. If it is not None, the frame will be minimized when its parent is minimized and restored when it is restored (although it will still be possible to minimize
		:type parent: wx.Window
		:param filename: AmmunitionDetails file to open, Default None
		:type filename: str, optional
		:param id: The window identifier. It may take a value of -1 to indicate a default value.
		:type id: wx.WindowID, optional
		:param title: The caption to be displayed on the frame’s title bar.
		:type title: str, optional
		:param pos: The window position. The value DefaultPosition indicates a default position, chosen by either the windowing system or wxWidgets, depending on platform.
		:type pos: wx.Point, optional
		:param size: The window size. The value DefaultSize indicates a default size, chosen by either the windowing system or wxWidgets, depending on platform.
		:type size: wx.Size, optional
		:param style: The window style. See wx.Frame class description.
		:type style: int, optional
		:param name: The name of the window. This parameter is used to associate a name with the item, allowing the application user to set Motif resource values for individual windows.
		:type name: str, optional
		"""
		
		args = (parent, id)
		kwds = {
				"pos": pos,
				"size": size,
				"title": title,
				"style": style,
				"name": name,
				}
		
		# begin wxGlade: AmmunitionDetailsEditor.__init__
		kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
		wx.Frame.__init__(self, *args, **kwds)
		self.SetSize((800, 800))
		
		# Menu Bar
		self.AmmunitionDetails_menubar = wx.MenuBar()
		wxglade_tmp_menu = wx.Menu()
		wxglade_tmp_menu.Append(wx.ID_NEW, "&New Ammunition Record", "")
		self.Bind(wx.EVT_MENU, self.new_record, id=wx.ID_NEW)
		wxglade_tmp_menu.Append(wx.ID_OPEN, "&Open Ammunition Record", "")
		self.Bind(wx.EVT_MENU, self.on_open_record, id=wx.ID_OPEN)
		wxglade_tmp_menu.Append(wx.ID_SAVE, "&Save Ammunition Record", "")
		self.Bind(wx.EVT_MENU, self.on_save_record, id=wx.ID_SAVE)
		wxglade_tmp_menu.Append(wx.ID_SAVEAS, "Save Record As", "")
		self.Bind(wx.EVT_MENU, self.save_as, id=wx.ID_SAVEAS)
		wxglade_tmp_menu.Append(wx.ID_EXIT, "Close", "")
		self.Bind(wx.EVT_MENU, self.exit, id=wx.ID_EXIT)
		self.AmmunitionDetails_menubar.Append(wxglade_tmp_menu, "File")
		wxglade_tmp_menu = wx.Menu()
		wxglade_tmp_menu.Append(wx.ID_HELP, "Help", "")
		self.Bind(wx.EVT_MENU, self.on_help, id=wx.ID_HELP)
		self.AmmunitionDetails_menubar.Append(wxglade_tmp_menu, "Help")
		self.SetMenuBar(self.AmmunitionDetails_menubar)
		# Menu Bar end
		self.AmmunitionDetailsPanel = Ammunition.DetailsPanel(None, self, wx.ID_ANY)

		self.__set_properties()
		self.__do_layout()

		# end wxGlade
		
		self.filename = filename
		
		if self.filename:
			self.AmmunitionDetailsPanel.open_record(self.filename)
		else:
			self.new_record()
		
		self.__create_toolbar()
		
		self.Bind(wx.EVT_CLOSE, self.on_close)
		self.Bind(wx.propgrid.EVT_PG_CHANGED, self.on_property_changed, self.AmmunitionDetailsPanel.ammo_details_grid)
	
	def __set_properties(self):
		# begin wxGlade: AmmunitionDetailsEditor.__set_properties
		self.SetTitle("Ammunition Details Editor")
		# end wxGlade
	
	def __do_layout(self):
		# begin wxGlade: AmmunitionDetailsEditor.__do_layout
		grid_sizer = wx.GridSizer(1, 1, 0, 0)
		grid_sizer.Add(self.AmmunitionDetailsPanel, 1, wx.EXPAND, 0)
		self.SetSizer(grid_sizer)
		self.Layout()
		# end wxGlade
	
	def __create_toolbar(self):
		def get_icon(icon):
			return wx.ArtProvider.GetBitmap(icon, wx.ART_TOOLBAR, tb_icon_size)
		
		self.toolbar = self.CreateToolBar()
		self.toolbar.SetToolBitmapSize(wx.Size(*tb_icon_size))
		
		self.add_tool(
				self.toolbar,
				ToolData("New Record", get_icon(wx.ART_NEW), wx.ID_NEW, self.new_record),
				tooltip="New Record (Ctrl+N)"
				)
		
		self.add_tool(
				self.toolbar,
				ToolData("Open Record", get_icon(wx.ART_FILE_OPEN), wx.ID_OPEN, self.on_open_record),
				tooltip="Open Record (Ctrl+O)"
				)
		
		self.add_tool(
				self.toolbar,
				ToolData("Save Record", get_icon(wx.ART_FILE_SAVE), wx.ID_SAVE, self.on_save_record),
				tooltip="Save Record (Ctrl+S)"
				)
		
		self.add_tool(
				self.toolbar,
				ToolData("Save Record As", get_icon(wx.ART_FILE_SAVE_AS), wx.ID_SAVEAS, self.save_as)
				)
		
		self.add_tool(
				self.toolbar,
				ToolData("Help", get_icon(wx.ART_HELP), wx.ID_HELP, self.on_help),
				tooltip="Help (F1)"
				)
		
		# TODO: Recent records
		# recent_menu = wx.Menu()
		#
		# for ID in {ID_RECENT_0, ID_RECENT_1, ID_RECENT_2, ID_RECENT_3, ID_RECENT_4, ID_RECENT_5, ID_RECENT_6,
		# 		   ID_RECENT_7, ID_RECENT_8, ID_RECENT_9}:
		# 	recent_menu.Append(ID, "item", "")
		# 	self.Bind(wx.EVT_MENU, self.on_menu_record_recent, id=ID)
		#
		# self.toolbar.SetDropdownMenu(wx.ID_OPEN, recent_menu)
		#
		
		self.toolbar.Realize()
	
	def add_tool(self, toolbar, tool, kind=wx.ITEM_NORMAL, tooltip=None):
		added_tool = toolbar.AddTool(tool.id, tool.name, tool.icon, tooltip if tooltip else tool.name, kind)
		if tool.handler:
			self.Bind(wx.EVT_TOOL, tool.handler, added_tool, tool.id)
		return added_tool
	
	# Open
	def new_record(self, event=None):  # wxGlade: AmmunitionDetailsEditor.<event_handler>
		"""
		Event handler for creating a new ``AmmunitionDetails`` record
		"""
		
		if self.save_changes():
			# Load a blank record
			# with path(GSMatch.lib, "default.record") as default_record:
			# 	self.open_record(default_record)
			self.open_record(None)
		
		if event:
			event.Skip()
	
	def open_record(self, filename):
		"""
		Open the ``AmmunitionDetails`` record with the given filename
		"""
		
		self.filename = filename
		self.AmmunitionDetailsPanel.open_record(filename)
		self.update_title()
	
	def on_open_record(self, _):  # wxGlade: AmmunitionDetailsEditor.<event_handler>
		"""
		Event handler for opening an ``AmmunitionDetails`` records
		"""
		
		if self.save_changes():
			filename = file_dialog(self, "ammo", "Open Ammunition Details record", "ammo Files", wx.FD_DEFAULT_STYLE)
			if filename:
				self.open_record(filename)
	
	# Save
	def on_save_record(self, _):  # wxGlade: AmmunitionDetailsEditor.<event_handler>
		"""
		Event handler for saving the ``AmmunitionDetails`` records
		"""
		
		self.save_record()
	
	def save_record_dialog(self):
		"""
		Creates a to ask the user where to save the ``AmmunitionDetails`` record,
		but doesn't show the dialog
		
		:return:
		:rtype:
		"""
		
		return file_dialog(
				self, "ammo", "Save Ammunition Details record As", "ammo Files",
				style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
				)
	
	def save_changes(self):
		"""
		Save changes made to the ``AmmunitionDetails`` record
		
		:return: True if the operation completed successfully
		:rtype: bool
		"""
		
		if self.AmmunitionDetailsPanel.fileNotSaved:
			while True:
				with wx.MessageDialog(
						self,
						"Do you want to save the changes to the current Ammunition Details record?",
						"Save Changes?",
						wx.ICON_QUESTION | wx.YES_NO | wx.CANCEL
						) as dlg:
					res = dlg.ShowModal()
					
					if res == wx.ID_YES:
						if self.save_record():
							break
					elif res == wx.ID_NO:
						print("Ammo Details: Changes discarded")
						break
					else:
						return False
		
		return True
	
	def save_record(self, filename=None):
		"""
		Save the ``AmmunitionDetails`` record to the given filename.
		If no filename is given a dialog will be shown to ask the user where to save the record.

		:param filename:
		:type filename:
		
		:return: True if the operation completed successfully
		:rtype: bool
		"""
		
		if not filename:
			if not self.filename:
				filename = self.save_record_dialog()
				if filename:
					self.filename = filename
				else:
					return False
		else:
			self.filename = filename
		
		print(f"Ammo Details: Saving record as {self.filename}")
		
		if self.AmmunitionDetailsPanel.save_record(self.filename):
			self.update_title()
	
	def save_as(self, event=None):  # wxGlade: AmmunitionDetailsEditor.<event_handler>
		"""
		Event handler for saving the ``AmmunitionDetails`` record as a separate file to the one being edited
		"""
		
		filename = self.save_record_dialog()
		if filename:
			self.save_record(filename)
		
		if event:
			event.Skip()
	
	# Close
	def on_close(self, event):
		"""
		Event handler for closing the Frame, ensuring changes are saved first
		"""
		
		if event.CanVeto():
			
			if not self.save_changes():
				event.Veto()
				return
		
		self.Destroy()
	
	def exit(self, _):  # wxGlade: AmmunitionDetailsEditor.<event_handler>
		"""
		Event handler for closing the frame with the X button
		"""
		
		if self.save_changes():
			self.Destroy()
	
	# Other
	
	def on_help(self, _):  # wxGlade: AmmunitionDetailsEditor.<event_handler>
		"""
		Event handler for opening the help window
		"""
		
		coming_soon()
	
	def update_title(self):
		"""
		Method to update the title of the frame.
		Called whenever the filename changes, the file is edited, or the file is saved.
		"""
		
		if self.AmmunitionDetailsPanel.fileNotSaved:
			save_state_symbol = ' *'
		else:
			save_state_symbol = ' '
		
		if self.filename:
			filename_string = self.filename
		else:
			filename_string = 'New Record'
		
		self.SetTitle(
				f"Ammunition Details Editor:{save_state_symbol} ({filename_string})")
		
		self.AmmunitionDetailsPanel.filename_value.SetValue(filename_string)
	
	# def on_change(self, _):  # wxGlade: AmmunitionDetailsEditor.<event_handler>
	# 	self.fileNotSaved = True
	# 	self.update_title()
	#
	
	def on_property_changed(self, _):
		"""
		Event handler for one of the properties being changed
		"""
		
		self.update_title()

# end of class AmmunitionDetailsEditor

#  !/usr/bin/env python
#   -*- coding: utf-8 -*-
#
#  DatafilePanel.py
#
#  This file is part of GunShotMatch
#
#  Copyright (c) 2019-2020 Dominic Davis-Foster <dominic@davis-foster.co.uk>
#
#  GunShotMatch is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  GunShotMatch is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
# generated by wxGlade 0.9.3 on Wed Nov 27 11:51:21 2019
#


# stdlib
import pathlib
import platform

# 3rd party
from domdf_wxpython_tools.picker import file_folder_picker

# this package
from GuiV2.GSMatch2_Core.Config import internal_config
from GuiV2.GSMatch2_Core.GUI.constants import file_formats, folder_formats, windows_only_formats
from GuiV2.GSMatch2_Core.IDs import *


# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class DatafilePanel(wx.Panel):
	def __init__(self, *args, **kwds):
		# begin wxGlade: DatafilePanel.__init__
		kwds["style"] = kwds.get("style", 0) | wx.TAB_TRAVERSAL
		wx.Panel.__init__(self, *args, **kwds)
		self.jcamp_radio = wx.RadioButton(self, ID_Format_jcamp, "JCAMP-DX (*.jdx)")
		self.mzml_radio = wx.RadioButton(self, ID_Format_mzML, "HUPO-PSI mzML (*.mzml)")
		self.andi_radio = wx.RadioButton(self, ID_Format_ANDI, "ANDI-MS / netCDF (*.cdf)")
		self.masshunter_radio = wx.RadioButton(self, ID_Format_MassHunter, "Agilent MassHunter (*.d)")
		self.waters_raw_radio = wx.RadioButton(self, ID_Format_WatersRAW, "Waters MassLynx / PerkinElmer TurboMass (*.raw)")
		self.thermo_raw_radio = wx.RadioButton(self, ID_Format_ThermoRAW, "ThermoFisher RAW (.raw)")
		self.expr_picker = file_folder_picker(self, wx.ID_ANY, style=wx.TAB_TRAVERSAL|wx.FD_OPEN)

		self.__set_properties()
		self.__do_layout()
		# end wxGlade
		
		self.format_radio_btns = {
				ID_Format_MassHunter: self.masshunter_radio,
				ID_Format_WatersRAW: self.waters_raw_radio,
				ID_Format_jcamp: self.jcamp_radio,
				ID_Format_ThermoRAW: self.thermo_raw_radio,
				ID_Format_mzML: self.mzml_radio,
				ID_Format_ANDI: self.andi_radio,
				}
		
		# Disable formats that are only supported on Windows
		if platform.system() != "Windows":
			for ID in windows_only_formats:
				self.format_radio_btns[ID].Enable(False)
		
		self.Bind(wx.EVT_RADIOBUTTON, self.on_radio_change, self.jcamp_radio)
		self.Bind(wx.EVT_RADIOBUTTON, self.on_radio_change, self.mzml_radio)
		self.Bind(wx.EVT_RADIOBUTTON, self.on_radio_change, self.andi_radio)
		self.Bind(wx.EVT_RADIOBUTTON, self.on_radio_change, self.masshunter_radio)
		self.Bind(wx.EVT_RADIOBUTTON, self.on_radio_change, self.waters_raw_radio)
		self.Bind(wx.EVT_RADIOBUTTON, self.on_radio_change, self.thermo_raw_radio)
		self.jcamp_radio.SetValue(True)
		
		self.expr_picker.set_files_mode()
		self.expr_picker.file_extension = "jdx"
		self.expr_picker.filetypestring = "JCAMP-DX files"
		
		self.expr_picker.SetValue(str(internal_config.last_datafile))
		self.Bind(wx.EVT_TEXT, self.on_datafile_change, self.expr_picker.dir_value)
		self.expr_picker.dialog_title = "Select Experiment File"
	
	def __set_properties(self):
		# begin wxGlade: DatafilePanel.__set_properties
		self.masshunter_radio.SetToolTip("This format is only supported on Windows")
		self.thermo_raw_radio.SetToolTip("This format is not currently supported")
		self.thermo_raw_radio.Enable(False)
		self.expr_picker.SetMinSize((-1, 30))
		self.expr_picker.SetMaxSize((-1, 30))
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: DatafilePanel.__do_layout
		sizer_1 = wx.BoxSizer(wx.VERTICAL)
		expr_picker_box = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Datafile: "), wx.VERTICAL)
		self.filetype_box = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Filetype: "), wx.VERTICAL)
		filetype_grid = wx.FlexGridSizer(3, 2, 0, 0)
		filetype_grid.Add(self.jcamp_radio, 0, wx.LEFT | wx.TOP, 5)
		filetype_grid.Add(self.mzml_radio, 0, wx.LEFT | wx.TOP, 5)
		filetype_grid.Add(self.andi_radio, 0, wx.LEFT | wx.TOP, 5)
		filetype_grid.Add(self.masshunter_radio, 0, wx.LEFT | wx.TOP, 5)
		filetype_grid.Add(self.waters_raw_radio, 0, wx.LEFT | wx.TOP, 5)
		filetype_grid.Add(self.thermo_raw_radio, 0, wx.BOTTOM | wx.LEFT | wx.TOP, 5)
		self.filetype_box.Add(filetype_grid, 1, wx.EXPAND, 0)
		sizer_1.Add(self.filetype_box, 0, 0, 0)
		expr_picker_box.Add(self.expr_picker, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, 2)
		sizer_1.Add(expr_picker_box, 0, wx.EXPAND | wx.TOP, 10)
		self.SetSizer(sizer_1)
		sizer_1.Fit(self)
		self.Layout()
		# end wxGlade
	
	def on_datafile_change(self, _):
		print("datafile_changed")
		internal_config.last_datafile = self.expr_picker.GetValue()
	
	def on_radio_change(self, event):
		"""
		Event handler for radio buttons changing, to update variables
		indicating the selected format and extension
		"""
		
		for ID, button in self.format_radio_btns.items():
			if button.GetValue():
				selected_button = ID
		
				if selected_button in file_formats:
					self.expr_picker.set_files_mode()
					if selected_button == ID_Format_ANDI:
						self.expr_picker.file_extension = "cdf"
						self.expr_picker.filetypestring = "ANDI-MS files"
					elif selected_button == ID_Format_mzML:
						self.expr_picker.file_extension = "mzml"
						self.expr_picker.filetypestring = "mzML files"
					elif selected_button == ID_Format_jcamp:
						self.expr_picker.file_extension = "jdx"
						self.expr_picker.filetypestring = "JCAMP-DX files"
					else:
						self.expr_picker.file_extension = "*"
						self.expr_picker.filetypestring = "All files"
				
				elif selected_button in folder_formats:
					self.expr_picker.set_folders_mode()
				else:
					raise ValueError("Unknown format type")
				
				break

		
		event.Skip()
	
	def validate_datafile(self):
		"""
		Validate the contents of the datafile text control.
		"""
		
		text = self.expr_picker.GetValue()
		
		for ID, button in self.format_radio_btns.items():
			if button.GetValue():
				selected_button = ID
		
				if len(text) == 0:
					wx.MessageBox("Please choose a datafile for the Experiment.", "Error", style=wx.ICON_ERROR)
					self.expr_picker.SetBackgroundColour("pink")
					self.expr_picker.SetFocus()
					self.expr_picker.Refresh()
					return False
				
				elif (selected_button in file_formats and not pathlib.Path(text).absolute().is_file()) \
						or (selected_button in folder_formats and not pathlib.Path(text).absolute().is_dir()):
					
					# TODO: check validity of selected datafile for the chosen format
					
					wx.MessageBox("The selected datafile does not exist.", "Error", style=wx.ICON_ERROR)
					self.expr_picker.SetBackgroundColour("pink")
					self.expr_picker.SetFocus()
					self.expr_picker.Refresh()
					return False
				else:
					self.expr_picker.SetBackgroundColour((242, 241, 240, 255))
					self.expr_picker.Refresh()
					return True

# end of class DatafilePanel

#  !/usr/bin/env python
#   -*- coding: utf-8 -*-
#
#  NewExperimentDialog.py
#
#  This file is part of GunShotMatch
#
#  Copyright (c) 2019-2020 Dominic Davis-Foster <dominic@davis-foster.co.uk>
#
#  GunShotMatch is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  GunShotMatch is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
# generated by wxGlade 0.9.3 on Wed Nov 27 11:51:21 2019
#


# stdlib
import getpass
import socket
import threading

# 3rd party
from domdf_wxpython_tools import file_dialog
from domdf_wxpython_tools import FileBrowseCtrl

# this package
from GuiV2.GSMatch2_Core import Experiment, Method
from GuiV2.GSMatch2_Core.Config import internal_config
from GuiV2.GSMatch2_Core.Experiment.DatafilePanel import DatafilePanel
from GuiV2.GSMatch2_Core.Experiment.PropertiesPanel import PropertiesPanel
from GuiV2.GSMatch2_Core.GUI.prog_dialog_indeterminate import ProgDialogThread
from GuiV2.GSMatch2_Core.GUI.validators import ExperimentMethodValidator
from GuiV2.GSMatch2_Core.IDs import *


# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class NewExperimentDialog(wx.Dialog, Method.MethodPickerMixin):
	"""
	Dialog for creating a new Experiment
	"""
	
	def __init__(self, *args, **kwds):
		"""
		:param parent: The parent window.
		:type parent: wx.Window
		:param id: An identifier for the dialog. wx.ID_ANY is taken to mean a default.
		:type id: wx.WindowID, optional
		:param pos: The dialog position. The value ::wxDefaultPosition indicates a default position,
		:type pos: wx.Point, optional
			chosen by either the windowing system or wxWidgets, depending on platform.
		:param size: The dialog size. The value ::wxDefaultSize indicates a default size, chosen by
		:type size: wx.Size, optional
			either the windowing system or wxWidgets, depending on platform.
		:param style: The window style. See wxPanel.
		:type style: int, optional
		:param name: Window name.
		:type name: str, optional
		"""
		
		# begin wxGlade: NewExperimentDialog.__init__
		kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
		wx.Dialog.__init__(self, *args, **kwds)
		self.SetSize((650, 580))
		self.main_panel = wx.Panel(self, wx.ID_ANY)
		self.properties = PropertiesPanel(self.main_panel, wx.ID_ANY)
		self.datafile = DatafilePanel(self.main_panel, wx.ID_ANY)
		self.meth_picker = FileBrowseCtrl(self.main_panel, wx.ID_ANY, style=wx.TAB_TRAVERSAL|wx.FD_OPEN, dialogTitle="Choose a Method", fileMask="Method Files (*.method)|*.method", labelText='')
		self.new_meth_button = wx.Button(self.main_panel, wx.ID_ANY, "New")
		self.edit_meth_button = wx.Button(self.main_panel, wx.ID_ANY, "Edit")

		self.__set_properties()
		self.__do_layout()
		# end wxGlade
		Method.MethodPickerMixin.__init__(self)
		
		self.properties.user.SetValue(getpass.getuser())
		self.properties.device.SetValue(socket.gethostname())
		
		self.Bind(wx.EVT_BUTTON, self.on_create, id=self.ok_btn_id)
		self.SetExtraStyle(wx.WS_EX_VALIDATE_RECURSIVELY)
		self.filenames = []
		
		self.experiment = Experiment.Experiment.new_empty()
		
		# pub.subscribe(self.updateProgress, "experiment_creation_progress")
	
	def __set_properties(self):
		# begin wxGlade: NewExperimentDialog.__set_properties
		self.SetTitle("New Experiment")
		self.SetSize((650, 580))
		self.meth_picker.SetMinSize((-1, 30))
		self.meth_picker.SetValidator(ExperimentMethodValidator())
		self.new_meth_button.SetMinSize((-1, 29))
		self.edit_meth_button.SetMinSize((-1, 29))
		# end wxGlade
		
		self.meth_picker.SetValue(str(internal_config.last_method))
		self.Bind(wx.EVT_TEXT, self.on_method_change, self.meth_picker)
		
		self.meth_picker.dialog_title = "Select Method File"
		
	def __do_layout(self):
		# begin wxGlade: NewExperimentDialog.__do_layout
		outer_sizer = wx.BoxSizer(wx.VERTICAL)
		main_sizer = wx.BoxSizer(wx.VERTICAL)
		meth_picker_box = wx.StaticBoxSizer(wx.StaticBox(self.main_panel, wx.ID_ANY, "Method: "), wx.VERTICAL)
		meth_picker_sizer = wx.BoxSizer(wx.HORIZONTAL)
		intro_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Create a New Experiment")
		intro_label.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
		main_sizer.Add(intro_label, 0, 0, 5)
		static_line_1 = wx.StaticLine(self.main_panel, wx.ID_ANY)
		main_sizer.Add(static_line_1, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 6)
		main_sizer.Add(self.properties, 1, wx.EXPAND, 0)
		static_line_2 = wx.StaticLine(self.main_panel, wx.ID_ANY)
		main_sizer.Add(static_line_2, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 6)
		main_sizer.Add(self.datafile, 1, wx.EXPAND, 0)
		meth_picker_box.Add(self.meth_picker, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND | wx.RIGHT | wx.TOP, 2)
		meth_picker_sizer.Add(self.new_meth_button, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT | wx.RIGHT, 5)
		meth_picker_sizer.Add(self.edit_meth_button, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 5)
		meth_picker_box.Add(meth_picker_sizer, 1, wx.EXPAND, 0)
		main_sizer.Add(meth_picker_box, 1, wx.EXPAND | wx.TOP, 10)
		self.main_panel.SetSizer(main_sizer)
		outer_sizer.Add(self.main_panel, 1, wx.ALL | wx.EXPAND, 10)
		self.SetSizer(outer_sizer)
		self.Layout()
		# end wxGlade
		
		# Buttons at bottom of dialog
		btnsizer = self.CreateSeparatedButtonSizer(wx.OK | wx.CANCEL)
		self.ok_btn_id = self.GetAffirmativeId()
		self.FindWindow(self.ok_btn_id).SetLabel("Create")
		outer_sizer.Add(btnsizer, 0, wx.ALIGN_RIGHT | wx.EXPAND | wx.BOTTOM, 5)
	
	def on_create(self, event=None):
		"""
		Event handler for 'Create' button being pressed.

		Creates the Experiment
		"""
		
		if self.Validate() and self.datafile.validate_datafile():
			# Ask the user where to save the experiment
			filename = file_dialog(
				self, "expr", "Save Experiment", "Experiment",
				style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT,
				defaultDir=str(internal_config.last_experiment)
				)
			
			if not filename:
				return
			
			self.filename = filename
			
			internal_config.last_experiment = filename
			
			# Determine filetype
			for ID, button in self.datafile.format_radio_btns.items():
				if button.GetValue():
					selected_button = ID
					
					# Proceed to create the Experiment
					self.experiment.name = self.properties.name.GetValue()
					self.experiment.description.value = self.properties.description.GetValue()
					self.experiment.method.value = self.meth_picker.GetValue()
					
					print("Now the experiment will be created")
					
					ExperimentProgressDialog(self, self.experiment, self.datafile.expr_picker.GetValue(), selected_button)
					
					return
			

class ExperimentThread(threading.Thread):
	"""
	Thread for creating the Experiment
	"""
	
	def __init__(self, experiment, original_filename, original_filetype):
		"""
		:param experiment: The :class:`Experiment` object to create the experiment from.
		:type experiment:
		:param original_filename: The filename of the original datafile to create the experiment from.
		:type original_filename: str
		:param original_filetype: The filetype of the datafile the experiment is to be created from.
		:type original_filetype:
		"""
		
		threading.Thread.__init__(self)
		
		self.experiment = experiment
		self.original_filename = str(original_filename)
		self.original_filetype = int(original_filetype)
		# self.start()
	
	def run(self):
		"""
		Starts the Thread. Don't call this directly; use ``Thread.start()`` instead.
		"""
		print("Experiment Creation in Progress...")
		
		self.experiment.run(self.original_filename, self.original_filetype)


class ExperimentProgressDialog(ProgDialogThread):
	def __init__(self, parent, experiment, original_filename, original_filetype):
		"""
		:param parent:
		:type parent:
		:param experiment: The :class:`Experiment` object to create the experiment from.
		:type experiment:
		:param original_filename: The filename of the original datafile to create the experiment from.
		:type original_filename: str
		:param original_filetype: The filetype of the datafile the experiment is to be created from.
		:type original_filetype:
		"""
		
		self.parent = parent

		self.experiment = experiment
		
		thread = ExperimentThread(self.experiment, original_filename, original_filetype)
		
		ProgDialogThread.__init__(self, thread, "Experiment", "Experiment Creation In Progress...", 100, parent)
	
	def updateProgress(self, msg):
		"""
		Event handler for updating the progress bar
		"""
		
		self.Pulse()
		
		if msg == "Dead":
			# Thread is dead because Experiment has been created
			
			self.experiment.store(self.parent.filename)
			self.parent.filenames.append(self.parent.filename)
			
			self.parent.filename = None
			
			print("Experiment Created")
			with wx.MessageDialog(
					self,
					"Experiment Created Successfully.\nDo you want to create another Experiment?",
					"Experiment Created",
					wx.ICON_QUESTION | wx.YES_NO
					) as dlg:
				res = dlg.ShowModal()
			
			if res != wx.ID_YES:
				if self.parent.IsModal():
					wx.CallAfter(self.parent.EndModal, wx.ID_OK)
				else:
					wx.CallAfter(self.parent.Destroy)
			
			self.Destroy()


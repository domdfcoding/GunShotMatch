#  !/usr/bin/env python
#   -*- coding: utf-8 -*-
#
#  SortFilterDialog.py
#
"""
Dialog for configuring filter and sorting for IdentificationPanel
"""
#
#  This file is part of GunShotMatch
#
#  Copyright (c) 2020 Dominic Davis-Foster <dominic@davis-foster.co.uk>
#
#  GunShotMatch is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  GunShotMatch is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#
# generated by wxGlade 0.9.3 on Tue Feb  4 15:39:04 2020
#

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

Sort_RT = ID_Sort_RT = wx.NewIdRef()
Sort_Area = ID_Sort_Area = wx.NewIdRef()
Sort_Hit = ID_Sort_Hit = wx.NewIdRef()
Sort_Name = ID_Sort_Name = wx.NewIdRef()
Sort_MF = ID_Sort_MF = wx.NewIdRef()
Sort_RMF = ID_Sort_RMF = wx.NewIdRef()
Sort_CAS = ID_Sort_CAS = wx.NewIdRef()


class SortFilterDialog(wx.Dialog):
	def __init__(self, parent, *args, **kwds):
		args = (parent, *args)
		self.parent = parent
		# begin wxGlade: SortFilterDialog.__init__
		kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER
		wx.Dialog.__init__(self, *args, **kwds)
		self.SetSize((500, 360))
		self.main_panel = wx.Panel(self, wx.ID_ANY)
		self.sort_rt = wx.RadioButton(self.main_panel, ID_Sort_RT, "Retention Time", style=wx.RB_GROUP)
		self.sort_area = wx.RadioButton(self.main_panel, ID_Sort_Area, "Peak Area")
		self.peak_descending_check = wx.CheckBox(self.main_panel, wx.ID_ANY, "Descending")
		self.sort_num = wx.RadioButton(self.main_panel, ID_Sort_Hit, "Hit Number", style=wx.RB_GROUP)
		self.sort_name = wx.RadioButton(self.main_panel, ID_Sort_Name, "Name")
		self.sort_mf = wx.RadioButton(self.main_panel, ID_Sort_MF, "Match Factor")
		self.sort_cas = wx.RadioButton(self.main_panel, ID_Sort_CAS, "CAS Number")
		self.sort_rmf = wx.RadioButton(self.main_panel, ID_Sort_RMF, "Reverse Match Factor")
		self.hit_descending_check = wx.CheckBox(self.main_panel, wx.ID_ANY, "Descending")
		self.min_rt_value = wx.SpinCtrlDouble(self.main_panel, wx.ID_ANY, "0.0", min=0.0, max=100.0)
		self.max_rt_value = wx.SpinCtrlDouble(self.main_panel, wx.ID_ANY, "0.0", min=0.0, max=100.0)
		self.n_hits_check = wx.CheckBox(self.main_panel, wx.ID_ANY, "Enable")
		self.n_hits_value = wx.SpinCtrlDouble(self.main_panel, wx.ID_ANY, "0.0", min=0.0, max=50.0)
		self.min_area_value = wx.SpinCtrlDouble(self.main_panel, wx.ID_ANY, "0.0", min=0.0, max=100.0)
		self.max_area_value = wx.SpinCtrlDouble(self.main_panel, wx.ID_ANY, "0.0", min=0.0, max=100.0)
		self.min_mf_value = wx.SpinCtrlDouble(self.main_panel, wx.ID_ANY, "0.0", min=0.0, max=1000.0)
		self.min_rmf_value = wx.SpinCtrlDouble(self.main_panel, wx.ID_ANY, "0.0", min=0.0, max=1000.0)
		self.cancel_btn = wx.Button(self, wx.ID_CANCEL, "")
		self.reset_btn = wx.Button(self, wx.ID_ANY, "Reset")
		self.apply_btn = wx.Button(self, wx.ID_CANCEL, "")
		self.ok_btn = wx.Button(self, wx.ID_OK, "")

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.on_rt_change, self.min_rt_value)
		self.Bind(wx.EVT_TEXT, self.on_rt_change, self.min_rt_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_rt_change, self.min_rt_value)
		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.on_rt_change, self.max_rt_value)
		self.Bind(wx.EVT_TEXT, self.on_rt_change, self.max_rt_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_rt_change, self.max_rt_value)
		self.Bind(wx.EVT_CHECKBOX, self.on_toggle_n_hits, self.n_hits_check)
		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.on_area_change, self.min_area_value)
		self.Bind(wx.EVT_TEXT, self.on_area_change, self.min_area_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_area_change, self.min_area_value)
		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.on_area_change, self.max_area_value)
		self.Bind(wx.EVT_TEXT, self.on_area_change, self.max_area_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_area_change, self.max_area_value)
		# end wxGlade
		
		# Populate the settings
		self.load_settings()
		self.Bind(wx.EVT_BUTTON, self.on_ok, id=wx.ID_OK)
		self.Bind(wx.EVT_BUTTON, self.on_reset, id=wx.ID_NO)
		self.Bind(wx.EVT_BUTTON, self.on_apply, id=wx.ID_APPLY)

	def __set_properties(self):
		# begin wxGlade: SortFilterDialog.__set_properties
		self.SetTitle("Sort & Filter")
		self.SetSize((500, 360))
		self.sort_rt.SetToolTip("Sort the Peaks by their retention times")
		self.sort_rt.SetValue(1)
		self.sort_area.SetToolTip("Sort the Peaks by their areas")
		self.sort_num.SetToolTip("Sort the hits by their hit number")
		self.sort_num.SetValue(1)
		self.sort_name.SetToolTip("Sort the hits by their name")
		self.sort_mf.SetToolTip("Sort the hits by their match factor")
		self.sort_cas.SetToolTip("Sort the hits by their CAS number")
		self.sort_rmf.SetToolTip("Sort the hits by their reverse match factor")
		self.min_rt_value.SetMinSize((-1, 29))
		self.min_rt_value.SetToolTip("Show only peaks after this time")
		self.min_rt_value.SetDigits(2)
		self.max_rt_value.SetMinSize((-1, 29))
		self.max_rt_value.SetToolTip("Show only peaks before this time")
		self.max_rt_value.SetDigits(2)
		self.n_hits_check.SetMinSize((-1, 29))
		self.n_hits_check.SetToolTip("Show only hits up to this value. Note that this is applied before filtering by match factor.")
		self.n_hits_value.SetMinSize((-1, 29))
		self.n_hits_value.SetToolTip("Show only hits up to this value. Note that this is applied before filtering by match factor.")
		self.n_hits_value.Enable(False)
		self.n_hits_value.SetDigits(0)
		self.min_area_value.SetMinSize((-1, 29))
		self.min_area_value.SetToolTip("Show only peaks with a greater area than this")
		self.min_area_value.SetDigits(2)
		self.max_area_value.SetMinSize((-1, 29))
		self.max_area_value.SetToolTip("Show only peaks with a smaller area than this")
		self.max_area_value.SetDigits(2)
		self.min_mf_value.SetMinSize((-1, 29))
		self.min_mf_value.SetToolTip("Show only hits with a match factor higher than this value")
		self.min_mf_value.SetDigits(0)
		self.min_mf_value.SetIncrement(10.0)
		self.min_rmf_value.SetMinSize((-1, 29))
		self.min_rmf_value.SetToolTip("Show only hits with a reverse match factor higher than this value")
		self.min_rmf_value.SetDigits(0)
		self.min_rmf_value.SetIncrement(10.0)
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: SortFilterDialog.__do_layout
		outer_sizer = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_2 = wx.GridSizer(1, 4, 0, 0)
		grid_sizer_1 = wx.FlexGridSizer(3, 2, 5, 10)
		hits_match_box = wx.StaticBoxSizer(wx.StaticBox(self.main_panel, wx.ID_ANY, "Minimum Match Factor: "), wx.VERTICAL)
		hits_match_grid = wx.FlexGridSizer(2, 2, 5, 2)
		peaks_area_box = wx.StaticBoxSizer(wx.StaticBox(self.main_panel, wx.ID_ANY, "Filter By Peak Area: "), wx.VERTICAL)
		peaks_area_grid = wx.FlexGridSizer(2, 2, 5, 2)
		n_hits_box = wx.StaticBoxSizer(wx.StaticBox(self.main_panel, wx.ID_ANY, "Number of Hits: "), wx.VERTICAL)
		peaks_rt_box = wx.StaticBoxSizer(wx.StaticBox(self.main_panel, wx.ID_ANY, "Filter By Retention Time: "), wx.VERTICAL)
		peaks_rt_grid = wx.FlexGridSizer(2, 2, 5, 2)
		sort_hits_box = wx.StaticBoxSizer(wx.StaticBox(self.main_panel, wx.ID_ANY, "Sort Hits By: "), wx.VERTICAL)
		hits_sort_by_grid = wx.GridSizer(3, 2, 0, 0)
		peaks_sort_by_sizer = wx.StaticBoxSizer(wx.StaticBox(self.main_panel, wx.ID_ANY, "Sort Peaks By: "), wx.VERTICAL)
		peaks_sort_by_sizer.Add(self.sort_rt, 0, wx.LEFT, 2)
		peaks_sort_by_sizer.Add(self.sort_area, 0, wx.LEFT, 2)
		peaks_sort_by_sizer.Add(self.peak_descending_check, 0, wx.BOTTOM | wx.LEFT, 2)
		grid_sizer_1.Add(peaks_sort_by_sizer, 1, wx.EXPAND | wx.TOP, 3)
		hits_sort_by_grid.Add(self.sort_num, 0, wx.LEFT, 2)
		hits_sort_by_grid.Add(self.sort_name, 0, wx.LEFT, 0)
		hits_sort_by_grid.Add(self.sort_mf, 0, wx.LEFT, 2)
		hits_sort_by_grid.Add(self.sort_cas, 0, 0, 2)
		hits_sort_by_grid.Add(self.sort_rmf, 0, wx.LEFT, 2)
		sort_hits_box.Add(hits_sort_by_grid, 1, wx.EXPAND, 0)
		sort_hits_box.Add(self.hit_descending_check, 0, wx.BOTTOM | wx.LEFT, 2)
		grid_sizer_1.Add(sort_hits_box, 1, wx.EXPAND | wx.TOP, 3)
		min_rt_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Min: ")
		min_rt_label.SetToolTip("Show only peaks after this time")
		peaks_rt_grid.Add(min_rt_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 2)
		peaks_rt_grid.Add(self.min_rt_value, 0, 0, 0)
		max_rt_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Max: ")
		max_rt_label.SetToolTip("Show only peaks before this time")
		peaks_rt_grid.Add(max_rt_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 2)
		peaks_rt_grid.Add(self.max_rt_value, 0, 0, 0)
		peaks_rt_box.Add(peaks_rt_grid, 0, wx.ALL, 2)
		grid_sizer_1.Add(peaks_rt_box, 1, wx.EXPAND, 0)
		n_hits_box.Add(self.n_hits_check, 0, wx.LEFT | wx.RIGHT | wx.TOP, 2)
		n_hits_box.Add((20, 5), 0, 0, 0)
		n_hits_box.Add(self.n_hits_value, 0, wx.BOTTOM | wx.LEFT | wx.RIGHT, 7)
		grid_sizer_1.Add(n_hits_box, 1, wx.EXPAND, 0)
		min_area_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Min: ")
		min_area_label.SetToolTip("Show only peaks with a greater area than this")
		peaks_area_grid.Add(min_area_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 2)
		peaks_area_grid.Add(self.min_area_value, 0, 0, 0)
		max_area_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Max: ")
		max_area_label.SetToolTip("Show only peaks with a smaller area than this")
		peaks_area_grid.Add(max_area_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 2)
		peaks_area_grid.Add(self.max_area_value, 0, 0, 0)
		peaks_area_box.Add(peaks_area_grid, 0, wx.ALL, 2)
		grid_sizer_1.Add(peaks_area_box, 1, wx.EXPAND, 0)
		min_mf_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Match: ")
		min_mf_label.SetToolTip("Show only hits with a match factor higher than this value")
		hits_match_grid.Add(min_mf_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 2)
		hits_match_grid.Add(self.min_mf_value, 0, 0, 0)
		min_rmf_label = wx.StaticText(self.main_panel, wx.ID_ANY, "R Match: ")
		min_rmf_label.SetToolTip("Show only hits with a reverse match factor higher than this value")
		hits_match_grid.Add(min_rmf_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 2)
		hits_match_grid.Add(self.min_rmf_value, 0, 0, 0)
		hits_match_box.Add(hits_match_grid, 0, wx.ALL, 2)
		grid_sizer_1.Add(hits_match_box, 1, wx.EXPAND, 0)
		self.main_panel.SetSizer(grid_sizer_1)
		outer_sizer.Add(self.main_panel, 1, wx.EXPAND | wx.LEFT | wx.RIGHT, 10)
		grid_sizer_2.Add(self.cancel_btn, 0, 0, 0)
		grid_sizer_2.Add(self.reset_btn, 0, 0, 0)
		grid_sizer_2.Add(self.apply_btn, 0, 0, 0)
		grid_sizer_2.Add(self.ok_btn, 0, wx.RIGHT, 6)
		outer_sizer.Add(grid_sizer_2, 1, wx.ALIGN_RIGHT | wx.RIGHT | wx.TOP, 10)
		self.SetSizer(outer_sizer)
		self.Layout()
		# end wxGlade
		
		# self.btns = self.CreateStdDialogButtonSizer(wx.OK | wx.APPLY | wx.CANCEL | wx.NO)
		# print(self.btns.GetChildren())
		# for child in self.btns.GetChildren():
		# 	widget = child.GetWindow()
		# 	if isinstance(widget, wx.Button):
		#
		# no_btn = self.FindWindowById(wx.ID_NO)
		# no_btn.SetLabel("&Reset")
		# print(no_btn.GetLabel())
		#
		# outer_sizer.Add(self.btns, 0, wx.ALL | wx.EXPAND, 5)
		# self.SetSizer(outer_sizer)
		# self.Layout()
	
	def set_peak_sort(self, by, descending=False):
		"""
		
		:param by: The criteria to sort the peaks by
		:type by:
		:param descending: Whether the peaks should be sorted in descending order
		:type descending: bool
		"""
		
		self.peak_descending_check.SetValue(descending)
		
		if by == Sort_RT:
			self.sort_rt.SetValue(1)
		elif by == Sort_Area:
			self.sort_area.SetValue(1)
		else:
			raise ValueError("Unknown criteria")
	
	def get_peak_sort(self):
		
		descending = self.peak_descending_check.GetValue()
		
		if self.sort_rt.GetValue():
			return Sort_RT, descending
		elif self.sort_area.GetValue():
			return Sort_Area, descending
		
	def set_hit_sort(self, by, descending=False):
		"""
		
		:param by: The criteria to sort the hits by
		:type by:
		:param descending: Whether the hits should be sorted in descending order
		:type descending: bool
		"""
		
		self.hit_descending_check.SetValue(descending)
		
		if by == Sort_Hit:
			self.sort_num.SetValue(1)
		elif by == Sort_Name:
			self.sort_name.SetValue(1)
		elif by == Sort_MF:
			self.sort_mf.SetValue(1)
		elif by == Sort_RMF:
			self.sort_rmf.SetValue(1)
		elif by == Sort_CAS:
			self.sort_cas.SetValue(1)
		else:
			raise ValueError("Unknown criteria")
	
	def get_hit_sort(self):
		
		descending = self.hit_descending_check.GetValue()
		
		if self.sort_num.GetValue():
			return Sort_Hit, descending
		elif self.sort_name.GetValue():
			return Sort_Name, descending
		elif self.sort_mf.GetValue():
			return Sort_MF, descending
		elif self.sort_rmf.GetValue():
			return Sort_RMF, descending
		elif self.sort_cas.GetValue():
			return Sort_CAS, descending
	
	def _load_area_settings(self):
		self.min_area_value.SetMin(self.parent.min_area)
		self.max_area_value.SetMin(self.parent.min_area)
		self.min_area_value.SetMax(self.parent.max_area)
		self.max_area_value.SetMax(self.parent.max_area)
		self.min_area_value.SetValue(self.parent.filter_min_area)
		self.max_area_value.SetValue(self.parent.filter_max_area)
		self.min_area_value.SetIncrement(1000.0)
		self.max_area_value.SetIncrement(1000.0)
	
	def _load_rt_settings(self):
		# Find min rt in minutes and round down to 2dp
		min_rt = self.parent.min_rt / 60 // 0.01 / 100
		filter_min_rt = self.parent.filter_min_rt / 60 // 0.01 / 100
		
		# Find max rt in minutes and round up to 2dp
		max_rt = round(self.parent.max_rt / 60, 2)
		filter_max_rt = round(self.parent.filter_max_rt / 60, 2)
		
		self.min_rt_value.SetMin(min_rt)
		self.max_rt_value.SetMin(min_rt)
		self.min_rt_value.SetMax(max_rt)
		self.max_rt_value.SetMax(max_rt)
		self.min_rt_value.SetValue(filter_min_rt)
		self.max_rt_value.SetValue(filter_max_rt)
	
	def _load_mf_settings(self):
		# Min MF and RMF
		self.min_mf_value.SetValue(self.parent.min_mf)
		self.min_rmf_value.SetValue(self.parent.min_rmf)
	
	def _load_n_hits_settings(self):
		# n_hits
		self.n_hits_check.SetValue(self.parent.n_hits)
		self.n_hits_value.Enable(self.parent.n_hits)
	
	def _load_sort_settings(self):
		self.set_peak_sort(self.parent.peak_sort, self.parent.peak_descending)
		self.set_hit_sort(self.parent.hit_sort, self.parent.hit_descending)
	
	def load_settings(self):
		self._load_rt_settings()
		self._load_area_settings()
		self._load_sort_settings()
		self._load_mf_settings()
		self._load_n_hits_settings()
		
	def on_apply(self, event):
		"""
		Handler for user pressing Apply button

		:param event:
		:type event:
		"""
		
		self.apply_settings()
	
	def _apply_rt_settings(self):
		self.parent.filter_min_rt = self.min_rt_value.GetValue() * 60
		self.parent.filter_max_rt = self.max_rt_value.GetValue() * 60
		
	def _apply_area_settings(self):
		self.parent.filter_min_area = self.min_area_value.GetValue()
		self.parent.filter_max_area = self.max_area_value.GetValue()
		
	def _apply_sort_settings(self):
		self.parent.peak_sort, self.parent.peak_descending = self.get_peak_sort()
		self.parent.hit_sort, self.parent.hit_descending = self.get_hit_sort()
		
	def _apply_mf_settings(self):
		self.parent.min_mf = self.min_mf_value.GetValue()
		self.parent.min_rmf = self.min_rmf_value.GetValue()
		
	def _apply_n_hits_settings(self):
		if self.n_hits_check.GetValue():
			self.parent.n_hits = int(self.n_hits_value.GetValue())
		else:
			self.parent.n_hits = 0
	
	def apply_settings(self):
		self._apply_area_settings()
		self._apply_rt_settings()
		self._apply_sort_settings()
		self._apply_mf_settings()
		self._apply_n_hits_settings()
		
		self.parent.populate_tree()
	
	def on_ok(self, event):
		"""
		Handler for user pressing OK button

		:param event:
		:type event:
		"""
		
		self.apply_settings()
		self.Show(False)
	
	def _reset_rt_settings(self):
		self.min_rt_value.SetValue(self.parent.min_rt)
		self.max_rt_value.SetValue(self.parent.max_rt)
	
	def _reset_area_settings(self):
		self.min_area_value.SetValue(self.parent.min_area)
		self.max_area_value.SetValue(self.parent.max_area)
	
	def _reset_sort_settings(self):
		self.set_peak_sort(Sort_RT, False)
		self.set_hit_sort(Sort_Hit, False)
	
	def _reset_mf_settings(self):
		self.min_mf_value.SetValue(self.parent.min_mf)
		self.min_rmf_value.SetValue(self.parent.min_rmf)
	
	def _reset_n_hits_settings(self):
		self.n_hits_check.SetValue(0)
		self.n_hits_value.SetValue(0)
		self.n_hits_value.Disable()
	
	def on_reset(self, event):
		self._reset_area_settings()
		self._reset_rt_settings()
		self._reset_area_settings()
		self._reset_mf_settings()
		self._reset_n_hits_settings()
	
	def on_rt_change(self, event):  # wxGlade: SortFilterDialog.<event_handler>
		"""
		Event handler for RT range values being changed, to check that the maximum range is
		greater than the minimum range and vice versa, and adjust as necessary

		:param event:
		:type event:
		"""
		
		min_rt_changed = event.GetEventObject() == self.min_rt_value
		max_rt_changed = event.GetEventObject() == self.max_rt_value
		
		min_rt_value = self.min_rt_value.GetValue()
		max_rt_value = self.max_rt_value.GetValue()
		
		if min_rt_changed and min_rt_value > max_rt_value:
			self.max_rt_value.SetValue(max_rt_value + 1)
		
		elif max_rt_changed and min_rt_value > max_rt_value:
			self.min_rt_value.SetValue(min_rt_value - 1)
		
	def on_toggle_n_hits(self, event):  # wxGlade: SortFilterDialog.<event_handler>
		self.n_hits_value.Enable(self.n_hits_check.GetValue())
		event.Skip()
		
	def on_area_change(self, event):  # wxGlade: SortFilterDialog.<event_handler>
		"""
		Event handler for RT range values being changed, to check that the maximum range is
		greater than the minimum range and vice versa, and adjust as necessary

		:param event:
		:type event:
		"""
		
		min_area_changed = event.GetEventObject() == self.min_area_value
		max_area_changed = event.GetEventObject() == self.max_area_value
		
		min_area_value = self.min_area_value.GetValue()
		max_area_value = self.max_area_value.GetValue()
		
		if min_area_changed and min_area_value > max_area_value:
			self.max_area_value.SetValue(max_area_value + 1)
		
		elif max_area_changed and min_area_value > max_area_value:
			self.min_area_value.SetValue(min_area_value - 1)
			
# end of class SortFilterDialog


class SinglePeakSortFilterDialog(SortFilterDialog):
	def __init__(self, parent, *args, **kwds):
		args = (parent, *args)
		self.parent = parent
		wx.Dialog.__init__(self, *args, **kwds)
		self.SetSize((500, 280))
		self.main_panel = wx.Panel(self, wx.ID_ANY)
		# self.sort_rt = wx.RadioButton(self.main_panel, ID_Sort_RT, "Retention Time", style=wx.RB_GROUP)
		# self.sort_area = wx.RadioButton(self.main_panel, ID_Sort_Area, "Peak Area")
		# self.peak_descending_check = wx.CheckBox(self.main_panel, wx.ID_ANY, "Descending")
		self.sort_num = wx.RadioButton(self.main_panel, ID_Sort_Hit, "Hit Number", style=wx.RB_GROUP)
		self.sort_name = wx.RadioButton(self.main_panel, ID_Sort_Name, "Name")
		self.sort_mf = wx.RadioButton(self.main_panel, ID_Sort_MF, "Match Factor")
		self.sort_cas = wx.RadioButton(self.main_panel, ID_Sort_CAS, "CAS Number")
		self.sort_rmf = wx.RadioButton(self.main_panel, ID_Sort_RMF, "Reverse Match Factor")
		self.hit_descending_check = wx.CheckBox(self.main_panel, wx.ID_ANY, "Descending")
		self.n_hits_check = wx.CheckBox(self.main_panel, wx.ID_ANY, "Enable")
		self.n_hits_value = wx.SpinCtrlDouble(self.main_panel, wx.ID_ANY, "0.0", min=0.0, max=50.0)
		self.min_mf_value = wx.SpinCtrlDouble(self.main_panel, wx.ID_ANY, "0.0", min=0.0, max=1000.0)
		self.min_rmf_value = wx.SpinCtrlDouble(self.main_panel, wx.ID_ANY, "0.0", min=0.0, max=1000.0)
		self.cancel_btn = wx.Button(self, wx.ID_CANCEL, "")
		self.reset_btn = wx.Button(self, wx.ID_ANY, "Reset")
		self.apply_btn = wx.Button(self, wx.ID_CANCEL, "")
		self.ok_btn = wx.Button(self, wx.ID_OK, "")
		
		self.__set_properties()
		self.__do_layout()
		
		self.Bind(wx.EVT_CHECKBOX, self.on_toggle_n_hits, self.n_hits_check)
		
		# Populate the settings
		self.load_settings()
		self.Bind(wx.EVT_BUTTON, self.on_ok, id=wx.ID_OK)
		self.Bind(wx.EVT_BUTTON, self.on_reset, id=wx.ID_NO)
		self.Bind(wx.EVT_BUTTON, self.on_apply, id=wx.ID_APPLY)
	
	def __set_properties(self):
		self.SetTitle("Sort & Filter")
		self.SetSize((500, 280))
		# self.sort_rt.SetToolTip("Sort the Peaks by their retention times")
		# self.sort_rt.SetValue(1)
		# self.sort_area.SetToolTip("Sort the Peaks by their areas")
		# self.sort_num.SetToolTip("Sort the hits by their hit number")
		self.sort_num.SetValue(1)
		self.sort_name.SetToolTip("Sort the hits by their name")
		self.sort_mf.SetToolTip("Sort the hits by their match factor")
		self.sort_cas.SetToolTip("Sort the hits by their CAS number")
		self.sort_rmf.SetToolTip("Sort the hits by their reverse match factor")
		self.n_hits_check.SetMinSize((-1, 29))
		self.n_hits_check.SetToolTip("Show only hits up to this value. Note that this is applied before filtering by match factor.")
		self.n_hits_value.SetMinSize((-1, 29))
		self.n_hits_value.SetToolTip("Show only hits up to this value. Note that this is applied before filtering by match factor.")
		self.n_hits_value.Enable(False)
		self.n_hits_value.SetDigits(0)
		self.min_mf_value.SetMinSize((-1, 29))
		self.min_mf_value.SetToolTip("Show only hits with a match factor higher than this value")
		self.min_mf_value.SetDigits(0)
		self.min_mf_value.SetIncrement(10.0)
		self.min_rmf_value.SetMinSize((-1, 29))
		self.min_rmf_value.SetToolTip("Show only hits with a reverse match factor higher than this value")
		self.min_rmf_value.SetDigits(0)
		self.min_rmf_value.SetIncrement(10.0)
		# end wxGlade
	
	def __do_layout(self):
		outer_sizer = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_2 = wx.GridSizer(1, 4, 0, 0)
		grid_sizer_1 = wx.FlexGridSizer(3, 2, 5, 10)
		hits_match_box = wx.StaticBoxSizer(wx.StaticBox(self.main_panel, wx.ID_ANY, "Minimum Match Factor: "),
										   wx.VERTICAL)
		hits_match_grid = wx.FlexGridSizer(2, 2, 5, 2)
		
		n_hits_box = wx.StaticBoxSizer(wx.StaticBox(self.main_panel, wx.ID_ANY, "Number of Hits: "), wx.VERTICAL)
		
		sort_hits_box = wx.StaticBoxSizer(wx.StaticBox(self.main_panel, wx.ID_ANY, "Sort Hits By: "), wx.VERTICAL)
		hits_sort_by_grid = wx.GridSizer(3, 2, 0, 0)
		
		hits_sort_by_grid.Add(self.sort_num, 0, wx.LEFT, 2)
		hits_sort_by_grid.Add(self.sort_name, 0, wx.LEFT, 0)
		hits_sort_by_grid.Add(self.sort_mf, 0, wx.LEFT, 2)
		hits_sort_by_grid.Add(self.sort_cas, 0, 0, 2)
		hits_sort_by_grid.Add(self.sort_rmf, 0, wx.LEFT, 2)
		sort_hits_box.Add(hits_sort_by_grid, 1, wx.EXPAND, 0)
		sort_hits_box.Add(self.hit_descending_check, 0, wx.BOTTOM | wx.LEFT, 2)
		grid_sizer_1.Add(sort_hits_box, 1, wx.EXPAND | wx.TOP, 3)
		n_hits_box.Add(self.n_hits_check, 0, wx.LEFT | wx.RIGHT | wx.TOP, 2)
		n_hits_box.Add((20, 5), 0, 0, 0)
		n_hits_box.Add(self.n_hits_value, 0, wx.BOTTOM | wx.LEFT | wx.RIGHT, 7)
		grid_sizer_1.Add(n_hits_box, 1, wx.EXPAND, 0)
		min_mf_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Match: ")
		min_mf_label.SetToolTip("Show only hits with a match factor higher than this value")
		hits_match_grid.Add(min_mf_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 2)
		hits_match_grid.Add(self.min_mf_value, 0, 0, 0)
		min_rmf_label = wx.StaticText(self.main_panel, wx.ID_ANY, "R Match: ")
		min_rmf_label.SetToolTip("Show only hits with a reverse match factor higher than this value")
		hits_match_grid.Add(min_rmf_label, 0, wx.ALIGN_CENTER_VERTICAL | wx.LEFT, 2)
		hits_match_grid.Add(self.min_rmf_value, 0, 0, 0)
		hits_match_box.Add(hits_match_grid, 0, wx.ALL, 2)
		grid_sizer_1.Add(hits_match_box, 1, wx.EXPAND, 0)
		self.main_panel.SetSizer(grid_sizer_1)
		outer_sizer.Add(self.main_panel, 1, wx.EXPAND | wx.LEFT | wx.RIGHT, 10)
		grid_sizer_2.Add(self.cancel_btn, 0, 0, 0)
		grid_sizer_2.Add(self.reset_btn, 0, 0, 0)
		grid_sizer_2.Add(self.apply_btn, 0, 0, 0)
		grid_sizer_2.Add(self.ok_btn, 0, wx.RIGHT, 6)
		outer_sizer.Add(grid_sizer_2, 1, wx.ALIGN_RIGHT | wx.RIGHT | wx.TOP, 10)
		self.SetSizer(outer_sizer)
		self.Layout()
	
	def load_settings(self):
		self._load_sort_settings()
		self._load_mf_settings()
		self._load_n_hits_settings()
	
	def apply_settings(self):
		self._apply_sort_settings()
		self._apply_mf_settings()
		self._apply_n_hits_settings()
		
		self.parent.populate_tree()
	
	def on_reset(self, event):
		self._reset_sort_settings()
		self._reset_mf_settings()
		self._reset_n_hits_settings()
	
	def _load_sort_settings(self):
		self.set_hit_sort(self.parent.hit_sort, self.parent.hit_descending)

	def _apply_sort_settings(self):
		self.parent.hit_sort, self.parent.hit_descending = self.get_hit_sort()
	
	def _reset_sort_settings(self):
		self.set_hit_sort(Sort_Hit, False)

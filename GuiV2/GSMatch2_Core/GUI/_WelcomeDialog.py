#  !/usr/bin/env python
#   -*- coding: utf-8 -*-
#
#  _WelcomeDialog.py
#
#  This file is part of GunShotMatch
#
#  Copyright (c) 2019-2020 Dominic Davis-Foster <dominic@davis-foster.co.uk>
#
#  GunShotMatch is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  GunShotMatch is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#
# generated by wxGlade 0.9.3 on Tue Nov 26 10:17:30 2019
#

# stdlib
import os
import pathlib
import subprocess
import sys
from types import ModuleType
import webbrowser

# 3rd party
import wx.lib.agw.ultimatelistctrl as ULC
from importlib_resources import path
from wx.lib.wordwrap import wordwrap
from domdf_wxpython_tools.panel_listctrl import PanelListCtrl, PanelListItem

# this package
import GuiV2
from GuiV2.GSMatch2_Core.Config import internal_config
from GuiV2.GSMatch2_Core import Experiment
from GuiV2.GSMatch2_Core.IDs import *
from GuiV2.GSMatch2_Core.PreferencesDialog import PreferencesDialog
from GuiV2.GSMatch2_Core import Project
from GuiV2.GSMatch2_Core.utils import open_project_dialog
from GuiV2.icons import get_icon
from GuiV2.GSMatch2_Core import utils

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class _WelcomeDialog(wx.Dialog):
	def __init__(self, *args, **kwds):
		# begin wxGlade: _WelcomeDialog.__init__
		kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE | wx.MINIMIZE_BOX
		wx.Dialog.__init__(self, *args, **kwds)
		self.SetSize((777, 460))
		self.left_panel = wx.Panel(self, wx.ID_ANY)
		self.recent_project_ctrl = PanelListCtrl(self.left_panel, wx.ID_ANY, style=wx.NO_BORDER)
		self.right_panel = wx.Panel(self, wx.ID_ANY)
		self.version_label = wx.StaticText(self.right_panel, wx.ID_ANY, "Version <version>")
		self.new_project_button = wx.Button(self.right_panel, wx.ID_ANY, u"âž• Create New Project", style=wx.BORDER_NONE | wx.BU_LEFT)
		self.open_project_button = wx.Button(self.right_panel, wx.ID_ANY, u"ðŸ“‚ Open Project", style=wx.BORDER_NONE | wx.BU_LEFT)
		self.new_experiment_button = wx.BitmapButton(self.right_panel, wx.ID_ANY, get_icon("new-experiment", 24))
		self.method_editor_button = wx.BitmapButton(self.right_panel, wx.ID_ANY, get_icon("method-editor",24))
		self.ammo_editor_editor = wx.BitmapButton(self.right_panel, wx.ID_ANY, get_icon("ammo-details",32))
		self.bottom_panel = wx.Panel(self.right_panel, wx.ID_ANY)
		self.show_dialog_checkbox = wx.CheckBox(self.bottom_panel, wx.ID_ANY, "Show this dialog at startup")
		self.settings_button = wx.Button(self.bottom_panel, wx.ID_ANY, u"âš™ Settings", style=wx.BORDER_NONE)
		self.help_button = wx.Button(self.bottom_panel, wx.ID_HELP, "", style=wx.BORDER_NONE)

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_BUTTON, self.OnCreateProject, self.new_project_button)
		self.Bind(wx.EVT_BUTTON, self.OnOpenProject, self.open_project_button)
		self.Bind(wx.EVT_BUTTON, self.on_new_experiment, self.new_experiment_button)
		self.Bind(wx.EVT_BUTTON, self.on_method_editor, self.method_editor_button)
		self.Bind(wx.EVT_BUTTON, self.on_ammo_editor, self.ammo_editor_editor)
		self.Bind(wx.EVT_CHECKBOX, self.on_toggle_show_dialog, self.show_dialog_checkbox)
		self.Bind(wx.EVT_BUTTON, self.on_settings, self.settings_button)
		self.Bind(wx.EVT_BUTTON, self.on_help, self.help_button)
		# end wxGlade
		
		self.recent_project_ctrl.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnOpenRecent)
		self.recent_project_ctrl.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightDown)
		self.recent_project_ctrl.Bind(wx.EVT_LIST_KEY_DOWN, self.OnKeyDown)
		self.recent_project_ctrl.Bind(wx.EVT_LIST_DELETE_ITEM, self.OnItemRemoved)
		
		# self.recent_project_ctrl.Bind(wx.EVT_LEFT_DCLICK, self.OnOpenRecent)
		# self.Bind(ULC.EVT_LIST_ITEM_SELECTED, self.OnItemSelected, self.recent_project_ctrl)
		# self.recent_project_ctrl.Bind(wx.EVT_RIGHT_DOWN, self.OnRightDown)
		#
		# # for wxMSW
		# self.recent_project_ctrl.Bind(wx.EVT_COMMAND_RIGHT_CLICK, self.OnRecentRightClick)
		#
		# # for wxGTK
		# self.recent_project_ctrl.Bind(wx.EVT_RIGHT_UP, self.OnRecentRightClick)
		#
		#self.Bind(wx.EVT_CLOSE, self.OnClose)
		self.selected_project = None
	
		self._setup_context_menu()
	
	def _setup_context_menu(self):
		# Setup Context menu
		self.ID_MENU_OPEN = wx.NewIdRef()
		self.ID_MENU_FILES = wx.NewIdRef()
		self.ID_MENU_TERMINAL = wx.NewIdRef()
		self.ID_MENU_REMOVE = wx.NewIdRef()
		
		self.Bind(wx.EVT_MENU, self.OnOpenRecent, id=self.ID_MENU_OPEN)
		self.Bind(wx.EVT_MENU, self.OnOpenInFiles, id=self.ID_MENU_FILES)
		self.Bind(wx.EVT_MENU, self.OnOpenInTerminal, id=self.ID_MENU_TERMINAL)
		self.Bind(wx.EVT_MENU, self.OnRemoveRecent, id=self.ID_MENU_REMOVE)
	
	def __set_properties(self):
		# begin wxGlade: _WelcomeDialog.__set_properties
		self.SetTitle("Welcome to GunShotMatch")
		self.SetSize((777, 460))
		self.left_panel.SetMinSize((300, -1))
		self.version_label.SetFont(wx.Font(8, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
		self.new_project_button.SetMinSize((200, 40))
		self.open_project_button.SetMinSize((200, 40))
		self.new_experiment_button.SetMinSize((40, 40))
		self.new_experiment_button.SetToolTip(wx.ToolTip("Create a new Experiment"))
		self.method_editor_button.SetMinSize((40, 40))
		self.method_editor_button.SetToolTip(wx.ToolTip("Open the Method Editor"))
		self.ammo_editor_editor.SetMinSize((40, 40))
		self.ammo_editor_editor.SetToolTip(wx.ToolTip("Open the Ammunition Details Editor"))
		self.show_dialog_checkbox.SetMinSize((-1, 40))
		self.show_dialog_checkbox.SetValue(1)
		self.settings_button.SetMinSize((-1, 40))
		self.help_button.SetMinSize((-1, 40))
		# end wxGlade
		
		_icon = wx.NullIcon
		_icon.CopyFromBitmap(get_icon("logo-v2", 256))
		self.SetIcon(_icon)
		
		self.add_recent_projects()
			
		if self.recent_project_ctrl.GetItemCount() == 0:
			self.left_panel.Show(False)
			self.Layout()
		
		if "msw" in wx.Platform.lower():
			self.SetSize((793, 487))
			
	def __do_layout(self):
		# begin wxGlade: _WelcomeDialog.__do_layout
		outer_sizer = wx.BoxSizer(wx.HORIZONTAL)
		main_sizer = wx.BoxSizer(wx.VERTICAL)
		sizer_1 = wx.GridSizer(1, 2, 0, 0)
		bottom_sizer = wx.BoxSizer(wx.HORIZONTAL)
		bitmap_button_sizer = wx.GridSizer(1, 3, 0, 0)
		recent_project_grid = wx.GridSizer(1, 1, 0, 0)
		recent_project_grid.Add(self.recent_project_ctrl, 1, wx.EXPAND, 0)
		self.left_panel.SetSizer(recent_project_grid)
		outer_sizer.Add(self.left_panel, 2, wx.EXPAND, 5)
		GSM_Logo = wx.StaticBitmap(self.right_panel, wx.ID_ANY, get_icon("logo-v2", 128))
		main_sizer.Add(GSM_Logo, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.TOP, 20)
		gsm_label = wx.StaticText(self.right_panel, wx.ID_ANY, "GunShotMatch")
		gsm_label.SetFont(wx.Font(20, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
		main_sizer.Add(gsm_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.TOP, 15)
		main_sizer.Add(self.version_label, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.TOP, 5)
		main_sizer.Add((20, 20), 0, 0, 0)
		main_sizer.Add(self.new_project_button, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.TOP, 10)
		main_sizer.Add(self.open_project_button, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		static_line_4 = wx.StaticLine(self.right_panel, wx.ID_ANY)
		main_sizer.Add(static_line_4, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 10)
		bitmap_button_sizer.Add(self.new_experiment_button, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		bitmap_button_sizer.Add(self.method_editor_button, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		bitmap_button_sizer.Add(self.ammo_editor_editor, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		main_sizer.Add(bitmap_button_sizer, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.EXPAND, 0)
		sizer_1.Add(self.show_dialog_checkbox, 0, wx.ALIGN_BOTTOM | wx.LEFT | wx.RIGHT, 30)
		bottom_sizer.Add(self.settings_button, 0, wx.ALIGN_BOTTOM | wx.RIGHT, 5)
		bottom_sizer.Add(self.help_button, 0, wx.ALIGN_BOTTOM | wx.RIGHT, 10)
		sizer_1.Add(bottom_sizer, 0, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT, 0)
		self.bottom_panel.SetSizer(sizer_1)
		main_sizer.Add(self.bottom_panel, 1, wx.ALIGN_RIGHT | wx.BOTTOM | wx.EXPAND, 5)
		self.right_panel.SetSizer(main_sizer)
		outer_sizer.Add(self.right_panel, 3, wx.BOTTOM | wx.EXPAND | wx.RIGHT | wx.TOP, 5)
		self.SetSizer(outer_sizer)
		self.Layout()
		# end wxGlade
	
	# def add_recent_projects(self):
	# 	colWidth = 300  # The width of the column in the List Ctrl
	# 	max_path_length = 31  # The maximum number of characters in the path
	#
	# 	self.recent_project_ctrl.InsertColumn(0, "", width=colWidth)
	# 	for item in internal_config.recent_projects[::-1]:
	#
	# 		project_name = item[0]
	# 		project_path = str(pathlib.Path(item[1]).parent).rstrip("/")
	#
	# 		if sys.platform in {"linux", "darwin"}:
	# 			home_dir = str(pathlib.Path.home())
	# 			print(home_dir)
	# 			if project_path.startswith(home_dir):
	# 				project_path = project_path.replace(home_dir, "~")
	# 			print(project_path)
	#
	# 		if project_name != '' and project_path != ".":
	#
	# 			if len(project_path) > max_path_length:
	#
	# 				path_elements = []
	# 				while True:
	# 					project_path, folder = os.path.split(project_path)
	#
	# 					if folder != "":
	# 						path_elements.append(folder)
	# 					else:
	# 						if project_path != "":
	# 							path_elements.append(project_path)
	#
	# 						break
	#
	# 				path_elements.reverse()
	# 				project_path = os.path.join(path_elements[0], path_elements[1], "...", path_elements[-1])
	#
	# 			item = wordwrap(f"  {project_name}\n    {project_path}", colWidth, wx.ClientDC(self))
	# 			self.recent_project_ctrl.InsertStringItem(0, item)
	
	def add_recent_projects(self):
		for item in internal_config.recent_projects:
			
			if item[0] != '' and item[1] != ".":
				item = RecentProjectItem(self.recent_project_ctrl, *item, max_path_length=31)
				self.recent_project_ctrl.Append(item)
	
	def OnCreateProject(self, event):  # wxGlade: _WelcomeDialog.<event_handler>
		with Project.NewProjectDialog(self, wx.ID_ANY) as dlg:
			if dlg.ShowModal() == wx.ID_OK:
				if dlg.filename:
					self.OpenProject(dlg.filename)
		
		event.Skip()
	
	def OnOpenProject(self, event):  # wxGlade: _WelcomeDialog.<event_handler>
		# Ask the user what new file(s) to open
		filename_list = open_project_dialog(self)
		
		if filename_list:
			for filename in filename_list:
				self.OpenProject(filename)
		
		event.Skip()
	
	def OnOpenRecent(self, _):  # wxGlade: _WelcomeDialog.<event_handler>
		self.OpenProject(self.recent_project_ctrl.GetFirstSelected().filename)
	
	def OnItemSelected(self, event):
		self.currentItem = event.Index
		event.Skip()
	
	# def OnRightDown(self, event):
	# 	x = event.GetX()
	# 	y = event.GetY()
	#
	# 	print("x, y = %s\n" % str((x, y)))
	#
	# 	item, flags = self.recent_project_ctrl.HitTest((x, y))
	#
	# 	if item != wx.NOT_FOUND and flags & wx.LIST_HITTEST_ONITEM:
	# 		self.recent_project_ctrl.Select(item)
	#
	# 	event.Skip()
	#
	# def OnRecentRightClick(self, event):  # wxGlade: _WelcomeDialog.<event_handler>
	# 	print("OnRightClick %s\n" % self.recent_project_ctrl.GetItemText(self.currentItem))
	#
	# 	print(self.recent_project_ctrl.GetItemText(self.currentItem))
	#
	# 	print("OnContextMenu\n")
	#
	# 	# only do this part the first time so the events are only bound once
	# 	#
	# 	# Yet another anternate way to do IDs. Some prefer them up top to
	# 	# avoid clutter, some prefer them close to the object of interest
	# 	# for clarity.
	# 	if not hasattr(self, "popupID1"):
	# 		self.ID_MENU_OPEN = wx.NewIdRef()
	# 		self.ID_MENU_FILES = wx.NewIdRef()
	# 		self.ID_MENU_TERMINAL = wx.NewIdRef()
	# 		self.ID_MENU_REMOVE = wx.NewIdRef()
	#
	# 		self.Bind(wx.EVT_MENU, self.OnOpenRecent, id=self.ID_MENU_OPEN)
	# 		self.Bind(wx.EVT_MENU, self.OnOpenInFiles, id=self.ID_MENU_FILES)
	# 		self.Bind(wx.EVT_MENU, self.OnOpenInTerminal, id=self.ID_MENU_TERMINAL)
	# 		self.Bind(wx.EVT_MENU, self.OnRemoveRecent, id=self.ID_MENU_REMOVE)
	#
	# 	# make a menu
	# 	menu = wx.Menu()
	# 	menu.Append(self.ID_MENU_OPEN, "Open Project")
	# 	menu.AppendSeparator()
	# 	menu.Append(self.ID_MENU_FILES, "Open in Files")
	# 	menu.Append(self.ID_MENU_TERMINAL, "Open in Terminal")
	# 	menu.AppendSeparator()
	# 	menu.Append(self.ID_MENU_REMOVE, "Remove from list")
	#
	# 	# Popup the menu.  If an item is selected then its handler
	# 	# will be called before PopupMenu returns.
	# 	self.recent_project_ctrl.PopupMenu(menu)
	#
	#
	# 	menu.Destroy()
	
	def OnRightDown(self, event):
		self.recent_project_ctrl.SetSelection(self.recent_project_ctrl.GetItemPosition(event.GetEventObject()))
		
		event.Skip()
		
		selected_project = self.recent_project_ctrl.GetFirstSelected()
		if selected_project == -1:
			return
		
		print(f"OnRightDown {selected_project.filename}\n")
		
		# make a menu
		menu = wx.Menu()
		menu.Append(self.ID_MENU_OPEN, "Open Project")
		menu.AppendSeparator()
		menu.Append(self.ID_MENU_FILES, "Open in Files")
		menu.Append(self.ID_MENU_TERMINAL, "Open in Terminal")
		menu.AppendSeparator()
		menu.Append(self.ID_MENU_REMOVE, "Remove from list")
		
		# Popup the menu.  If an item is selected then its handler
		# will be called before PopupMenu returns.
		self.recent_project_ctrl.PopupMenu(menu)
		
		menu.Destroy()
	
	def OnKeyDown(self, event):
		if event.GetKeyCode() == wx.WXK_DELETE:
			index = self.recent_project_ctrl.GetItemPosition(self.recent_project_ctrl.GetFirstSelected())
			internal_config.remove_recent_project(index)
			self.recent_project_ctrl.DeleteItem(self.recent_project_ctrl.GetFirstSelected())

		event.Skip()
	
	def OnItemRemoved(self, event):
		if self.recent_project_ctrl.GetItemCount() == 0:
			self.left_panel.Show(False)
			self.recent_project_ctrl.Hide()
			self.Layout()
			self.Refresh()
			
		event.Skip()
	
	def OnOpenInTerminal(self, event):

		directory = str(self.recent_project_ctrl.GetFirstSelected().filename.parent).rstrip("/")
		
		if "linux" in sys.platform:
			subprocess.Popen(f'x-terminal-emulator -e "cd {directory}; exec bash"', shell=True)
		elif "win32" in sys.platform:
			subprocess.Popen(f'start cmd /k cd {directory}', shell=True)
		else:
			wx.MessageBox(f"'Open in Terminal' is not yet supported on your platform: '{sys.platform}'", "Unsupported Platform")
		
	def OnOpenInFiles(self, event):
		print("Open in Files")

		directory = str(self.recent_project_ctrl.GetFirstSelected().filename.parent).rstrip("/")
		webbrowser.open_new(directory)
	
	def OnRemoveRecent(self, event):
		print("RemoveRecent")

		index = self.recent_project_ctrl.GetItemPosition(self.recent_project_ctrl.GetFirstSelected())
		internal_config.remove_recent_project(index)
		self.recent_project_ctrl.DeleteItem(self.recent_project_ctrl.GetFirstSelected())
	
	def OpenProject(self, project_path):
		self.selected_project = project_path
		self.EndModal(wx.ID_OK)

	def on_toggle_show_dialog(self, event):  # wxGlade: _WelcomeDialog.<event_handler>
		internal_config.show_welcome_dialog = self.show_dialog_checkbox.GetValue()
		
	def on_settings(self, event):  # wxGlade: _WelcomeDialog.<event_handler>
		PreferencesDialog(self).ShowModal()
		event.Skip()
		
	def on_help(self, event):  # wxGlade: _WelcomeDialog.<event_handler>
		print("Event handler 'on_help' not implemented!")
		event.Skip()

	def on_new_experiment(self, event):  # wxGlade: _WelcomeDialog.<event_handler>
		# if hasattr(self, "new_experiment_dialog"):
		# 	# Already open
		# 	self.new_experiment_dialog.SetFocus()
		# else:
		self.new_experiment_dialog = Experiment.NewExperimentDialog(self, wx.ID_ANY)
		self.new_experiment_dialog.ShowModal()
	
	@staticmethod
	def on_method_editor(_):  # wxGlade: _WelcomeDialog.<event_handler>
		utils.method_editor()
	
	@staticmethod
	def on_ammo_editor(_):  # wxGlade: _WelcomeDialog.<event_handler>
		utils.ammo_editor()

# end of class _WelcomeDialog


class RecentProjectItem(PanelListItem):
	def __init__(
			self, parent, project_name, filename, id=wx.ID_ANY,
			style=wx.TAB_TRAVERSAL, name=wx.PanelNameStr,
			left_padding=32, max_path_length=31
			):
		
		self.project_name = project_name
		self.filename = pathlib.Path(filename)
		
		project_path = str(pathlib.Path(filename).parent).rstrip("/")
		
		if sys.platform in {"linux", "darwin"}:
			home_dir = str(pathlib.Path.home())

			if project_path.startswith(home_dir):
				project_path = project_path.replace(home_dir, "~")
				
		if len(project_path) > max_path_length:
			
			path_elements = []
			while True:
				project_path, folder = os.path.split(project_path)

				if folder != "":
					path_elements.append(folder)
				else:
					if project_path != "":
						path_elements.append(project_path)
					
					break
			
			path_elements.reverse()
			project_path = os.path.join(path_elements[0], path_elements[1], "...", path_elements[-1])
		
		text_dict = {
				"name": project_name,
				"filename": project_path,
				}
		
		if wx.Platform == "__WXMSW__":
			css_file = "C:\\Users\\dom13\\GunShotMatch\\GunShotMatch\\GuiV2\\GSMatch2_Core\\RecentProjects.css"
		else:
			css_file = "/home/domdf/GunShotMatch/GunShotMatch/GuiV2/GSMatch2_Core/RecentProjects.css"
		
		PanelListItem.__init__(
				self, parent, text_dict, css_file, id=id, style=style,
				name=name, left_padding=left_padding
				)
		
		self.outer_sizer.AddStretchSpacer(4)
		
		if wx.Platform == "__WXMSW__":
			remove_btn_size = (-1, -1)
		else:
			remove_btn_size = (27, 27)
		
		self.remove_button = wx.StaticText(self, label="Ã—", style=wx.TEXT_ALIGNMENT_CENTER, size=remove_btn_size)
		
		font = self.remove_button.GetFont()
		font.SetPointSize(18)
		self.remove_button.SetFont(font)
		
		self.remove_button.SetForegroundColour(self._default_background)
		self.remove_button.SetBackgroundColour(self._selected_background)
		
		self.outer_sizer.Add(self.remove_button, 1, wx.RIGHT | wx.BOTTOM | wx.ALIGN_CENTER_VERTICAL, 5)
		self.remove_button.Hide()
		
		self.SetSizer(self.outer_sizer)
		self.outer_sizer.Fit(self)
		self.Layout()
		
		self.Refresh()
		
		# Mouse over events for showing/hiding delete button
		self.mouse_over_panel = False
		self.mouse_over_text = False
		self.mouse_over_btn = False
		
		self.Bind(wx.EVT_ENTER_WINDOW, self.OnHover)
		self.Bind(wx.EVT_LEAVE_WINDOW, self.OnHoverEnd)
		
		for classname, widget in self._items.items():
			widget.Bind(wx.EVT_ENTER_WINDOW, self.OnTextHover)
			widget.Bind(wx.EVT_LEAVE_WINDOW, self.OnTextHoverEnd)
		#
		# # Mouse over events for changing colour of delete button
		self.remove_button.Bind(wx.EVT_ENTER_WINDOW, self.OnBtnHover)
		self.remove_button.Bind(wx.EVT_LEAVE_WINDOW, self.OnBtnHoverEnd)
		
		# Delete button click
		self.remove_button.Bind(wx.EVT_LEFT_DOWN, self.OnRemoveClicked)
	
	def OnRemoveClicked(self, event):
		index = self.parent.GetItemPosition(self)
		internal_config.remove_recent_project(index)

		self.parent.DeleteItem(self)
	
	def OnBtnHover(self, event):
		self.mouse_over_btn = True
		self.remove_button.SetForegroundColour("#d3d3d3")
	
	def OnBtnHoverEnd(self, event):
		self.mouse_over_btn = False
		self.remove_button.SetForegroundColour(self._default_background)
	
	def OnHover(self, event):
		self.mouse_over_panel = True
		if self.selected:
			self.remove_button.Show()
		self.Layout()
		event.Skip()
	
	def OnTextHover(self, event):
		self.mouse_over_text = True
		if self.selected:
			self.remove_button.Show()
		self.Layout()
		event.Skip()
	
	def OnHoverEnd(self, event):
		if (self.mouse_over_text or self.mouse_over_btn) and self.selected:
			self.mouse_over_panel = True
			self.remove_button.Show()
		else:
			self.mouse_over_panel = False
			self.remove_button.Hide()
		self.Layout()
	
	def OnTextHoverEnd(self, event):
		self.mouse_over_text = False
	
	def Refresh(self, **kwargs):
		self._refresh_background_colour()
		self._refresh_text()
		wx.Panel.Refresh(self)
	
	def OnClick(self, event):
		PanelListItem.OnClick(self, event)
		wx.CallAfter(self.remove_button.Show)
		wx.CallAfter(self.Layout)
	
	def DeselectItem(self):
		self.remove_button.Hide()
		self.Layout()
		PanelListItem.DeselectItem(self)
	
	def SelectItem(self, select=True):
		PanelListItem.SelectItem(self, select)
		if not select:
			self.remove_button.Hide()
		self.Layout()

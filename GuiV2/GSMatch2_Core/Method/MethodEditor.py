#  !/usr/bin/env python
#   -*- coding: utf-8 -*-
#
#  MethodEditor.py
#
#  This file is part of GunShotMatch
#
#  Copyright © 2019-2020 Dominic Davis-Foster <dominic@davis-foster.co.uk>
#
#  GunShotMatch is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  GunShotMatch is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
# generated by wxGlade 0.9.3 on Fri Nov 29 11:37:50 2019
#

# stdlib
import time
import webbrowser

# 3rd party
import wx
from domdf_wxpython_tools import coming_soon, file_dialog, file_dialog_wildcard
from importlib_resources import path

# this package
import GSMatch.lib
from GuiV2.GSMatch2_Core import Method
from GuiV2.GSMatch2_Core.GUI.toolbars import ToolData
from GuiV2.GSMatch2_Core.IDs import *
from GuiV2.GSMatch2_Core.Method import MethodPDFExporter
from GuiV2.GSMatch2_Core.pdfViewer import pdfViewer
from GuiV2.icons import get_icon


# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MethodEditor(wx.Frame):
	def __init__(
			self, parent, method=None, id=wx.ID_ANY, title='',
			pos=wx.DefaultPosition, size=wx.DefaultSize,
			style=wx.DEFAULT_FRAME_STYLE, name="MethodEditor"):
		"""
		TODO: Value validation before saving
		
		:param parent: The window parent. This may be, and often is, None. If it is not None, the frame will be minimized when its parent is minimized and restored when it is restored (although it will still be possible to minimize
		:type parent: wx.Window
		:param method: The method file to open, Default None
		:type method: str, optional
		:param id: The window identifier. It may take a value of -1 to indicate a default value.
		:type id: wx.WindowID, optional
		:param title: The caption to be displayed on the frame’s title bar.
		:type title: str, optional
		:param pos: The window position. The value DefaultPosition indicates a default position, chosen by either the windowing system or wxWidgets, depending on platform.
		:type pos: wx.Point, optional
		:param size: The window size. The value DefaultSize indicates a default size, chosen by either the windowing system or wxWidgets, depending on platform.
		:type size: wx.Size, optional
		:param style: The window style. See wx.Frame class description.
		:type style: int, optional
		:param name: The name of the window. This parameter is used to associate a name with the item, allowing the application user to set Motif resource values for individual windows.
		:type name: str, optional
		"""
		
		args = (parent, id)
		kwds = {
				"pos": pos,
				"size": size,
				"title": title,
				"style": style,
				"name": name,
				}
		
		# begin wxGlade: MethodEditor.__init__
		kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
		wx.Frame.__init__(self, *args, **kwds)
		self.SetSize((800, 847))
		
		# Menu Bar
		self.MethodEditor_menubar = wx.MenuBar()
		wxglade_tmp_menu = wx.Menu()
		wxglade_tmp_menu.Append(wx.ID_NEW, "&New Method", "")
		self.Bind(wx.EVT_MENU, self.new_method, id=wx.ID_NEW)
		wxglade_tmp_menu.Append(wx.ID_OPEN, "&Open Method", "")
		self.Bind(wx.EVT_MENU, self.on_open_method, id=wx.ID_OPEN)
		wxglade_tmp_menu.Append(wx.ID_SAVE, "&Save Method", "")
		self.Bind(wx.EVT_MENU, self.on_save_method, id=wx.ID_SAVE)
		wxglade_tmp_menu.Append(wx.ID_SAVEAS, "Save Method As", "")
		self.Bind(wx.EVT_MENU, self.save_method_as, id=wx.ID_SAVEAS)
		wxglade_tmp_menu.AppendSeparator()
		wxglade_tmp_menu.Append(ID_Export_PDF, "Export as PDF", "")
		self.Bind(wx.EVT_MENU, self.on_export_pdf, id=ID_Export_PDF)
		wxglade_tmp_menu.Append(wx.ID_PRINT, "Print", "")
		self.Bind(wx.EVT_MENU, self.on_print, id=wx.ID_PRINT)
		wxglade_tmp_menu.AppendSeparator()
		wxglade_tmp_menu.Append(wx.ID_EXIT, "Close", "")
		self.Bind(wx.EVT_MENU, self.exit, id=wx.ID_EXIT)
		self.MethodEditor_menubar.Append(wxglade_tmp_menu, "File")
		wxglade_tmp_menu = wx.Menu()
		wxglade_tmp_menu.Append(wx.ID_HELP, "Help", "")
		self.Bind(wx.EVT_MENU, self.on_help, id=wx.ID_HELP)
		wxglade_tmp_menu.Append(wx.ID_ABOUT, "About", "")
		self.Bind(wx.EVT_MENU, self.on_about, id=wx.ID_ABOUT)
		self.MethodEditor_menubar.Append(wxglade_tmp_menu, "Help")
		self.SetMenuBar(self.MethodEditor_menubar)
		# Menu Bar end
		self.method_notebook = wx.Notebook(self, wx.ID_ANY)
		self.expr_creation_tab = wx.Panel(self.method_notebook, wx.ID_ANY)
		self.expr_creation_scroller = wx.ScrolledWindow(self.expr_creation_tab, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
		self.min_mass_label = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "Minimum Mass: ")
		self.min_mass_spin_ctrl = wx.SpinCtrl(self.expr_creation_scroller, wx.ID_ANY, "50", min=0, max=2000)
		self.max_mass_label = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "Maximum Mass: ")
		self.max_mass_spin_ctrl = wx.SpinCtrl(self.expr_creation_scroller, wx.ID_ANY, "50", min=0, max=2000)
		self.mass_range_text_bottom = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "This must be small enough to encompass all samples")
		self.sav_gol_checkbox = wx.CheckBox(self.expr_creation_scroller, wx.ID_ANY, "Perform Savitzky-Golay smoothing")
		self.tophat_checkbox = wx.CheckBox(self.expr_creation_scroller, wx.ID_ANY, "Enable")
		self.tophat_struct_label = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "Tophat Structural Element: ")
		self.tophat_struct_value = wx.TextCtrl(self.expr_creation_scroller, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.tophat_struct_units = wx.Choice(self.expr_creation_scroller, wx.ID_ANY, choices=["min", "sec", "ms"])
		self.bb_points_label = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "Number of Points: ")
		self.bb_points_value = wx.SpinCtrl(self.expr_creation_scroller, wx.ID_ANY, "0", min=0, max=100, style=0)
		self.bb_scans_label = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "Number of Scans: ")
		self.bb_scans_value = wx.SpinCtrl(self.expr_creation_scroller, wx.ID_ANY, "0", min=0, max=100, style=0)
		self.target_range_top_text = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "Search for peaks between these times:")
		self.target_range_min_value = wx.TextCtrl(self.expr_creation_scroller, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.target_range_mid_text = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, " minutes and ")
		self.target_range_max_value = wx.TextCtrl(self.expr_creation_scroller, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.target_range_post_text = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "minutes")
		self.noise_filter_checkbox = wx.CheckBox(self.expr_creation_scroller, wx.ID_ANY, "Enable")
		self.noise_thresh_label = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "Noise Filtering Threshold: ")
		self.noise_thresh_value = wx.SpinCtrl(self.expr_creation_scroller, wx.ID_ANY, "0", min=0, max=100, style=0)
		self.noise_thresh_ions = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "ions")
		self.base_peak_filter_text_1 = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "Exclude peaks with the following base ion(s):")
		self.base_peak_filter_value = wx.TextCtrl(self.expr_creation_scroller, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.base_peak_filter_text_2 = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "Seperate multiple values with commas ( , )")
		self.alignment_tab = wx.Panel(self.method_notebook, wx.ID_ANY)
		self.dpa_scroller = wx.ScrolledWindow(self.alignment_tab, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
		self.alignment_Dw_label = wx.StaticText(self.dpa_scroller, wx.ID_ANY, "RT Modulation: ")
		self.alignment_Dw_value = wx.SpinCtrlDouble(self.dpa_scroller, wx.ID_ANY, "0", min=0.0, max=99.0)
		self.alignment_Dw_label_2 = wx.StaticText(self.dpa_scroller, wx.ID_ANY, " s", style=wx.ALIGN_LEFT)
		self.alignment_Gw_label = wx.StaticText(self.dpa_scroller, wx.ID_ANY, "Gap Penalty: ")
		self.alignment_Gw_value = wx.SpinCtrlDouble(self.dpa_scroller, wx.ID_ANY, "0.0", min=0.0, max=99.0)
		self.alignment_min_peaks_label = wx.StaticText(self.dpa_scroller, wx.ID_ANY, "Minimum Peaks: ")
		self.alignment_min_peaks_value = wx.SpinCtrlDouble(self.dpa_scroller, wx.ID_ANY, "0.0", min=0.0, max=99.0)
		self.ident_tab = wx.Panel(self.method_notebook, wx.ID_ANY)
		self.ident_scroller = wx.ScrolledWindow(self.ident_tab, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
		self.ident_min_aligned_peaks_label = wx.StaticText(self.ident_scroller, wx.ID_ANY, "Minimum Aligned Peaks: ")
		self.ident_min_aligned_peaks_value = wx.SpinCtrl(self.ident_scroller, wx.ID_ANY, "0", min=0, max=100, style=0)
		self.ident_top_peaks_label = wx.StaticText(self.ident_scroller, wx.ID_ANY, "Top Peaks: ")
		self.ident_top_peaks_value = wx.SpinCtrl(self.ident_scroller, wx.ID_ANY, "0", min=0, max=100, style=0)
		self.ident_nist_n_hits_label = wx.StaticText(self.ident_scroller, wx.ID_ANY, "Number of `Hits`: ")
		self.ident_nist_n_hits_value = wx.SpinCtrl(self.ident_scroller, wx.ID_ANY, "0", min=0, max=100, style=0)
		self.ident_min_peak_area_label = wx.StaticText(self.ident_scroller, wx.ID_ANY, "Minimum Peak Area: ")
		self.ident_min_peak_area_value = wx.SpinCtrlDouble(self.ident_scroller, wx.ID_ANY, "0.0", min=0.0, max=100.0)
		self.ident_min_match_factor_label = wx.StaticText(self.ident_scroller, wx.ID_ANY, "Minimum Match Factor: ")
		self.ident_min_match_factor_value = wx.SpinCtrlDouble(self.ident_scroller, wx.ID_ANY, "0.0", min=0.0, max=1000.0)
		self.comparison_tab = wx.Panel(self.method_notebook, wx.ID_ANY)
		self.comparison_scroller = wx.ScrolledWindow(self.comparison_tab, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
		self.comparison_alignment_Dw_label = wx.StaticText(self.comparison_scroller, wx.ID_ANY, "RT Modulation: ")
		self.comparison_alignment_Dw_value = wx.SpinCtrlDouble(self.comparison_scroller, wx.ID_ANY, "0.0", min=0.0, max=99.0)
		self.comparison_alignment_Dw_label_2 = wx.StaticText(self.comparison_scroller, wx.ID_ANY, " s", style=wx.ALIGN_LEFT)
		self.comparison_alignment_Gw_label = wx.StaticText(self.comparison_scroller, wx.ID_ANY, "Gap Penalty: ")
		self.comparison_alignment_Gw_value = wx.SpinCtrlDouble(self.comparison_scroller, wx.ID_ANY, "0.0", min=0.0, max=99.0)
		self.comparison_alignment_min_peaks_label = wx.StaticText(self.comparison_scroller, wx.ID_ANY, "Minimum Peaks: ")
		self.comparison_alignment_min_peaks_value = wx.SpinCtrlDouble(self.comparison_scroller, wx.ID_ANY, "0.0", min=0.0, max=99.0)
		self.significance_level_value = wx.SpinCtrlDouble(self.comparison_scroller, wx.ID_ANY, "0.05", min=0.0, max=1.0)
		self.significance_level_value.SetDigits(3)

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_SPINCTRL, self.on_change, self.min_mass_spin_ctrl)
		self.Bind(wx.EVT_TEXT, self.on_change, self.min_mass_spin_ctrl)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.min_mass_spin_ctrl)
		self.Bind(wx.EVT_SPINCTRL, self.on_change, self.max_mass_spin_ctrl)
		self.Bind(wx.EVT_TEXT, self.on_change, self.max_mass_spin_ctrl)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.max_mass_spin_ctrl)
		self.Bind(wx.EVT_CHECKBOX, self.on_change, self.sav_gol_checkbox)
		self.Bind(wx.EVT_CHECKBOX, self.on_change, self.tophat_checkbox)
		self.Bind(wx.EVT_TEXT, self.on_change, self.tophat_struct_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.tophat_struct_value)
		self.Bind(wx.EVT_CHOICE, self.on_change, self.tophat_struct_units)
		self.Bind(wx.EVT_SPINCTRL, self.on_change, self.bb_points_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.bb_points_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.bb_points_value)
		self.Bind(wx.EVT_SPINCTRL, self.on_change, self.bb_scans_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.bb_scans_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.bb_scans_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.target_range_min_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.target_range_min_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.target_range_max_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.target_range_max_value)
		self.Bind(wx.EVT_CHECKBOX, self.on_change, self.noise_filter_checkbox)
		self.Bind(wx.EVT_SPINCTRL, self.on_change, self.noise_thresh_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.noise_thresh_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.noise_thresh_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.base_peak_filter_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.base_peak_filter_value)
		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.on_change, self.alignment_Dw_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.alignment_Dw_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.alignment_Dw_value)
		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.on_change, self.alignment_Gw_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.alignment_Gw_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.alignment_Gw_value)
		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.on_change, self.alignment_min_peaks_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.alignment_min_peaks_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.alignment_min_peaks_value)
		self.Bind(wx.EVT_SPINCTRL, self.on_change, self.ident_min_aligned_peaks_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.ident_min_aligned_peaks_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.ident_min_aligned_peaks_value)
		self.Bind(wx.EVT_SPINCTRL, self.on_change, self.ident_top_peaks_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.ident_top_peaks_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.ident_top_peaks_value)
		self.Bind(wx.EVT_SPINCTRL, self.on_change, self.ident_nist_n_hits_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.ident_nist_n_hits_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.ident_nist_n_hits_value)
		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.on_change, self.ident_min_peak_area_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.ident_min_peak_area_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.ident_min_peak_area_value)
		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.on_change, self.ident_min_match_factor_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.ident_min_match_factor_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.ident_min_match_factor_value)
		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.on_change, self.comparison_alignment_Dw_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.comparison_alignment_Dw_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.comparison_alignment_Dw_value)
		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.on_change, self.comparison_alignment_Gw_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.comparison_alignment_Gw_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.comparison_alignment_Gw_value)
		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.on_change, self.comparison_alignment_min_peaks_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.comparison_alignment_min_peaks_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.comparison_alignment_min_peaks_value)
		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.on_change, self.significance_level_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.significance_level_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.significance_level_value)
		# end wxGlade
	
		self._create_toolbar()
		
		self.fileNotSaved = False
		self.filename = None
		
		self.Bind(wx.EVT_CLOSE, self.on_close)
		
		if method:
			self.open_method(method)
		else:
			self.new_method()
		
		self.pdf_handler = pdfViewer(
				self, wx.ID_ANY, wx.DefaultPosition,
				wx.DefaultSize, wx.HSCROLL | wx.VSCROLL | wx.SUNKEN_BORDER
				)
		self.pdf_handler.Hide()
		
		self.MethodEditor_menubar.Enable(wx.ID_PRINT, False)
	
	# def make_read_only(self):
	# 	self.min_mass_spin_ctrl.Enable(False)
	# 	self.max_mass_spin_ctrl.Enable(False)
	# 	self.sav_gol_checkbox.Enable(False)
	# 	self.tophat_checkbox.Enable(False)
	# 	self.bb_points_value.Enable(False)
	# 	self.bb_scans_value.Enable(False)
	# 	self.target_range_max_value.Enable(False)
	# 	self.target_range_min_value.Enable(False)
	# 	self.noise_filter_checkbox.Enable(False)
	# 	self.noise_thresh_value.Enable(False)
	# 	self.base_peak_filter_value.Enable(False)
	# 	self.alignment_Dw_value.Enable(False)
	# 	self.alignment_Gw_value.Enable(False)
	# 	self.alignment_min_peaks_value.Enable(False)
	# 	self.comparison_alignment_Dw_value.Enable(False)
	# 	self.comparison_alignment_Gw_value.Enable(False)
	# 	self.comparison_alignment_min_peaks_value.Enable(False)
	# 	self.significance_level_value.Enable(False)
	
	def __set_properties(self):
		# begin wxGlade: MethodEditor.__set_properties
		self.SetTitle("Method Editor")
		self.sav_gol_checkbox.SetValue(1)
		self.tophat_checkbox.SetValue(1)
		self.tophat_struct_label.SetToolTip("Structural element for PyMS Tophat baseline correction. The structural element needs to be larger than the features one wants to retain in the spectrum after the top-hat transform")
		self.tophat_struct_value.SetMinSize((50, 29))
		self.tophat_struct_value.SetMaxLength(4)
		self.tophat_struct_units.SetSelection(0)
		self.bb_points_label.SetToolTip("The window width, in data points, for detecting the local maxima")
		self.bb_points_value.SetMinSize((120, 29))
		self.bb_scans_label.SetToolTip("The number of scans across which neighbouring, apexing, ions are combined and considered as belonging to the same peak")
		self.bb_scans_value.SetMinSize((120, 29))
		self.target_range_min_value.SetMinSize((55, 29))
		self.target_range_min_value.SetMaxLength(5)
		self.target_range_max_value.SetMinSize((55, 29))
		self.target_range_max_value.SetMaxLength(5)
		self.noise_filter_checkbox.SetValue(1)
		self.noise_thresh_value.SetMinSize((120, 29))
		self.base_peak_filter_value.SetMinSize((300, 29))
		self.expr_creation_scroller.SetScrollRate(10, 10)
		self.alignment_Dw_value.SetMinSize((120, 29))
		self.alignment_Dw_value.SetDigits(1)
		self.alignment_Dw_value.SetIncrement(0.1)
		self.alignment_Gw_value.SetMinSize((120, 29))
		self.alignment_Gw_value.SetDigits(1)
		self.alignment_Gw_value.SetIncrement(0.1)
		self.alignment_min_peaks_value.SetMinSize((120, 29))
		self.alignment_min_peaks_value.SetDigits(0)
		self.alignment_min_peaks_value.SetIncrement(1.0)
		self.dpa_scroller.SetScrollRate(10, 10)
		self.ident_min_match_factor_value.SetDigits(0)
		self.ident_min_match_factor_value.SetIncrement(10.0)
		self.ident_scroller.SetScrollRate(10, 10)
		self.comparison_alignment_Dw_value.SetMinSize((120, 29))
		self.comparison_alignment_Dw_value.SetDigits(1)
		self.comparison_alignment_Dw_value.SetIncrement(0.1)
		self.comparison_alignment_Gw_value.SetMinSize((120, 29))
		self.comparison_alignment_Gw_value.SetDigits(1)
		self.comparison_alignment_Gw_value.SetIncrement(0.1)
		self.comparison_alignment_min_peaks_value.SetMinSize((120, 29))
		self.comparison_alignment_min_peaks_value.SetDigits(0)
		self.significance_level_value.SetIncrement(0.001)
		self.comparison_scroller.SetScrollRate(10, 10)
		# end wxGlade
		
		self.min_mass_label.SetToolTip(Method.descriptions["mass_range"])
		self.min_mass_spin_ctrl.SetToolTip(Method.descriptions["mass_range"])
		self.max_mass_label.SetToolTip(Method.descriptions["mass_range"])
		self.max_mass_spin_ctrl.SetToolTip(Method.descriptions["mass_range"])
		self.mass_range_text_bottom.SetToolTip(Method.descriptions["mass_range"])
		self.sav_gol_checkbox.SetToolTip(Method.descriptions["expr_creation_enable_sav_gol"])
		self.tophat_checkbox.SetToolTip(Method.descriptions["expr_creation_enable_tophat"])
		self.tophat_struct_label.SetToolTip(Method.descriptions["expr_creation_tophat"])
		self.tophat_struct_value.SetToolTip(Method.descriptions["expr_creation_tophat"])
		self.tophat_struct_units.SetToolTip(Method.descriptions["expr_creation_tophat_unit"])
		self.bb_points_label.SetToolTip(Method.descriptions["expr_creation_bb_points"])
		self.bb_points_value.SetToolTip(Method.descriptions["expr_creation_bb_points"])
		self.bb_scans_label.SetToolTip(Method.descriptions["expr_creation_bb_scans"])
		self.bb_scans_value.SetToolTip(Method.descriptions["expr_creation_bb_scans"])
		self.target_range_top_text.SetToolTip(Method.descriptions["target_range"])
		self.target_range_min_value.SetToolTip(Method.descriptions["target_range"])
		self.target_range_mid_text.SetToolTip(Method.descriptions["target_range"])
		self.target_range_max_value.SetToolTip(Method.descriptions["target_range"])
		self.target_range_post_text.SetToolTip(Method.descriptions["target_range"])
		self.noise_filter_checkbox.SetToolTip(Method.descriptions["expr_creation_enable_noise_filter"])
		self.noise_thresh_label.SetToolTip(Method.descriptions["expr_creation_noise_thresh"])
		self.noise_thresh_value.SetToolTip(Method.descriptions["expr_creation_noise_thresh"])
		self.noise_thresh_ions.SetToolTip(Method.descriptions["expr_creation_noise_thresh"])
		self.base_peak_filter_text_1.SetToolTip(Method.descriptions["base_peak_filter"])
		self.base_peak_filter_value.SetToolTip(Method.descriptions["base_peak_filter"])
		self.base_peak_filter_text_2.SetToolTip(Method.descriptions["base_peak_filter"])
	
		self.alignment_Dw_label.SetToolTip(Method.descriptions["alignment_rt_modulation"])
		self.alignment_Dw_value.SetToolTip(Method.descriptions["alignment_rt_modulation"])
		self.alignment_Dw_label_2.SetToolTip(Method.descriptions["alignment_rt_modulation"])
		self.alignment_Gw_label.SetToolTip(Method.descriptions["alignment_gap_penalty"])
		self.alignment_Gw_value.SetToolTip(Method.descriptions["alignment_gap_penalty"])
		self.alignment_min_peaks_label.SetToolTip(Method.descriptions["alignment_min_peaks"])
		self.alignment_min_peaks_value.SetToolTip(Method.descriptions["alignment_min_peaks"])

		self.ident_min_match_factor_label.SetToolTip(Method.descriptions["ident_min_match_factor"])
		self.ident_min_match_factor_value.SetToolTip(Method.descriptions["ident_min_match_factor"])
		self.ident_min_aligned_peaks_label.SetToolTip(Method.descriptions["ident_min_aligned_peaks"])
		self.ident_min_aligned_peaks_value.SetToolTip(Method.descriptions["ident_min_aligned_peaks"])
		self.ident_top_peaks_label.SetToolTip(Method.descriptions["ident_top_peaks"])
		self.ident_top_peaks_value.SetToolTip(Method.descriptions["ident_top_peaks"])
		self.ident_nist_n_hits_label.SetToolTip(Method.descriptions["ident_nist_n_hits"])
		self.ident_nist_n_hits_value.SetToolTip(Method.descriptions["ident_nist_n_hits"])
		self.ident_min_peak_area_label.SetToolTip(Method.descriptions["ident_min_peak_area"])
		self.ident_min_peak_area_value.SetToolTip(Method.descriptions["ident_min_peak_area"])
		
		self.comparison_alignment_Dw_label.SetToolTip(Method.descriptions["comparison_rt_modulation"])
		self.comparison_alignment_Dw_value.SetToolTip(Method.descriptions["comparison_rt_modulation"])
		self.comparison_alignment_Dw_label_2.SetToolTip(Method.descriptions["comparison_rt_modulation"])
		self.comparison_alignment_Gw_label.SetToolTip(Method.descriptions["comparison_gap_penalty"])
		self.comparison_alignment_Gw_value.SetToolTip(Method.descriptions["comparison_gap_penalty"])
		self.comparison_alignment_min_peaks_label.SetToolTip(Method.descriptions["comparison_min_peaks"])
		self.comparison_alignment_min_peaks_value.SetToolTip(Method.descriptions["comparison_min_peaks"])
		self.significance_level_value.SetToolTip(Method.descriptions["comparison_a"])
		
		self.ident_min_peak_area_value.SetMax(1000000000.0)
		self.ident_min_peak_area_value.SetIncrement(1000.0)

	def __do_layout(self):
		# begin wxGlade: MethodEditor.__do_layout
		outer_grid_sizer = wx.GridSizer(1, 1, 0, 0)
		comparison_scroller_sizer = wx.BoxSizer(wx.VERTICAL)
		comparison_sizer = wx.BoxSizer(wx.VERTICAL)
		comparison_significance_sizer = wx.StaticBoxSizer(wx.StaticBox(self.comparison_scroller, wx.ID_ANY, "Significance Level"), wx.VERTICAL)
		comparison_dpa_sizer = wx.StaticBoxSizer(wx.StaticBox(self.comparison_scroller, wx.ID_ANY, "Peak Alignment"), wx.VERTICAL)
		alignment_grid_sizer_copy = wx.FlexGridSizer(3, 2, 0, 0)
		comparison_alignment_Dw_sizer = wx.BoxSizer(wx.HORIZONTAL)
		ident_scroller_sizer = wx.BoxSizer(wx.VERTICAL)
		ident_sizer = wx.BoxSizer(wx.VERTICAL)
		ident_grid = wx.FlexGridSizer(5, 2, 0, 0)
		dpa_scroller_sizer = wx.BoxSizer(wx.VERTICAL)
		dpa_sizer = wx.BoxSizer(wx.VERTICAL)
		dpa_grid_sizer = wx.FlexGridSizer(3, 2, 0, 0)
		alignment_Dw_sizer = wx.BoxSizer(wx.HORIZONTAL)
		expr_creation_scroller_sizer = wx.BoxSizer(wx.VERTICAL)
		expr_creation_sizer = wx.BoxSizer(wx.VERTICAL)
		base_peak_filter_sizer = wx.StaticBoxSizer(wx.StaticBox(self.expr_creation_scroller, wx.ID_ANY, "Base Peak Filter"), wx.VERTICAL)
		noise_filter_sizer = wx.StaticBoxSizer(wx.StaticBox(self.expr_creation_scroller, wx.ID_ANY, "Noise Filtering"), wx.VERTICAL)
		noise_thresh_grid_sizer = wx.FlexGridSizer(1, 3, 0, 0)
		biller_biemann_sizer = wx.StaticBoxSizer(wx.StaticBox(self.expr_creation_scroller, wx.ID_ANY, "Biller and Biemann Peak Detection"), wx.VERTICAL)
		target_range_grid_sizer = wx.FlexGridSizer(1, 4, 0, 0)
		bb_grid_sizer = wx.FlexGridSizer(2, 2, 0, 0)
		tophat_sizer = wx.StaticBoxSizer(wx.StaticBox(self.expr_creation_scroller, wx.ID_ANY, "TopHat Baseline Correction"), wx.VERTICAL)
		tophat_grid_sizer = wx.FlexGridSizer(1, 3, 0, 0)
		mass_range_sizer = wx.StaticBoxSizer(wx.StaticBox(self.expr_creation_scroller, wx.ID_ANY, "Mass Range"), wx.VERTICAL)
		mass_range_grid = wx.FlexGridSizer(2, 2, 0, 0)
		expr_creation_header = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "Experiment Creation")
		expr_creation_header.SetFont(wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
		expr_creation_sizer.Add(expr_creation_header, 0, wx.BOTTOM, 10)
		mass_range_grid.Add(self.min_mass_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		mass_range_grid.Add(self.min_mass_spin_ctrl, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		mass_range_grid.Add(self.max_mass_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		mass_range_grid.Add(self.max_mass_spin_ctrl, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		mass_range_sizer.Add(mass_range_grid, 1, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 10)
		mass_range_sizer.Add(self.mass_range_text_bottom, 0, wx.BOTTOM | wx.LEFT | wx.RIGHT, 10)
		expr_creation_sizer.Add(mass_range_sizer, 0, wx.BOTTOM | wx.EXPAND, 10)
		expr_creation_sizer.Add(self.sav_gol_checkbox, 0, wx.BOTTOM, 10)
		tophat_sizer.Add(self.tophat_checkbox, 0, wx.LEFT | wx.TOP, 5)
		tophat_grid_sizer.Add(self.tophat_struct_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		tophat_grid_sizer.Add(self.tophat_struct_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		tophat_grid_sizer.Add(self.tophat_struct_units, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		tophat_sizer.Add(tophat_grid_sizer, 1, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 10)
		expr_creation_sizer.Add(tophat_sizer, 0, wx.BOTTOM | wx.EXPAND, 10)
		bb_grid_sizer.Add(self.bb_points_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		bb_grid_sizer.Add(self.bb_points_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		bb_grid_sizer.Add(self.bb_scans_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		bb_grid_sizer.Add(self.bb_scans_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		biller_biemann_sizer.Add(bb_grid_sizer, 1, wx.ALL | wx.EXPAND, 10)
		biller_biemann_sizer.Add(self.target_range_top_text, 0, wx.LEFT | wx.RIGHT | wx.TOP, 10)
		target_range_grid_sizer.Add(self.target_range_min_value, 0, wx.LEFT, 5)
		target_range_grid_sizer.Add(self.target_range_mid_text, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		target_range_grid_sizer.Add(self.target_range_max_value, 0, 0, 0)
		target_range_grid_sizer.Add(self.target_range_post_text, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		biller_biemann_sizer.Add(target_range_grid_sizer, 0, wx.ALL | wx.EXPAND, 10)
		expr_creation_sizer.Add(biller_biemann_sizer, 0, wx.BOTTOM | wx.EXPAND, 10)
		noise_filter_sizer.Add(self.noise_filter_checkbox, 0, wx.LEFT | wx.TOP, 5)
		noise_thresh_grid_sizer.Add(self.noise_thresh_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		noise_thresh_grid_sizer.Add(self.noise_thresh_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		noise_thresh_grid_sizer.Add(self.noise_thresh_ions, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		noise_filter_sizer.Add(noise_thresh_grid_sizer, 1, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 10)
		expr_creation_sizer.Add(noise_filter_sizer, 0, wx.BOTTOM | wx.EXPAND, 10)
		base_peak_filter_sizer.Add(self.base_peak_filter_text_1, 0, wx.ALL, 10)
		base_peak_filter_sizer.Add(self.base_peak_filter_value, 0, wx.LEFT | wx.RIGHT, 20)
		base_peak_filter_sizer.Add(self.base_peak_filter_text_2, 0, wx.ALL, 10)
		expr_creation_sizer.Add(base_peak_filter_sizer, 1, wx.BOTTOM | wx.EXPAND, 10)
		self.expr_creation_scroller.SetSizer(expr_creation_sizer)
		expr_creation_scroller_sizer.Add(self.expr_creation_scroller, 1, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, 10)
		self.expr_creation_tab.SetSizer(expr_creation_scroller_sizer)
		dpa_header = wx.StaticText(self.dpa_scroller, wx.ID_ANY, "Peak Alignment")
		dpa_header.SetFont(wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
		dpa_sizer.Add(dpa_header, 0, wx.BOTTOM, 10)
		dpa_grid_sizer.Add(self.alignment_Dw_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_Dw_sizer.Add(self.alignment_Dw_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_Dw_sizer.Add(self.alignment_Dw_label_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		dpa_grid_sizer.Add(alignment_Dw_sizer, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
		dpa_grid_sizer.Add(self.alignment_Gw_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		dpa_grid_sizer.Add(self.alignment_Gw_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		dpa_grid_sizer.Add(self.alignment_min_peaks_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		dpa_grid_sizer.Add(self.alignment_min_peaks_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		dpa_sizer.Add(dpa_grid_sizer, 1, wx.EXPAND, 0)
		self.dpa_scroller.SetSizer(dpa_sizer)
		dpa_scroller_sizer.Add(self.dpa_scroller, 1, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, 10)
		self.alignment_tab.SetSizer(dpa_scroller_sizer)
		ident_header = wx.StaticText(self.ident_scroller, wx.ID_ANY, "Compound Identification")
		ident_header.SetFont(wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
		ident_sizer.Add(ident_header, 0, wx.BOTTOM, 10)
		ident_grid.Add(self.ident_min_aligned_peaks_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ident_grid.Add(self.ident_min_aligned_peaks_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ident_grid.Add(self.ident_top_peaks_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ident_grid.Add(self.ident_top_peaks_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ident_grid.Add(self.ident_nist_n_hits_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ident_grid.Add(self.ident_nist_n_hits_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ident_grid.Add(self.ident_min_peak_area_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ident_grid.Add(self.ident_min_peak_area_value, 0, 0, 0)
		ident_grid.Add(self.ident_min_match_factor_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		ident_grid.Add(self.ident_min_match_factor_value, 0, 0, 0)
		ident_sizer.Add(ident_grid, 1, wx.EXPAND, 0)
		self.ident_scroller.SetSizer(ident_sizer)
		ident_scroller_sizer.Add(self.ident_scroller, 1, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, 10)
		self.ident_tab.SetSizer(ident_scroller_sizer)
		comparison_header = wx.StaticText(self.comparison_scroller, wx.ID_ANY, "Project Comparison")
		comparison_header.SetFont(wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
		comparison_sizer.Add(comparison_header, 0, wx.BOTTOM, 10)
		alignment_grid_sizer_copy.Add(self.comparison_alignment_Dw_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		comparison_alignment_Dw_sizer.Add(self.comparison_alignment_Dw_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		comparison_alignment_Dw_sizer.Add(self.comparison_alignment_Dw_label_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_grid_sizer_copy.Add(comparison_alignment_Dw_sizer, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
		alignment_grid_sizer_copy.Add(self.comparison_alignment_Gw_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_grid_sizer_copy.Add(self.comparison_alignment_Gw_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_grid_sizer_copy.Add(self.comparison_alignment_min_peaks_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_grid_sizer_copy.Add(self.comparison_alignment_min_peaks_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		comparison_dpa_sizer.Add(alignment_grid_sizer_copy, 1, wx.ALL | wx.EXPAND, 10)
		comparison_sizer.Add(comparison_dpa_sizer, 0, 0, 0)
		comparison_significance_sizer.Add(self.significance_level_value, 0, 0, 0)
		comparison_sizer.Add(comparison_significance_sizer, 0, wx.BOTTOM | wx.TOP, 10)
		self.comparison_scroller.SetSizer(comparison_sizer)
		comparison_scroller_sizer.Add(self.comparison_scroller, 1, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, 10)
		self.comparison_tab.SetSizer(comparison_scroller_sizer)
		self.method_notebook.AddPage(self.expr_creation_tab, "Experiment Creation")
		self.method_notebook.AddPage(self.alignment_tab, "Peak Alignment")
		self.method_notebook.AddPage(self.ident_tab, "Compound Identification")
		self.method_notebook.AddPage(self.comparison_tab, "Project Comparison")
		outer_grid_sizer.Add(self.method_notebook, 1, wx.EXPAND, 0)
		self.SetSizer(outer_grid_sizer)
		self.Layout()
		# end wxGlade
	
	def _create_toolbar(self):
		tb_icon_size = 24
		
		self.toolbar = self.CreateToolBar()
		# self.toolbar = wx.ToolBar(self, -1, wx.DefaultPosition, wx.DefaultSize, wx.TB_FLAT | wx.TB_NODIVIDER)
		self.toolbar.SetToolBitmapSize(wx.Size(tb_icon_size, tb_icon_size))
		
		self.add_tool(
				ToolData("New Method", get_icon(wx.ART_NEW, tb_icon_size), wx.ID_NEW, self.new_method),
				tooltip="New Method (Ctrl+N)"
				)
		
		self.add_tool(
				ToolData("Open Method", get_icon(wx.ART_FILE_OPEN, tb_icon_size), wx.ID_OPEN, self.on_open_method),
				tooltip="Open Method (Ctrl+O)"
				)
		
		self.add_tool(
				ToolData("Save Method", get_icon(wx.ART_FILE_SAVE, tb_icon_size), wx.ID_SAVE, self.on_save_method),
				tooltip="Save Method (Ctrl+S)"
				)
		
		self.add_tool(
				ToolData("Save Method As", get_icon(wx.ART_FILE_SAVE_AS, tb_icon_size), wx.ID_SAVEAS, self.save_method_as)
				)
		
		self.toolbar.AddSeparator()
		
		self.add_tool(ToolData("Export as PDF", get_icon("export-pdf", tb_icon_size), ID_Export_PDF))
		self.add_tool(ToolData("Print (Ctrl+P)", get_icon("Document-print", tb_icon_size), wx.ID_PRINT))
		self.toolbar.EnableTool(wx.ID_PRINT, False)
		
		self.toolbar.AddSeparator()
		
		self.add_tool(
				ToolData("Help", get_icon(wx.ART_HELP, tb_icon_size), wx.ID_HELP, self.on_help),
				tooltip="Help (F1)"
				)
		
		# TODO: Recent methods
		# recent_menu = wx.Menu()
		#
		# for ID in {ID_RECENT_0, ID_RECENT_1, ID_RECENT_2, ID_RECENT_3, ID_RECENT_4, ID_RECENT_5, ID_RECENT_6,
		# 		   ID_RECENT_7, ID_RECENT_8, ID_RECENT_9}:
		# 	recent_menu.Append(ID, "item", "")
		# 	self.Bind(wx.EVT_MENU, self.on_menu_project_recent, id=ID)
		#
		# self.toolbar.SetDropdownMenu(wx.ID_OPEN, recent_menu)
		#
		
		self.toolbar.Realize()
		
	def add_tool(self, tool, kind=wx.ITEM_NORMAL, tooltip=None):
		toolbar = self.toolbar
		added_tool = toolbar.AddTool(tool.id, tool.name, tool.icon, tooltip if tooltip else tool.name, kind)
		if tool.handler:
			self.Bind(wx.EVT_TOOL, tool.handler, added_tool, tool.id)
		return added_tool
	
	# Open
	
	def on_open_method(self, _):  # wxGlade: MethodEditor.<event_handler>
		if self.save_changes():
			filename = file_dialog(self, "method", "Open Method", "Method Files", wx.FD_DEFAULT_STYLE)
			if filename:
				self.open_method(filename)
	
	def open_method(self, filename):
		self.filename = str(filename)
		self.method = Method.Method(self.filename)
		
		self.min_mass_spin_ctrl.SetValue(self.method.mass_range[0])
		self.max_mass_spin_ctrl.SetValue(self.method.mass_range[1])
		
		self.sav_gol_checkbox.SetValue(self.method.expr_creation_enable_sav_gol)
		
		self.tophat_checkbox.SetValue(self.method.expr_creation_enable_tophat)
		self.tophat_struct_value.SetValue(str(self.method.expr_creation_tophat))
		tophat_unit = self.method.expr_creation_tophat_unit
		if tophat_unit == "m":
			tophat_unit = 0
		elif tophat_unit == "s":
			tophat_unit = 1
		elif tophat_unit == "ms":
			tophat_unit = 2
		self.tophat_struct_units.SetSelection(tophat_unit)
		
		self.bb_points_value.SetValue(self.method.expr_creation_bb_points)
		self.bb_scans_value.SetValue(self.method.expr_creation_bb_scans)
		target_range = self.method.target_range
		self.target_range_min_value.SetValue(str(target_range[0]))
		self.target_range_max_value.SetValue(str(target_range[1]))
		
		self.noise_filter_checkbox.SetValue(self.method.expr_creation_enable_noise_filter)
		self.noise_thresh_value.SetValue(self.method.expr_creation_noise_thresh)
		
		self.base_peak_filter_value.SetValue(self.method.base_peak_filter_str)
		
		self.alignment_Dw_value.SetValue(str(self.method.alignment_rt_modulation))
		self.alignment_Gw_value.SetValue(str(self.method.alignment_gap_penalty))
		self.alignment_min_peaks_value.SetValue(str(self.method.alignment_min_peaks))
		
		self.ident_min_aligned_peaks_value.SetValue(self.method.ident_min_aligned_peaks)
		self.ident_top_peaks_value.SetValue(self.method.ident_top_peaks)
		self.ident_nist_n_hits_value.SetValue(self.method.ident_nist_n_hits)
		self.ident_min_peak_area_value.SetValue(self.method.ident_min_peak_area)
		self.ident_min_match_factor_value.SetValue(self.method.ident_min_match_factor)
		
		self.significance_level_value.SetValue(self.method.comparison_a)
		self.comparison_alignment_Dw_value.SetValue(str(self.method.comparison_rt_modulation))
		self.comparison_alignment_Gw_value.SetValue(str(self.method.comparison_gap_penalty))
		self.comparison_alignment_min_peaks_value.SetValue(str(self.method.comparison_min_peaks))
		
		# self.SetTitle(f'Method Editor - {filename}')
		self.update_title()
	
	def new_method(self, event=None):  # wxGlade: MethodEditor.<event_handler>
		if self.save_changes():
			with path(GSMatch.lib, "default.method") as default_method:
				self.open_method(default_method)
			self.filename = None
			self.fileNotSaved = False
			# self.SetTitle('Method Editor - New Method')
			self.update_title()
	
	# Save
	
	def save_changes(self):
		if self.fileNotSaved:
			while True:
				with wx.MessageDialog(
						self,
						"Do you want to save the changes to the current Method?",
						"Save Changes?",
						wx.ICON_QUESTION | wx.YES_NO | wx.CANCEL
						) as dlg:
					res = dlg.ShowModal()
					
					if res == wx.ID_YES:
						if self.save_method():
							break
					elif res == wx.ID_NO:
						print("Changes discarded")
						break
					else:
						return False
		
		return True
	
	def on_save_method(self, _):  # wxGlade: MethodEditor.<event_handler>
		self.save_method()
	
	def save_method(self, filename=None):
		"""

		:param filename:
		:type filename:

		:return: Whether the operation completed
		:rtype: bool
		"""
		
		if not filename:
			if not self.filename:
				filename = self.save_method_dialog()
				if filename:
					self.filename = filename
				else:
					return False
		else:
			self.filename = filename
		
		print(f"Saving method as {self.filename}")
		
		self.method.mass_range = (self.min_mass_spin_ctrl.GetValue(), self.max_mass_spin_ctrl.GetValue())
		
		self.method.expr_creation_enable_sav_gol = self.sav_gol_checkbox.GetValue()
		
		self.method.expr_creation_enable_tophat = self.tophat_checkbox.GetValue()
		self.method.expr_creation_tophat = self.tophat_struct_value.GetValue()
		self.method.expr_creation_tophat_unit = ["m", "s", "ms"][self.tophat_struct_units.GetSelection()]
		
		self.method.expr_creation_bb_points = self.bb_points_value.GetValue()
		self.method.expr_creation_bb_scans = self.bb_scans_value.GetValue()
		self.method.target_range = (
				float(self.target_range_min_value.GetValue()),
				float(self.target_range_max_value.GetValue())
				)
		
		self.method.expr_creation_enable_noise_filter = self.noise_filter_checkbox.GetValue()
		self.method.expr_creation_noise_thresh = self.noise_thresh_value.GetValue()
		
		self.method.base_peak_filter = self.base_peak_filter_value.GetValue()
		
		self.method.alignment_rt_modulation = self.alignment_Dw_value.GetValue()
		self.method.alignment_gap_penalty = self.alignment_Gw_value.GetValue()
		self.method.alignment_min_peaks = self.alignment_min_peaks_value.GetValue()
		
		self.method.ident_min_aligned_peaks = self.ident_min_aligned_peaks_value.GetValue()
		self.method.ident_top_peaks = self.ident_top_peaks_value.GetValue()
		self.method.ident_nist_n_hits = self.ident_nist_n_hits_value.GetValue()
		self.method.ident_min_peak_area = self.ident_min_peak_area_value.GetValue()
		self.method.ident_min_match_factor = self.ident_min_match_factor_value.GetValue()
		
		self.method.comparison_a = self.significance_level_value.GetValue()
		self.method.comparison_rt_modulation = self.comparison_alignment_Dw_value.GetValue()
		self.method.comparison_gap_penalty = self.comparison_alignment_Gw_value.GetValue()
		self.method.comparison_min_peaks = self.comparison_alignment_min_peaks_value.GetValue()
		
		self.method.save_method(self.filename)
		
		self.fileNotSaved = False
		
		# self.SetTitle(f'Method Editor - {filename}')
		self.update_title()
		
		return True
		
	def save_method_dialog(self):
		return file_dialog(
				self, "method", "Save Method As", "Method Files",
				style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT
				)

	def save_method_as(self, event=None):  # wxGlade: MethodEditor.<event_handler>
		filename = self.save_method_dialog()
		if filename:
			self.save_method(filename)
	
	# Close

	def on_close(self, event):
		if event.CanVeto():
			
			if not self.save_changes():
				event.Veto()
				return
		
		self.Destroy()
	
	def exit(self, _):  # wxGlade: MethodEditor.<event_handler>
		if self.save_changes():
			self.Destroy()
	
	# Other
	
	def on_help(self, event):  # wxGlade: MethodEditor.<event_handler>
		coming_soon()
	
	def update_title(self):
		self.SetTitle(f"Method Editor:{' *' if self.fileNotSaved else ' '} ({self.filename if self.filename else 'New Method'})")
	
	def on_change(self, _):  # wxGlade: MethodEditor.<event_handler>
		self.fileNotSaved = True
		self.update_title()
		
	# Printing and Export
	
	def on_export_pdf(self, _):  # wxGlade: MethodEditor.<event_handler>
		
		filename = file_dialog_wildcard(
				self,
				title="Export PDF",
				wildcard="PDF Files (*.pdf)|*.pdf;*.PDF",
				)
		
		if filename:
			MethodPDFExporter(
					self.method,
					input_filename=self.filename,
					output_filename=filename[0],
					title="Method Report"
					)
			time.sleep(1)
			webbrowser.open(filename[0])
	
	def on_print(self, _):  # wxGlade: MethodEditor.<event_handler>
		# Determine the currently selected tab and ask it to print
		MethodPDFExporter(
				self.method,
				input_filename=self.filename,
				output_filename="C:/users/dom13/Desktop/Method.pdf",
				title="Method Report"
				)
		# import time
		# time.sleep(2)
		self.pdf_handler.LoadFile("C:/users/dom13/Desktop/Method.pdf")
		self.pdf_handler.Print()
		
		print("on_print")
	
	def on_about(self, event):  # wxGlade: MethodEditor.<event_handler>
		Method.AboutDialog(self).ShowModal()
		# print("Event handler 'on_about' not implemented!")
		event.Skip()
		
# end of class MethodEditor

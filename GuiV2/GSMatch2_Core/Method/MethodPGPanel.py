#!/usr/bin/env python
#   -*- coding: utf-8 -*-
#
#  MethodPGPanel.py
#
#  This file is part of GunShotMatch
#
#  Copyright Â© 2019-2020 Dominic Davis-Foster <dominic@davis-foster.co.uk>
#
#  GunShotMatch is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  GunShotMatch is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#
# generated by wxGlade 0.9.3 on Wed Dec  4 09:52:37 2019
#


# 3rd party
import wx
from pubsub import pub
from wx.propgrid import PropertyGrid

# this package
from GuiV2.GSMatch2_Core.IDs import *
from GuiV2.GSMatch2_Core.InfoProperties import MassRange, RTRange
from GuiV2.GSMatch2_Core.Method import descriptions, MethodPDFExporter

_ = wx.GetTranslation

# begin wxGlade: dependencies
import wx.propgrid
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

# TODO: Make method editable for project (not experiments), and save modified method to tarfile,
#  keeping copy of method in user- and date-stamped audit trail folder with tarfile


class MethodPGPanel(wx.Panel):
	def __init__(
			self, parent, method, id=wx.ID_ANY, editable=True,
			pos=wx.DefaultPosition, size=wx.DefaultSize,
			style=0, name="MethodPGPanel"
			):
		"""
		:param parent: The parent window.
		:type parent: wx.Window
		:param method:
		:type method:
		:param id: An identifier for the panel. wx.ID_ANY is taken to mean a default.
		:type id: wx.WindowID, optional
		:param editable:
		:type editable:
		:param pos: The panel position. The value wx.DefaultPosition indicates a default position,
		chosen by either the windowing system or wxWidgets, depending on platform.
		:type pos: wx.Point, optional
		:param size: The panel size. The value wx.DefaultSize indicates a default size, chosen by
		either the windowing system or wxWidgets, depending on platform.
		:type size: wx.Size, optional
		:param style: The window style. See wx.Panel.
		:type style: int, optional
		:param name: Window name.
		:type name: str, optional
		"""
		
		args = (parent, id)
		kwds = dict(pos=pos, size=size, style=style, name=name)
		
		self.method = method
		self._properties = set()
		# begin wxGlade: MethodPGPanel.__init__
		kwds["style"] = kwds.get("style", 0) | wx.TAB_TRAVERSAL
		wx.Panel.__init__(self, *args, **kwds)
		self.filename_value = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.BORDER_NONE | wx.TE_MULTILINE | wx.TE_READONLY)
		self.property_grid_1 = PropertyGrid(self, wx.ID_ANY)

		self.__set_properties()
		self.__do_layout()
		# end wxGlade
		
		self.property_grid_1.Bind(wx.propgrid.EVT_PG_CHANGED, self.on_property_changed)
		self.property_grid_1.Bind(wx.propgrid.EVT_PG_SELECTED, self.on_property_selected)
		self.property_grid_1.Bind(wx.propgrid.EVT_PG_RIGHT_CLICK, self.on_property_rightclick)
		pub.subscribe(self.commit_changes, "SaveProject")
		
		self.allow_editing(editable)
		
		self.parent = parent
		
		self.fileNotSaved = False
	
	def __set_properties(self):
		# begin wxGlade: MethodPGPanel.__set_properties
		self.filename_value.SetMinSize((-1, 25))
		# end wxGlade
		
		# Show help as tooltips
		self.property_grid_1.SetExtraStyle(wx.propgrid.PG_EX_HELP_AS_TOOLTIPS)
		
		self.__populate_properties()
	
	def __do_layout(self):
		# begin wxGlade: MethodPGPanel.__do_layout
		outer_sizer = wx.BoxSizer(wx.VERTICAL)
		filename_box = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Method File"), wx.VERTICAL)
		filename_box.Add(self.filename_value, 0, wx.EXPAND | wx.LEFT | wx.TOP, 3)
		outer_sizer.Add(filename_box, 0, wx.EXPAND | wx.LEFT, 4)
		outer_sizer.Add(self.property_grid_1, 1, wx.EXPAND, 0)
		self.SetSizer(outer_sizer)
		outer_sizer.Fit(self)
		self.Layout()
		# end wxGlade
		
		# Set Splitter position
		wx.CallAfter(self.property_grid_1.SetSplitterLeft)

		self.filename_value.SetBackgroundColour(self.GetBackgroundColour())
	
	def allow_editing(self, allow=True):
		self._editable = allow
		for prop in self._properties:
			self.property_grid_1.SetPropertyReadOnly(prop, not allow)
	
	@property
	def editable(self):
		return self._editable
	
	@editable.setter
	def editable(self, value):
		self.allow_editing(value)
	
	def __populate_properties(self):
		# Experiment Creation Category
		self.new_category("Experiment Creation")
		
		# Mass Range
		mass_range_property = self.add_property(
				MassRange,
				name="mass_range", label="Mass Range")
		self._properties.add(mass_range_property)
		
		enable_sav_gol = self.add_bool_property(
				name="expr_creation_enable_sav_gol",
				label="Perform Savitzky-Golay smoothing")
		self._properties.add(enable_sav_gol)
		
		enable_tophat = self.add_bool_property(
				name="expr_creation_enable_tophat",
				label="Enable TopHat baseline correction")
		self._properties.add(enable_tophat)
		
		tophat_struct = self.add_string_property(
				name="tophat_struct",
				label="TopHat Structural Element")
		self._properties.add(tophat_struct)
		
		bb_points_property = self.add_int_property(
				name="expr_creation_bb_points",
				label="Biller-Biemann: Number of Scans")
		self._properties.add(bb_points_property)
		
		bb_scans_property = self.add_int_property(
				name="expr_creation_bb_scans",
				label="Biller-Biemann: Number of Points")
		self._properties.add(bb_scans_property)
		
		target_range_property = self.add_property(
				RTRange, name="target_range",
				label="Search for peaks between these times:")
		self._properties.add(target_range_property)
		
		# print(f"Propgrid enable_noise_filter: {self.method.expr_creation_enable_noise_filter}")
		
		enable_noise_filter = self.add_bool_property(
				name="expr_creation_enable_noise_filter",
				label="Enable Noise Filtering")
		self._properties.add(enable_noise_filter)
		
		noise_thresh_property = self.add_int_property(
				name="expr_creation_noise_thresh",
				label="Noise filtering threshold (ions)")
		self._properties.add(noise_thresh_property)
		
		base_peak_filter_property = wx.propgrid.ArrayStringProperty(
				name="base_peak_filter",
				label="Exclude peaks with the following base ion(s)",
				value=[str(x) for x in self.method.base_peak_filter]
				)
		self._properties.add(noise_thresh_property)
		self.property_grid_1.SetPropertyHelpString(base_peak_filter_property, descriptions["base_peak_filter"])
		self.property_grid_1.Append(base_peak_filter_property)
		self.property_grid_1.SetPropertyReadOnly(base_peak_filter_property)
		
		# ---------------------------------------------------------------------
		# Peak Alignment Category
		self.new_category("Peak Alignment")
		
		rt_modulation_property = self.add_float_property(
				name="alignment_rt_modulation",
				label="RT Modulation (seconds)")
		self._properties.add(rt_modulation_property)
		
		gap_penalty_property = self.add_float_property(
				name="alignment_gap_penalty",
				label="Gap Penalty")
		self._properties.add(gap_penalty_property)
		
		min_peaks_property = self.add_int_property(
				name="alignment_min_peaks",
				label="Minimum Peaks")
		self._properties.add(min_peaks_property)
		
		# ---------------------------------------------------------------------
		# Compound Identification
		self.new_category("Compound Identification")

		ident_min_aligned_peaks_property = self.add_int_property(
				name="ident_min_aligned_peaks",
				label="Minimum Aligned Peaks")
		self._properties.add(ident_min_aligned_peaks_property)
		
		ident_top_peaks_property = self.add_int_property(
				name="ident_top_peaks",
				label="Top Peaks")
		# ident_top_peaks_property.SetHelpString("The number of peaks to identify the compounds for.")
		self._properties.add(ident_top_peaks_property)
		
		ident_nist_n_hits_property = self.add_int_property(
				name="ident_nist_n_hits",
				label="Number of `Hits`")
		self._properties.add(ident_nist_n_hits_property)
		
		ident_min_peak_area_property = self.add_int_property(
				name="ident_min_peak_area",
				label="Minimum Peak Area")
		self._properties.add(ident_min_peak_area_property)
		
		ident_min_match_factor_property = self.add_int_property(
				name="ident_min_match_factor",
				label="Minimum Match Factor")
		self._properties.add(ident_min_match_factor_property)
		
		# ---------------------------------------------------------------------
		# Comparison Category
		self.new_category("Project Comparison")
		
		comparison_rt_modulation_property = self.add_float_property(
				name="comparison_rt_modulation",
				label="RT Modulation (seconds)")
		self._properties.add(comparison_rt_modulation_property)
		
		comparison_gap_penalty_property = self.add_float_property(
				name="comparison_gap_penalty",
				label="Gap Penalty")
		self._properties.add(comparison_gap_penalty_property)
		
		comparison_min_peaks_property = self.add_int_property(
				name="comparison_min_peaks", label="Minimum Peaks")
		self._properties.add(comparison_min_peaks_property)
		
		# Significance Level
		comparison_a_property = self.add_float_property(
				name="comparison_a", label="Significance Level")
		self._properties.add(comparison_a_property)
		
	def commit_changes(self):
		self.property_grid_1.CommitChangesFromEditor()
	
	def on_property_changed(self, event):
		"""
		Handler for events fired when property changed
		"""
		
		p = event.GetProperty()
		if p:
			print(f'{p.GetName()} changed to "{p.GetValueAsString()}"')
			
			if getattr(self.method, p.GetName()) == p.GetValue():
				# Don't save
				print("Value didn't change")
				print(p.GetName(), p.GetValue(), getattr(self.method, p.GetName()))
				return
			else:
				setattr(self.method, p.GetName(), p.GetValue())
				print("Value changed")
			
			self.fileNotSaved = True
		
		event.Skip()

	def on_property_selected(self, event):
		"""
		Handler for events fired when property selected
		"""
		
		p = event.GetProperty()
		if p:
			print(f'{p.GetName()} selected')
			# print(f"Propgrid Value: {p.GetValue()}")
			# print(f"Method Value: {getattr(self.method, p.GetName())}")
		else:
			print('Nothing selected')
	
	def on_property_rightclick(self, event):
		"""
		Handler for event fired when a property is right clicked
		"""
		
		p = event.GetProperty()
		if p:
			print(f'{event.GetProperty().GetName()} right clicked')
		else:
			print("Nothing right clicked")
	
	def add_string_property(self, name, label):
		return self.add_property(
				wx.propgrid.StringProperty, name=name,
				label=label)
	
	def add_int_property(self, name, label):
		return self.add_property(
				wx.propgrid.IntProperty, name=name,
				label=label)
		
	def add_float_property(self, name, label):
		return self.add_property(
				wx.propgrid.FloatProperty, name=name,
				label=label)
	
	def add_bool_property(self, name, label):
		prop = self.add_property(
				wx.propgrid.BoolProperty, name=name,
				label=label
				)
		self.property_grid_1.SetPropertyAttribute(prop, "UseCheckbox", True)  # The attribute name and value
		return prop
	
	def add_property(self, prop_type, name, label):
		prop = prop_type(
				name=name, label=label,
				value=getattr(self.method, name))
		self.property_grid_1.Append(prop)
		self.property_grid_1.SetPropertyHelpString(prop, descriptions[name])
		
		# print(f"Adding property {name} with value {getattr(self.method, name)}")
		
		return prop
	
	def new_category(self, label):
		self.property_grid_1.Append(wx.propgrid.PropertyCategory(label))
	
	def export_pdf(self, input_filename, output_filename):
		MethodPDFExporter(
				self.method,
				input_filename=input_filename,
				output_filename=output_filename,
				)

# end of class MethodPGPanel

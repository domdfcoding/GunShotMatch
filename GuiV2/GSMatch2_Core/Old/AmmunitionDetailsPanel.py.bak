#  !/usr/bin/env python
#   -*- coding: utf-8 -*-
#
#  AmmunitionDetailsPanel.py
#
#  This file is part of GunShotMatch
#
#  Copyright (c) 2019-2020 Dominic Davis-Foster <dominic@davis-foster.co.uk>
#
#  GunShotMatch is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  GunShotMatch is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#

#
# generated by wxGlade 0.9.3 on Fri Dec  6 20:32:07 2019
#

# stdlib
import pathlib

# 3rd party
from wx.propgrid import PropertyGrid
from pubsub import pub

# this package
from GuiV2.GSMatch2_Core import Ammunition
from GuiV2.GSMatch2_Core.IDs import *
from GuiV2.GSMatch2_Core.InfoProperties import ComboBoxEditor

# begin wxGlade: dependencies
import wx.propgrid
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class AmmunitionDetailsPanel(wx.Panel):
	def __init__(self, record, *args, **kwds):
		# begin wxGlade: AmmunitionDetailsPanel.__init__
		kwds["style"] = kwds.get("style", 0) | wx.TAB_TRAVERSAL
		wx.Panel.__init__(self, *args, **kwds)
		self.filename_value = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.BORDER_NONE | wx.TE_MULTILINE | wx.TE_READONLY)
		self.ammo_details_splitter = wx.SplitterWindow(self, wx.ID_ANY, style=wx.SP_3D | wx.SP_LIVE_UPDATE)
		self.ammo_grid_panel = wx.Panel(self.ammo_details_splitter, wx.ID_ANY)
		self.ammo_details_grid = PropertyGrid(self.ammo_grid_panel, wx.ID_ANY)
		self.ammo_images_splitter = wx.SplitterWindow(self.ammo_details_splitter, wx.ID_ANY, style=wx.SP_3D | wx.SP_LIVE_UPDATE)
		self.propellant_image_panel = wx.Panel(self.ammo_images_splitter, wx.ID_ANY)
		self.propellant_image = AmmoImagePanel(self.propellant_image_panel, "C:/Users/dom13/GunShotMatch/GunShotMatch/GuiV2/SP_Ref__596_10x.jpg")
		self.headstamp_image_panel = wx.Panel(self.ammo_images_splitter, wx.ID_ANY)
		self.headstamp_image = AmmoImagePanel(self.headstamp_image_panel, "C:/Users/dom13/GunShotMatch/GunShotMatch/GuiV2/SP_Ref__596_10x.jpg")

		self.__set_properties()
		self.__do_layout()
		# end wxGlade
		
		self.ammo_details_grid.Bind(wx.propgrid.EVT_PG_CHANGED, self.on_property_changed)
		self.ammo_details_grid.Bind(wx.propgrid.EVT_PG_SELECTED, self.on_property_selected)
		self.ammo_details_grid.Bind(wx.propgrid.EVT_PG_RIGHT_CLICK, self.on_property_rightclick)
		pub.subscribe(self.commit_changes, "SaveProject")
		
		#
		# Let's use some simple custom editor
		#
		# NOTE: Editor must be registered *before* adding a property that
		# uses it.
		import sys
		if not getattr(sys, '_PropGridEditorsRegistered', False):
			self.ammo_details_grid.RegisterEditor(ComboBoxEditor, "ComboBoxEditor")
			# ensure we only do it once
			sys._PropGridEditorsRegistered = True
		
		self.fileNotSaved = False
		
		if record is None:
			self.record = Ammunition.Details.new_empty()
			self.filename = None
		elif isinstance(record, (str, pathlib.Path)):
			self.filename = record
			self.record = Ammunition.Details.load(self.filename)
		elif isinstance(record, Ammunition.Details):
			self.record = record
			self.filename = record.filename.value
		else:
			raise TypeError(
					"'record' must be a 'str', 'pathlib.Path', or "
					"'GuiV2.GSMatch2_Core.Ammunition.Details' object, "
					f"not {type(record)}"
					)
		
		self.open_record(self.record)
	
	def commit_changes(self):
		self.ammo_details_grid.CommitChangesFromEditor()
	
	def __do_layout(self):
		# begin wxGlade: AmmunitionDetailsPanel.__do_layout
		grid_sizer = wx.BoxSizer(wx.VERTICAL)
		headstamp_image_sizer = wx.StaticBoxSizer(wx.StaticBox(self.headstamp_image_panel, wx.ID_ANY, "Headstamp"), wx.HORIZONTAL)
		propellant_image_sizer = wx.StaticBoxSizer(wx.StaticBox(self.propellant_image_panel, wx.ID_ANY, "Propellant"), wx.HORIZONTAL)
		ammo_grid_sizer = wx.BoxSizer(wx.VERTICAL)
		filename_box = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Filename"), wx.VERTICAL)
		filename_box.Add(self.filename_value, 0, wx.EXPAND | wx.LEFT | wx.TOP, 3)
		grid_sizer.Add(filename_box, 0, wx.EXPAND | wx.LEFT, 4)
		ammo_grid_sizer.Add(self.ammo_details_grid, 1, wx.EXPAND, 0)
		label_1 = wx.StaticText(self.ammo_grid_panel, wx.ID_ANY, "TODO:\nHere put a thumbnail control to show thumbnails of additionanl images, which when double clicked open an AmmoImagesPanel in place of the thumbnail control")
		ammo_grid_sizer.Add(label_1, 0, 0, 0)
		self.ammo_grid_panel.SetSizer(ammo_grid_sizer)
		propellant_image_sizer.Add(self.propellant_image, 1, wx.EXPAND, 0)
		self.propellant_image_panel.SetSizer(propellant_image_sizer)
		headstamp_image_sizer.Add(self.headstamp_image, 1, wx.EXPAND, 0)
		self.headstamp_image_panel.SetSizer(headstamp_image_sizer)
		self.ammo_images_splitter.SplitHorizontally(self.propellant_image_panel, self.headstamp_image_panel)
		self.ammo_details_splitter.SplitVertically(self.ammo_grid_panel, self.ammo_images_splitter)
		grid_sizer.Add(self.ammo_details_splitter, 1, wx.EXPAND, 0)
		self.SetSizer(grid_sizer)
		grid_sizer.Fit(self)
		self.Layout()
		# end wxGlade
		
		# Set Splitter position
		wx.CallAfter(self.ammo_details_grid.SetSplitterLeft)
	
	# The ammo_images_splitter defaults to having top image as large as possible and bottom image fill the remaining space
	# It's a feature, not a bug ;)
	
	def __set_properties(self):
		# begin wxGlade: AmmunitionDetailsPanel.__set_properties
		self.filename_value.SetMinSize((-1, 25))
		self.ammo_images_splitter.SetMinimumPaneSize(20)
		self.ammo_details_splitter.SetMinimumPaneSize(20)
		self.ammo_details_splitter.SetSashGravity(0.5)
		# end wxGlade
		
		self.ammo_details_grid.SetExtraStyle(wx.propgrid.PG_EX_HELP_AS_TOOLTIPS)
		
		self.filename_value.SetBackgroundColour(self.GetBackgroundColour())
	
	#
	# @property
	# def filename(self):
	# 	return self._filename
	#
	# @filename.setter
	# def filename(self, value):
	# 	self._filename = value
	# 	self.filename_value.SetValue(value)
	
	def on_property_changed(self, event):
		"""
		Handler for events fired when property changed

		:param event:
		:type event:

		:return:
		:rtype:
		"""
		
		p = event.GetProperty()
		if p:
			# Set the new value in the record
			print(p.GetName(), p.GetValue())
			# Special case for name:
			if p.GetName() == "ammo_details_name":
				self.record.name = p.GetValue()
			# Special case for propellant_info
			elif p.GetName().startswith("propellant_"):
				for prop in self.record.propellant_granules.all_properties:
					if prop.name == p.GetName():
						if prop.value == p.GetValue():
							# Don't save
							return
						prop.value = p.GetValue()
			# All other properties
			else:
				for prop in self.record.all_properties:
					if prop.name == p.GetName():
						if prop.value == p.GetValue():
							# Don't save
							return
						prop.value = p.GetValue()
			
			self.fileNotSaved = True
		print(self.record.manufacturer)
		
		event.Skip()
	
	def on_property_selected(self, event):
		"""
		Handler for events fired when property selected

		:param event:
		:type event:

		:return:
		:rtype:
		"""
		
		p = event.GetProperty()
		if p:
			print(f'Ammo Details: {event.GetProperty().GetName()} selected')
		else:
			print('Ammo Details: Nothing selected')
		
		event.Skip()
	
	def on_property_rightclick(self, event):
		"""
		Handler for event fired when a property is right clicked

		:param event:
		:type event:

		:return:
		:rtype:
		"""
		
		p = event.GetProperty()
		if p:
			print(f'Ammo Details: {event.GetProperty().GetName()} right clicked')
		else:
			print("Ammo Details: Nothing right clicked")
		
		event.Skip()
	
	def open_record(self, record=None):
		"""
		Open an Ammunition Details record, either from a filename or from an existing Ammunition object

		:param record: The Ammunition Details record open
		:type record: str or pathlib.Path or GuiV2.GSMatch2_Core.Ammunition.Details, optional

		:return:
		:rtype:
		"""
		
		# Clear all properties from the grid
		self.ammo_details_grid.Clear()
		
		self.fileNotSaved = False
		
		if record is None:
			self.record = Ammunition.Details.new_empty()
			self.filename = None
		elif isinstance(record, (str, pathlib.Path)):
			self.filename = record
			self.record = Ammunition.Details.load(self.filename)
		elif isinstance(record, Ammunition.Details):
			self.record = record
			self.filename = record.filename.value
		else:
			raise TypeError(
					"'record' must be a 'str', 'pathlib.Path', or "
					"'GuiV2.GSMatch2_Core.Ammunition.AmmunitionDetails.AmmunitionDetails' object, "
					f"not {type(record)}"
					)
		
		# Add properties to grid
		# Ammunition Information Category
		self.ammo_details_grid.Append(wx.propgrid.PropertyCategory("Ammunition Information"))
		
		# Name
		name_property = wx.propgrid.StringProperty(name="ammo_details_name", label="Name", value=str(self.record.name))
		name_property.SetHelpString("The name of the Ammunition")
		self.ammo_details_grid.Append(name_property)
		
		for prop in self.record.ammunition_properties:
			# Add property
			property_item = prop.propgrid
			self.ammo_details_grid.Append(property_item)
			if not prop.editable:
				self.ammo_details_grid.SetPropertyReadOnly(property_item)
			#self.ammo_details_grid.Row(property_item)
			print(prop.propgrid.GetEditorClass())
			print(dir(prop.propgrid.GetEditorClass()))
			# import sys
			# if not getattr(sys, '_PropGridEditorsRegistered', False):
			# 	self.ammo_details_grid.RegisterEditor(TrivialPropertyEditor)
			# 	self.ammo_details_grid.RegisterEditor(SampleMultiButtonEditor)
			# 	self.ammo_details_grid.RegisterEditor(LargeImageEditor)
			# 	# ensure we only do it once
			# 	sys._PropGridEditorsRegistered = True
			#
			# self.ammo_details_grid.SetPropertyEditor(property_item, "ComboBoxEditor")
			#
		
		# Propellant Information Category
		self.ammo_details_grid.Append(wx.propgrid.PropertyCategory("Propellant Information"))
		
		for prop in self.record.propellant_granules.all_properties:
			# print(prop.name)
			# Add property
			property_item = prop.propgrid
			self.ammo_details_grid.Append(property_item)
			if not prop.editable:
				self.ammo_details_grid.SetPropertyReadOnly(property_item)
		
		# Add properties to grid
		# File Information Category
		self.ammo_details_grid.Append(wx.propgrid.PropertyCategory("File Information"))
		
		for prop in self.record.file_properties:
			# print(prop.name)
			# Add property
			property_item = prop.propgrid
			self.ammo_details_grid.Append(property_item)
			if not prop.editable:
				self.ammo_details_grid.SetPropertyReadOnly(property_item)
		
		self.ammo_details_grid.Collapse("File Information")
	
	def save_record(self, filename):
		"""

		:param filename:
		:type filename:

		:return: Whether the operation completed
		:rtype: bool
		"""
		
		if filename:
			self.filename = filename
		
		print(f"Ammo Details: Saving record as {self.filename}")
		
		self.record.store(self.filename)
		self.fileNotSaved = False
		return True

# end of class AmmunitionDetailsPanel

#  !/usr/bin/env python
#   -*- coding: utf-8 -*-
#
#  MethodEditor.py
#
#  This file is part of GunShotMatch
#
#  Copyright (c) 2019  Dominic Davis-Foster <dominic@davis-foster.co.uk>
#
#  GunShotMatch is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  GunShotMatch is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
# generated by wxGlade 0.9.3 on Fri Nov 29 11:37:50 2019
#

# stdlib

# 3rd party
from domdf_wxpython_tools.dialogs import file_dialog
from domdf_wxpython_tools.utils import coming_soon
from importlib_resources import path

# this package
import GSMatch.lib
from GuiV2.GSMatch2_Core.utils import ToolData
from GuiV2.GSMatch2_Core.IDs import *
from GuiV2.GSMatch2_Core.Method import Method


# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


# TODO: Value validation before saving


class MethodEditor(wx.Frame):
	def __init__(self, *args, method=None, **kwds):
		"""


		:param method: The method file to open, Default None
		:type method: str, optional
		"""
		
		# begin wxGlade: MethodEditor.__init__
		kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
		wx.Frame.__init__(self, *args, **kwds)
		self.SetSize((800, 800))
		
		# Menu Bar
		self.MethodEditor_menubar = wx.MenuBar()
		wxglade_tmp_menu = wx.Menu()
		wxglade_tmp_menu.Append(wx.ID_NEW, "&New Method", "")
		self.Bind(wx.EVT_MENU, self.new_method, id=wx.ID_NEW)
		wxglade_tmp_menu.Append(wx.ID_OPEN, "&Open Method", "")
		self.Bind(wx.EVT_MENU, self.on_open_method, id=wx.ID_OPEN)
		wxglade_tmp_menu.Append(wx.ID_SAVE, "&Save Method", "")
		self.Bind(wx.EVT_MENU, self.on_save_method, id=wx.ID_SAVE)
		wxglade_tmp_menu.Append(wx.ID_SAVEAS, "Save Method As", "")
		self.Bind(wx.EVT_MENU, self.save_method_as, id=wx.ID_SAVEAS)
		wxglade_tmp_menu.Append(wx.ID_EXIT, "Close", "")
		self.Bind(wx.EVT_MENU, self.exit, id=wx.ID_EXIT)
		self.MethodEditor_menubar.Append(wxglade_tmp_menu, "Method")
		wxglade_tmp_menu = wx.Menu()
		wxglade_tmp_menu.Append(wx.ID_HELP, "Help", "")
		self.Bind(wx.EVT_MENU, self.on_help, id=wx.ID_HELP)
		self.MethodEditor_menubar.Append(wxglade_tmp_menu, "Help")
		self.SetMenuBar(self.MethodEditor_menubar)
		# Menu Bar end
		self.method_notebook = wx.Notebook(self, wx.ID_ANY)
		self.expr_creation_tab = wx.Panel(self.method_notebook, wx.ID_ANY)
		self.expr_creation_scroller = wx.ScrolledWindow(self.expr_creation_tab, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
		self.min_mass_spin_ctrl = wx.SpinCtrl(self.expr_creation_scroller, wx.ID_ANY, "50", min=0, max=2000)
		self.max_mass_spin_ctrl = wx.SpinCtrl(self.expr_creation_scroller, wx.ID_ANY, "50", min=0, max=2000)
		self.sav_gol_checkbox = wx.CheckBox(self.expr_creation_scroller, wx.ID_ANY, "Perform Savitzky-Golay smoothing")
		self.tophat_checkbox = wx.CheckBox(self.expr_creation_scroller, wx.ID_ANY, "Enable")
		self.tophat_struct_value = wx.TextCtrl(self.expr_creation_scroller, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.tophat_struct_units = wx.Choice(self.expr_creation_scroller, wx.ID_ANY, choices=["min", "sec", "ms"])
		self.bb_points_value = wx.SpinCtrl(self.expr_creation_scroller, wx.ID_ANY, "0", min=0, max=100, style=0)
		self.bb_scans_value = wx.SpinCtrl(self.expr_creation_scroller, wx.ID_ANY, "0", min=0, max=100, style=0)
		self.target_range_min_value = wx.TextCtrl(self.expr_creation_scroller, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.target_range_max_value = wx.TextCtrl(self.expr_creation_scroller, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.noise_filter_checkbox = wx.CheckBox(self.expr_creation_scroller, wx.ID_ANY, "Enable")
		self.noise_thresh_value = wx.SpinCtrl(self.expr_creation_scroller, wx.ID_ANY, "0", min=0, max=100, style=0)
		self.base_peak_filter_value = wx.TextCtrl(self.expr_creation_scroller, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.dpa_tab = wx.Panel(self.method_notebook, wx.ID_ANY)
		self.dpa_scroller = wx.ScrolledWindow(self.dpa_tab, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
		self.alignment_Dw_value = wx.TextCtrl(self.dpa_scroller, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.alignment_Gw_value = wx.TextCtrl(self.dpa_scroller, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.alignment_min_peaks_value = wx.TextCtrl(self.dpa_scroller, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.comparison_tab = wx.Panel(self.method_notebook, wx.ID_ANY)
		self.comparison_scroller = wx.ScrolledWindow(self.comparison_tab, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
		self.comparison_alignment_Dw_value = wx.TextCtrl(self.comparison_scroller, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.comparison_alignment_Gw_value = wx.TextCtrl(self.comparison_scroller, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.comparison_alignment_min_peaks_value = wx.TextCtrl(self.comparison_scroller, wx.ID_ANY, "", style=wx.TE_NO_VSCROLL)
		self.significance_level_value = wx.SpinCtrlDouble(self.comparison_scroller, wx.ID_ANY, "0.05", min=0.0, max=1.0)
		self.significance_level_value.SetDigits(3)

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_SPINCTRL, self.on_change, self.min_mass_spin_ctrl)
		self.Bind(wx.EVT_TEXT, self.on_change, self.min_mass_spin_ctrl)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.min_mass_spin_ctrl)
		self.Bind(wx.EVT_SPINCTRL, self.on_change, self.max_mass_spin_ctrl)
		self.Bind(wx.EVT_TEXT, self.on_change, self.max_mass_spin_ctrl)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.max_mass_spin_ctrl)
		self.Bind(wx.EVT_CHECKBOX, self.on_change, self.sav_gol_checkbox)
		self.Bind(wx.EVT_CHECKBOX, self.on_change, self.tophat_checkbox)
		self.Bind(wx.EVT_TEXT, self.on_change, self.tophat_struct_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.tophat_struct_value)
		self.Bind(wx.EVT_CHOICE, self.on_change, self.tophat_struct_units)
		self.Bind(wx.EVT_SPINCTRL, self.on_change, self.bb_points_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.bb_points_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.bb_points_value)
		self.Bind(wx.EVT_SPINCTRL, self.on_change, self.bb_scans_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.bb_scans_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.bb_scans_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.target_range_min_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.target_range_min_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.target_range_max_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.target_range_max_value)
		self.Bind(wx.EVT_CHECKBOX, self.on_change, self.noise_filter_checkbox)
		self.Bind(wx.EVT_SPINCTRL, self.on_change, self.noise_thresh_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.noise_thresh_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.noise_thresh_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.base_peak_filter_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.base_peak_filter_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.alignment_Dw_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.alignment_Dw_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.alignment_Gw_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.alignment_Gw_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.alignment_min_peaks_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.alignment_min_peaks_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.comparison_alignment_Dw_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.comparison_alignment_Dw_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.comparison_alignment_Gw_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.comparison_alignment_Gw_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.comparison_alignment_min_peaks_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.comparison_alignment_min_peaks_value)
		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.on_change, self.significance_level_value)
		self.Bind(wx.EVT_TEXT, self.on_change, self.significance_level_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_change, self.significance_level_value)
		# end wxGlade
	
		self.__create_toolbar()
		
		self.Bind(wx.EVT_CLOSE, self.OnClose)
		
		if method:
			self.open_method(method)
		else:
			self.new_method()
	
	# def make_read_only(self):
	# 	self.min_mass_spin_ctrl.Enable(False)
	# 	self.max_mass_spin_ctrl.Enable(False)
	# 	self.sav_gol_checkbox.Enable(False)
	# 	self.tophat_checkbox.Enable(False)
	# 	self.bb_points_value.Enable(False)
	# 	self.bb_scans_value.Enable(False)
	# 	self.target_range_max_value.Enable(False)
	# 	self.target_range_min_value.Enable(False)
	# 	self.noise_filter_checkbox.Enable(False)
	# 	self.noise_thresh_value.Enable(False)
	# 	self.base_peak_filter_value.Enable(False)
	# 	self.alignment_Dw_value.Enable(False)
	# 	self.alignment_Gw_value.Enable(False)
	# 	self.alignment_min_peaks_value.Enable(False)
	# 	self.comparison_alignment_Dw_value.Enable(False)
	# 	self.comparison_alignment_Gw_value.Enable(False)
	# 	self.comparison_alignment_min_peaks_value.Enable(False)
	# 	self.significance_level_value.Enable(False)
	
	def __set_properties(self):
		# begin wxGlade: MethodEditor.__set_properties
		self.SetTitle("Method Editor")
		self.sav_gol_checkbox.SetValue(1)
		self.tophat_checkbox.SetValue(1)
		self.tophat_struct_value.SetMinSize((50, 29))
		self.tophat_struct_value.SetMaxLength(4)
		self.tophat_struct_units.SetSelection(0)
		self.bb_points_value.SetMinSize((120, 29))
		self.bb_scans_value.SetMinSize((120, 29))
		self.target_range_min_value.SetMinSize((55, 29))
		self.target_range_min_value.SetMaxLength(5)
		self.target_range_max_value.SetMinSize((55, 29))
		self.target_range_max_value.SetMaxLength(5)
		self.noise_filter_checkbox.SetValue(1)
		self.noise_thresh_value.SetMinSize((120, 29))
		self.base_peak_filter_value.SetMinSize((300, 29))
		self.base_peak_filter_value.SetToolTip("Peaks with these base ions (i.e. the most intense peak in the mass spectrum) will be excluded from the results. This can be useful for excluding compounds related to septum bleed, which usually have a base ion at m/z 73")
		self.expr_creation_scroller.SetScrollRate(10, 10)
		self.alignment_Dw_value.SetMinSize((50, 29))
		self.alignment_Dw_value.SetMaxLength(4)
		self.alignment_Gw_value.SetMinSize((50, 29))
		self.alignment_Gw_value.SetMaxLength(4)
		self.alignment_min_peaks_value.SetMinSize((50, 29))
		self.alignment_min_peaks_value.SetMaxLength(4)
		self.dpa_scroller.SetScrollRate(10, 10)
		self.comparison_alignment_Dw_value.SetMinSize((50, 29))
		self.comparison_alignment_Dw_value.SetMaxLength(4)
		self.comparison_alignment_Gw_value.SetMinSize((50, 29))
		self.comparison_alignment_Gw_value.SetMaxLength(4)
		self.comparison_alignment_min_peaks_value.SetMinSize((50, 29))
		self.comparison_alignment_min_peaks_value.SetMaxLength(4)
		self.significance_level_value.SetIncrement(0.001)
		self.comparison_scroller.SetScrollRate(10, 10)
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: MethodEditor.__do_layout
		outer_grid_sizer = wx.GridSizer(1, 1, 0, 0)
		comparison_scroller_sizer = wx.BoxSizer(wx.VERTICAL)
		comparison_sizer = wx.BoxSizer(wx.VERTICAL)
		comparison_significance_sizer = wx.StaticBoxSizer(wx.StaticBox(self.comparison_scroller, wx.ID_ANY, "Significance Level"), wx.VERTICAL)
		comparison_dpa_sizer = wx.StaticBoxSizer(wx.StaticBox(self.comparison_scroller, wx.ID_ANY, "Dynamic Peak Alignment"), wx.VERTICAL)
		alignment_grid_sizer_copy = wx.FlexGridSizer(3, 2, 0, 0)
		comparison_alignment_Dw_sizer = wx.BoxSizer(wx.HORIZONTAL)
		dpa_scroller_sizer = wx.BoxSizer(wx.VERTICAL)
		dpa_sizer = wx.BoxSizer(wx.VERTICAL)
		dpa_grid_sizer = wx.FlexGridSizer(3, 2, 0, 0)
		alignment_Dw_sizer = wx.BoxSizer(wx.HORIZONTAL)
		expr_creation_scroller_sizer = wx.BoxSizer(wx.VERTICAL)
		expr_creation_sizer = wx.BoxSizer(wx.VERTICAL)
		base_peak_filter_sizer = wx.StaticBoxSizer(wx.StaticBox(self.expr_creation_scroller, wx.ID_ANY, "Base Peak Filter"), wx.VERTICAL)
		noise_filter_sizer = wx.StaticBoxSizer(wx.StaticBox(self.expr_creation_scroller, wx.ID_ANY, "Noise Filtering"), wx.VERTICAL)
		noise_thresh_grid_sizer = wx.FlexGridSizer(1, 3, 0, 0)
		biller_biemann_sizer = wx.StaticBoxSizer(wx.StaticBox(self.expr_creation_scroller, wx.ID_ANY, "Biller and Biemann Peak Detection"), wx.VERTICAL)
		target_range_grid_sizer = wx.FlexGridSizer(1, 4, 0, 0)
		bb_grid_sizer = wx.FlexGridSizer(2, 2, 0, 0)
		tophat_sizer = wx.StaticBoxSizer(wx.StaticBox(self.expr_creation_scroller, wx.ID_ANY, "TopHat Baseline Correction"), wx.VERTICAL)
		tophat_grid_sizer = wx.FlexGridSizer(1, 3, 0, 0)
		mass_range_sizer = wx.StaticBoxSizer(wx.StaticBox(self.expr_creation_scroller, wx.ID_ANY, "Mass Range"), wx.VERTICAL)
		mass_range_grid = wx.FlexGridSizer(2, 2, 0, 0)
		expr_creation_header = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "Experiment Creation")
		expr_creation_header.SetFont(wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
		expr_creation_sizer.Add(expr_creation_header, 0, wx.BOTTOM, 10)
		min_mass_label = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "Minimum Mass: ")
		mass_range_grid.Add(min_mass_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		mass_range_grid.Add(self.min_mass_spin_ctrl, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		max_mass_label = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "Maximum Mass: ")
		mass_range_grid.Add(max_mass_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		mass_range_grid.Add(self.max_mass_spin_ctrl, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		mass_range_sizer.Add(mass_range_grid, 1, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 10)
		mass_range_text_bottom = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "This must be small enough to encompass all samples")
		mass_range_sizer.Add(mass_range_text_bottom, 0, wx.BOTTOM | wx.LEFT | wx.RIGHT, 10)
		expr_creation_sizer.Add(mass_range_sizer, 0, wx.BOTTOM | wx.EXPAND, 10)
		expr_creation_sizer.Add(self.sav_gol_checkbox, 0, wx.BOTTOM, 10)
		tophat_sizer.Add(self.tophat_checkbox, 0, wx.LEFT | wx.TOP, 5)
		tophat_struct_label = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "Tophat Structural Element: ")
		tophat_struct_label.SetToolTip("Structural element for PyMS Tophat baseline correction. The structural element needs to be larger than the features one wants to retain in the spectrum after the top-hat transform")
		tophat_grid_sizer.Add(tophat_struct_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		tophat_grid_sizer.Add(self.tophat_struct_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		tophat_grid_sizer.Add(self.tophat_struct_units, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		tophat_sizer.Add(tophat_grid_sizer, 1, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 10)
		expr_creation_sizer.Add(tophat_sizer, 0, wx.BOTTOM | wx.EXPAND, 10)
		bb_points_label = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "Number of Points: ")
		bb_points_label.SetToolTip("The window width, in data points, for detecting the local maxima")
		bb_grid_sizer.Add(bb_points_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		bb_grid_sizer.Add(self.bb_points_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		bb_scans_label = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "Number of Scans: ")
		bb_scans_label.SetToolTip("The number of scans across which neighbouring, apexing, ions are combined and considered as belonging to the same peak")
		bb_grid_sizer.Add(bb_scans_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		bb_grid_sizer.Add(self.bb_scans_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		biller_biemann_sizer.Add(bb_grid_sizer, 1, wx.ALL | wx.EXPAND, 10)
		target_range_top_text = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "Search for peaks between these times:")
		biller_biemann_sizer.Add(target_range_top_text, 0, wx.LEFT | wx.RIGHT | wx.TOP, 10)
		target_range_grid_sizer.Add(self.target_range_min_value, 0, wx.LEFT, 5)
		target_mid_text = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "minutes and ")
		target_range_grid_sizer.Add(target_mid_text, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		target_range_grid_sizer.Add(self.target_range_max_value, 0, 0, 0)
		target_post_text = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "minutes")
		target_range_grid_sizer.Add(target_post_text, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		biller_biemann_sizer.Add(target_range_grid_sizer, 0, wx.ALL | wx.EXPAND, 10)
		expr_creation_sizer.Add(biller_biemann_sizer, 0, wx.BOTTOM | wx.EXPAND, 10)
		noise_filter_sizer.Add(self.noise_filter_checkbox, 0, wx.LEFT | wx.TOP, 5)
		noise_thresh_label = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "Noise Filtering Threshold: ")
		noise_thresh_grid_sizer.Add(noise_thresh_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		noise_thresh_grid_sizer.Add(self.noise_thresh_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		noise_thresh_ions = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "ions")
		noise_thresh_grid_sizer.Add(noise_thresh_ions, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		noise_filter_sizer.Add(noise_thresh_grid_sizer, 1, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 10)
		expr_creation_sizer.Add(noise_filter_sizer, 0, wx.BOTTOM | wx.EXPAND, 10)
		base_peak_filter_text_1 = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "Exclude peaks with the following base ion(s):")
		base_peak_filter_text_1.SetToolTip("Peaks with these base ions (i.e. the most intense peak in the mass spectrum) will be excluded from the results. This can be useful for excluding compounds related to septum bleed, which usually have a base ion at m/z 73")
		base_peak_filter_sizer.Add(base_peak_filter_text_1, 0, wx.ALL, 10)
		base_peak_filter_sizer.Add(self.base_peak_filter_value, 0, wx.LEFT | wx.RIGHT, 20)
		base_peak_filter_text_2 = wx.StaticText(self.expr_creation_scroller, wx.ID_ANY, "Seperate multiple values with commas ( , )")
		base_peak_filter_text_2.SetToolTip("Peaks with these base ions (i.e. the most intense peak in the mass spectrum) will be excluded from the results. This can be useful for excluding compounds related to septum bleed, which usually have a base ion at m/z 73")
		base_peak_filter_sizer.Add(base_peak_filter_text_2, 0, wx.ALL, 10)
		expr_creation_sizer.Add(base_peak_filter_sizer, 1, wx.BOTTOM | wx.EXPAND, 10)
		self.expr_creation_scroller.SetSizer(expr_creation_sizer)
		expr_creation_scroller_sizer.Add(self.expr_creation_scroller, 1, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, 10)
		self.expr_creation_tab.SetSizer(expr_creation_scroller_sizer)
		dpa_header = wx.StaticText(self.dpa_scroller, wx.ID_ANY, "Dynamic Peak Alignment")
		dpa_header.SetFont(wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
		dpa_sizer.Add(dpa_header, 0, wx.BOTTOM, 10)
		alignment_Dw_label = wx.StaticText(self.dpa_scroller, wx.ID_ANY, "RT Modulation: ")
		dpa_grid_sizer.Add(alignment_Dw_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_Dw_sizer.Add(self.alignment_Dw_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_Dw_label_2 = wx.StaticText(self.dpa_scroller, wx.ID_ANY, " s", style=wx.ALIGN_LEFT)
		alignment_Dw_sizer.Add(alignment_Dw_label_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		dpa_grid_sizer.Add(alignment_Dw_sizer, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
		alignment_Gw_label = wx.StaticText(self.dpa_scroller, wx.ID_ANY, "Gap Penalty: ")
		dpa_grid_sizer.Add(alignment_Gw_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		dpa_grid_sizer.Add(self.alignment_Gw_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_min_peaks_label = wx.StaticText(self.dpa_scroller, wx.ID_ANY, "Minimum Peaks: ")
		dpa_grid_sizer.Add(alignment_min_peaks_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		dpa_grid_sizer.Add(self.alignment_min_peaks_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		dpa_sizer.Add(dpa_grid_sizer, 1, wx.EXPAND, 0)
		self.dpa_scroller.SetSizer(dpa_sizer)
		dpa_scroller_sizer.Add(self.dpa_scroller, 1, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, 10)
		self.dpa_tab.SetSizer(dpa_scroller_sizer)
		comparison_header = wx.StaticText(self.comparison_scroller, wx.ID_ANY, "Project Comparison")
		comparison_header.SetFont(wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD, 0, ""))
		comparison_sizer.Add(comparison_header, 0, wx.BOTTOM, 10)
		comparison_alignment_Dw_label = wx.StaticText(self.comparison_scroller, wx.ID_ANY, "RT Modulation: ")
		alignment_grid_sizer_copy.Add(comparison_alignment_Dw_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		comparison_alignment_Dw_sizer.Add(self.comparison_alignment_Dw_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		comparison_alignment_Dw_label_2 = wx.StaticText(self.comparison_scroller, wx.ID_ANY, " s", style=wx.ALIGN_LEFT)
		comparison_alignment_Dw_sizer.Add(comparison_alignment_Dw_label_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_grid_sizer_copy.Add(comparison_alignment_Dw_sizer, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
		comparison_alignment_Gw_label = wx.StaticText(self.comparison_scroller, wx.ID_ANY, "Gap Penalty: ")
		alignment_grid_sizer_copy.Add(comparison_alignment_Gw_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_grid_sizer_copy.Add(self.comparison_alignment_Gw_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		comparison_alignment_min_peaks_label = wx.StaticText(self.comparison_scroller, wx.ID_ANY, "Minimum Peaks: ")
		alignment_grid_sizer_copy.Add(comparison_alignment_min_peaks_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		alignment_grid_sizer_copy.Add(self.comparison_alignment_min_peaks_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		comparison_dpa_sizer.Add(alignment_grid_sizer_copy, 1, wx.ALL | wx.EXPAND, 10)
		comparison_sizer.Add(comparison_dpa_sizer, 0, 0, 0)
		comparison_significance_sizer.Add(self.significance_level_value, 0, 0, 0)
		comparison_sizer.Add(comparison_significance_sizer, 0, wx.BOTTOM | wx.TOP, 10)
		self.comparison_scroller.SetSizer(comparison_sizer)
		comparison_scroller_sizer.Add(self.comparison_scroller, 1, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, 10)
		self.comparison_tab.SetSizer(comparison_scroller_sizer)
		self.method_notebook.AddPage(self.expr_creation_tab, "Experiment")
		self.method_notebook.AddPage(self.dpa_tab, "DPA")
		self.method_notebook.AddPage(self.comparison_tab, "Comparison")
		outer_grid_sizer.Add(self.method_notebook, 1, wx.EXPAND, 0)
		self.SetSizer(outer_grid_sizer)
		self.Layout()
		# end wxGlade
	
	def __create_toolbar(self):
		def get_icon(icon):
			return wx.ArtProvider.GetBitmap(icon, wx.ART_TOOLBAR, tb_icon_size)
		
		self.toolbar = self.CreateToolBar()  # wx.ToolBar(self, -1, wx.DefaultPosition, wx.DefaultSize, wx.TB_FLAT | wx.TB_NODIVIDER)
		self.toolbar.SetToolBitmapSize(wx.Size(*tb_icon_size))
		
		self.add_tool(
				self.toolbar,
				ToolData("New Method", get_icon(wx.ART_NEW), wx.ID_NEW, self.new_method),
				tooltip="New Method (Ctrl+N)"
				)
		
		self.add_tool(
				self.toolbar,
				ToolData("Open Method", get_icon(wx.ART_FILE_OPEN), wx.ID_OPEN, self.on_open_method),
				tooltip="Open Method (Ctrl+O)"
				)
		
		self.add_tool(
				self.toolbar,
				ToolData("Save Method", get_icon(wx.ART_FILE_SAVE), wx.ID_SAVE, self.on_save_method),
				tooltip="Save Method (Ctrl+S)"
				)
		
		self.add_tool(
				self.toolbar,
				ToolData("Save Method As", get_icon(wx.ART_FILE_SAVE_AS), wx.ID_SAVEAS, self.save_method_as)
				)
		
		self.add_tool(
				self.toolbar,
				ToolData("Help", get_icon(wx.ART_HELP), wx.ID_HELP, self.on_help),
				tooltip="Help (F1)"
				)
		
		# TODO: Recent methods
		# recent_menu = wx.Menu()
		#
		# for ID in {ID_RECENT_0, ID_RECENT_1, ID_RECENT_2, ID_RECENT_3, ID_RECENT_4, ID_RECENT_5, ID_RECENT_6,
		# 		   ID_RECENT_7, ID_RECENT_8, ID_RECENT_9}:
		# 	recent_menu.Append(ID, "item", "")
		# 	self.Bind(wx.EVT_MENU, self.on_menu_project_recent, id=ID)
		#
		# self.toolbar.SetDropdownMenu(ID_Open_Project, recent_menu)
		#
		
		self.toolbar.Realize()
		
		self.fileNotSaved = False
		self.filename = None
	
	def add_tool(self, toolbar, tool, kind=wx.ITEM_NORMAL, tooltip=None):
		added_tool = toolbar.AddTool(tool.id, tool.name, tool.icon, tooltip if tooltip else tool.name, kind)
		if tool.handler:
			self.Bind(wx.EVT_TOOL, tool.handler, added_tool, tool.id)
		return added_tool
	
	# Open
	
	def on_open_method(self, _):  # wxGlade: MethodEditor.<event_handler>
		if self.save_changes():
			filename = file_dialog(self, "method", "Open Method", "Method Files", wx.FD_DEFAULT_STYLE)
			if filename:
				self.open_method(filename)
	
	def open_method(self, filename):
		self.filename = str(filename)
		self.method = Method(self.filename)
		
		self.min_mass_spin_ctrl.SetValue(self.method.mass_range[0])
		self.max_mass_spin_ctrl.SetValue(self.method.mass_range[1])
		
		self.sav_gol_checkbox.SetValue(self.method.enable_sav_gol)
		
		self.tophat_checkbox.SetValue(self.method.enable_tophat)
		self.tophat_struct_value.SetValue(self.method.tophat)
		tophat_unit = self.method.tophat_unit
		if tophat_unit == "m":
			tophat_unit = 0
		elif tophat_unit == "s":
			tophat_unit = 1
		elif tophat_unit == "ms":
			tophat_unit = 2
		self.tophat_struct_units.SetSelection(tophat_unit)
		
		self.bb_points_value.SetValue(self.method.bb_points)
		self.bb_scans_value.SetValue(self.method.bb_scans)
		target_range = self.method.target_range
		self.target_range_min_value.SetValue(str(target_range[0]))
		self.target_range_max_value.SetValue(str(target_range[1]))
		
		self.noise_filter_checkbox.SetValue(self.method.enable_noise_filter)
		self.noise_thresh_value.SetValue(self.method.noise_thresh)
		
		self.base_peak_filter_value.SetValue(self.method.base_peak_filter_str)
		
		self.alignment_Dw_value.SetValue(str(self.method.rt_modulation))
		self.alignment_Gw_value.SetValue(str(self.method.gap_penalty))
		self.alignment_min_peaks_value.SetValue(str(self.method.min_peaks))
		
		self.significance_level_value.SetValue(self.method.comparison_a)
		self.comparison_alignment_Dw_value.SetValue(str(self.method.comparison_rt_modulation))
		self.comparison_alignment_Gw_value.SetValue(str(self.method.comparison_gap_penalty))
		self.comparison_alignment_min_peaks_value.SetValue(str(self.method.comparison_min_peaks))
		
		# self.SetTitle(f'Method Editor - {filename}')
		self.update_title()
	
	def new_method(self, event=None):  # wxGlade: MethodEditor.<event_handler>
		if self.save_changes():
			with path(GSMatch.lib, "default.method") as default_method:
				self.open_method(default_method)
			self.filename = None
			self.fileNotSaved = False
			# self.SetTitle('Method Editor - New Method')
			self.update_title()
	
	# Save
	
	def save_changes(self):
		if self.fileNotSaved:
			while True:
				with wx.MessageDialog(
						self,
						"Do you want to save the changes to the current Method?",
						"Save Changes?",
						wx.ICON_QUESTION | wx.YES_NO | wx.CANCEL
						) as dlg:
					res = dlg.ShowModal()
					
					if res == wx.ID_YES:
						if self.save_method():
							break
					elif res == wx.ID_NO:
						print("Changes discarded")
						break
					else:
						return False
		
		return True
	
	def on_save_method(self, _):  # wxGlade: MethodEditor.<event_handler>
		self.save_method()
	
	def save_method(self, filename=None):
		"""

		:param filename:
		:type filename:

		:return: Whether the operation completed
		:rtype: bool
		"""
		
		if not filename:
			if not self.filename:
				filename = self.save_method_dialog()
				if filename:
					self.filename = filename
				else:
					return False
			else:
				self.filename = self.filename
		
		print(f"Saving method as {self.filename}")
		
		self.method.mass_range = (self.min_mass_spin_ctrl.GetValue(), self.max_mass_spin_ctrl.GetValue())
		
		self.method.enable_sav_gol = self.sav_gol_checkbox.GetValue()
		
		self.method.enable_tophat = self.tophat_checkbox.GetValue()
		self.method.tophat = self.tophat_struct_value.GetValue()
		self.method.tophat_unit = ["m", "s", "ms"][self.tophat_struct_units.GetSelection()]
		
		self.method.bb_points = self.bb_points_value.GetValue()
		self.method.bb_scans = self.bb_scans_value.GetValue()
		self.method.target_range = (
				float(self.target_range_min_value.GetValue()),
				float(self.target_range_max_value.GetValue())
				)
		
		self.method.enable_noise_filter = self.noise_filter_checkbox.GetValue()
		self.method.noise_thresh = self.noise_thresh_value.GetValue()
		
		self.method.base_peak_filter = self.base_peak_filter_value.GetValue()
		
		self.method.rt_modulation = self.alignment_Dw_value.GetValue()
		self.method.gap_penalty = self.alignment_Gw_value.GetValue()
		self.method.min_peaks = self.alignment_min_peaks_value.GetValue()
		
		self.method.comparison_a = self.significance_level_value.GetValue()
		self.method.comparison_rt_modulation = self.comparison_alignment_Dw_value.GetValue()
		self.method.comparison_gap_penalty = self.comparison_alignment_Gw_value.GetValue()
		self.method.comparison_min_peaks = self.comparison_alignment_min_peaks_value.GetValue()
		
		self.method.save_method(self.filename)
		
		self.fileNotSaved = False
		
		# self.SetTitle(f'Method Editor - {filename}')
		self.update_title()
		
		return True
		
	def save_method_dialog(self):
		return file_dialog(self, "method", "Save Method As", "Method Files",
						   style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT)

	def save_method_as(self, event=None):  # wxGlade: MethodEditor.<event_handler>
		filename = self.save_method_dialog()
		if filename:
			self.save_method(filename)
	
	# Close

	def OnClose(self, event):
		if event.CanVeto():
			
			if not self.save_changes():
				event.Veto()
				return
		
		self.Destroy()
	
	def exit(self, _):  # wxGlade: MethodEditor.<event_handler>
		if self.save_changes():
			self.Destroy()
	
	# Other
	
	def on_help(self, event):  # wxGlade: MethodEditor.<event_handler>
		coming_soon()
	
	def update_title(self):
		self.SetTitle(f"Method Editor:{' *' if self.fileNotSaved else ' '} ({self.filename if self.filename else 'New Method'})")
	
	def on_change(self, _):  # wxGlade: MethodEditor.<event_handler>
		self.fileNotSaved = True
		self.update_title()
	

	
	
		

			
# end of class MethodEditor

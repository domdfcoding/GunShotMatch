#!/usr/bin/env python
#   -*- coding: utf-8 -*-

#  !/usr/bin/env python
#   -*- coding: utf-8 -*-
#
#  filename.py
#
#  This file is part of GunShotMatch
#
#  Copyright (c) 2019 Dominic Davis-Foster <dominic@davis-foster.co.uk>
#
#  GunShotMatch is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  GunShotMatch is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#

#
#  MethodPGPanel.py
#
#  This file is part of GunShotMatch
#
#
#  GunShotMatch is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  GunShotMatch is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#
# generated by wxGlade 0.9.3 on Wed Dec  4 09:52:37 2019
#


# stdlib

# 3rd party
import wx.adv
from wx.propgrid import PropertyGrid

# This project
from GuiV2.GSMatch2_Core.GUI.constants import *

_ = wx.GetTranslation

# begin wxGlade: dependencies
import wx.propgrid
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

# TODO: Make method editable for project (not experiments), and save modified method to tarfile,
#  keeping copy of method in user- and date-stamped audit trail folder with tarfile


class MassRange(wx.propgrid.PGProperty):
	def __init__(self, label, name=wx.propgrid.PG_LABEL, value=(0,0)):
		wx.propgrid.PGProperty.__init__(self, label, name)
		
		#value = self._ConvertValue(value)
		
		self.AddPrivateChild(wx.propgrid.IntProperty("Minimum Mass", value=value[0]))
		self.AddPrivateChild(wx.propgrid.IntProperty("Maximum Mass", value=value[1]))
		
		self.m_value = value
	
	def GetClassName(self):
		return self.__class__.__name__
	
	def DoGetEditorClass(self):
		return wx.propgrid.PropertyGridInterface.GetEditorByName("TextCtrl")
	
	def RefreshChildren(self):
		mass_range = self.m_value
		self.Item(0).SetValue(mass_range[0])
		self.Item(1).SetValue(mass_range[1])
	
	def ChildChanged(self, thisValue, childIndex, childValue):
		mass_range = self.m_value
		if childIndex == 0:
			mass_range[0] = childValue
		elif childIndex == 1:
			mass_range[1] = childValue
		else:
			raise AssertionError
		
		return mass_range

	
class TargetRange(wx.propgrid.PGProperty):
	def __init__(self, label, name=wx.propgrid.PG_LABEL, value=(0,0)):
		wx.propgrid.PGProperty.__init__(self, label, name)
		
		#value = self._ConvertValue(value)
		
		self.AddPrivateChild(wx.propgrid.FloatProperty("Start Time (minutes)", value=value[0]))
		self.AddPrivateChild(wx.propgrid.FloatProperty("End Time (minutes)", value=value[1]))
		
		self.m_value = value
	
	def GetClassName(self):
		return self.__class__.__name__
	
	def DoGetEditorClass(self):
		return wx.propgrid.PropertyGridInterface.GetEditorByName("TextCtrl")
	
	def RefreshChildren(self):
		target_range = self.m_value
		self.Item(0).SetValue(target_range[0])
		self.Item(1).SetValue(target_range[1])
	
	def ChildChanged(self, thisValue, childIndex, childValue):
		target_range = self.m_value
		if childIndex == 0:
			target_range[0] = childValue
		elif childIndex == 1:
			target_range[1] = childValue
		else:
			raise AssertionError
		
		return target_range
	

class MethodPGPanel(wx.Panel):
	def __init__(self, method, *args, editable=True, **kwds):
		self.method = method
		self.editable = editable
		# begin wxGlade: MethodPGPanel.__init__
		kwds["style"] = kwds.get("style", 0) | wx.TAB_TRAVERSAL
		wx.Panel.__init__(self, *args, **kwds)
		self.property_grid_1 = PropertyGrid(self, wx.ID_ANY)

		self.__set_properties()
		self.__do_layout()
		# end wxGlade
	
		self.property_grid_1.Bind(wx.propgrid.EVT_PG_CHANGED, self.on_property_changed)
		self.property_grid_1.Bind(wx.propgrid.EVT_PG_SELECTED, self.on_property_selected)
		self.property_grid_1.Bind(wx.propgrid.EVT_PG_RIGHT_CLICK, self.on_property_rightclick)
	
	def __set_properties(self):
		# begin wxGlade: MethodPGPanel.__set_properties
		pass
		# end wxGlade
		
		# Show help as tooltips
		self.property_grid_1.SetExtraStyle(wx.propgrid.PG_EX_HELP_AS_TOOLTIPS)
		
		self.__populate_properties()

	def __do_layout(self):
		# begin wxGlade: MethodPGPanel.__do_layout
		outer_sizer = wx.BoxSizer(wx.VERTICAL)
		save_warning_text = wx.StaticText(self, wx.ID_ANY, "Make sure to click out of the cell you are editing before saving changes.")
		outer_sizer.Add(save_warning_text, 0, wx.ALL, 10)
		outer_sizer.Add(self.property_grid_1, 1, wx.EXPAND, 0)
		self.SetSizer(outer_sizer)
		outer_sizer.Fit(self)
		self.Layout()
		# end wxGlade
	
		# Set Splitter position
		self.property_grid_1.CenterSplitter()
		if not self.editable:
			save_warning_text.Hide()
	
	def __populate_properties(self):
		# Experiment Creation Category
		self.property_grid_1.Append(wx.propgrid.PropertyCategory("Experiment Creation"))
		
		# Mass Range
		mass_range_property = MassRange(name="mass_range", label="Mass Range", value=self.method.mass_range)
		# mass_range_property.SetHelpString(project_name_help)
		self.property_grid_1.Append(mass_range_property)
		self.property_grid_1.SetPropertyReadOnly(mass_range_property)
		
		# Enable Savitsky Golay
		enable_sav_gol = wx.propgrid.BoolProperty(
			name="enable_sav_gol",
			label="Perform Savitzky-Golay smoothing",
			value=self.method.enable_sav_gol
		)
		self.property_grid_1.Append(enable_sav_gol)
		self.property_grid_1.SetPropertyAttribute(enable_sav_gol, "UseCheckbox", True)  # The attribute name and value
		self.property_grid_1.SetPropertyReadOnly(enable_sav_gol)

		# Enable TopHat
		enable_tophat = wx.propgrid.BoolProperty(
			name="enable_tophat",
			label="Enable TopHat baseline correction",
			value=self.method.enable_tophat
		)
		self.property_grid_1.Append(enable_tophat)
		self.property_grid_1.SetPropertyAttribute(enable_tophat, "UseCheckbox", True)  # The attribute name and value
		self.property_grid_1.SetPropertyReadOnly(enable_tophat)
		
		# TopHat Structural Element
		tophat_struct_property = wx.propgrid.StringProperty(name="tophat_struct", label="TopHat Structural Element", value=self.method.tophat_struct)
		# tophat_struct_property.SetHelpString(project_name_help)
		self.property_grid_1.Append(tophat_struct_property)
		self.property_grid_1.SetPropertyReadOnly(tophat_struct_property)
		self.property_grid_1.SetPropertyReadOnly(tophat_struct_property)
		
		# Biller Biemann
		# Number of Points
		bb_points_property = wx.propgrid.IntProperty(name="bb_points", label="Biller-Biemann: Number of Scans", value=self.method.bb_points)
		# bb_points_property.SetHelpString(project_name_help)
		self.property_grid_1.Append(bb_points_property)
		self.property_grid_1.SetPropertyReadOnly(bb_points_property)
		# Number of Scans
		bb_scans_property = wx.propgrid.IntProperty(name="bb_scans", label="Biller-Biemann: Number of Points", value=self.method.bb_scans)
		# bb_scans_property.SetHelpString(project_name_help)
		self.property_grid_1.Append(bb_scans_property)
		self.property_grid_1.SetPropertyReadOnly(bb_scans_property)
		
		# Target Range
		target_range_property = TargetRange(name="target_range", label="Search for peaks between these times:", value=self.method.target_range)
		# target_range_property.SetHelpString(project_name_help)
		self.property_grid_1.Append(target_range_property)
		self.property_grid_1.SetPropertyReadOnly(target_range_property)
		
		# Enable Noise Filtering
		enable_noise_filter = wx.propgrid.BoolProperty(
			name="enable_noise_filter",
			label="Enable Noise Filtering",
			value=self.method.enable_noise_filter
		)
		self.property_grid_1.Append(enable_noise_filter)
		self.property_grid_1.SetPropertyAttribute(enable_noise_filter, "UseCheckbox", True)  # The attribute name and value
		self.property_grid_1.SetPropertyReadOnly(enable_noise_filter)
		
		# Noise Filtering Threshold
		noise_thresh_property = wx.propgrid.IntProperty(name="noise_thresh", label="Noise filtering threshold (ions)", value=self.method.noise_thresh)
		# noise_thresh_property.SetHelpString(project_name_help)
		self.property_grid_1.Append(noise_thresh_property)
		self.property_grid_1.SetPropertyReadOnly(noise_thresh_property)
		
		# Base Peak Filter
		base_peak_filter_property = wx.propgrid.ArrayStringProperty(
			name="base_peak_filter",
			label="Exclude peaks with the following base ion(s)",
			value=[str(x) for x in self.method.base_peak_filter]
		)
		# base_peak_filter_property.SetHelpString(project_name_help)
		self.property_grid_1.Append(base_peak_filter_property)
		self.property_grid_1.SetPropertyReadOnly(base_peak_filter_property)
		
		# DPA Category
		self.property_grid_1.Append(wx.propgrid.PropertyCategory("Dynamic Peak Alignment"))
		
		# RT Modulation
		rt_modulation_property = wx.propgrid.FloatProperty(
			name="rt_modulation",
			label="RT Modulation (seconds)",
			value=self.method.rt_modulation
		)
		# rt_modulation_property.SetHelpString(project_name_help)
		self.property_grid_1.Append(rt_modulation_property)
		self.property_grid_1.SetPropertyReadOnly(rt_modulation_property)
		
		# Gap Penalty
		gap_penalty_property = wx.propgrid.FloatProperty(
			name="gap_penalty",
			label="Gap Penalty",
			value=self.method.gap_penalty
		)
		# gap_penalty_property.SetHelpString(project_name_help)
		self.property_grid_1.Append(gap_penalty_property)
		self.property_grid_1.SetPropertyReadOnly(gap_penalty_property)
	
		# Minimum Peaks
		min_peaks_property = wx.propgrid.IntProperty(
			name="min_peaks",
			label="Minimum Peaks",
			value=self.method.min_peaks
		)
		# min_peaks_property.SetHelpString(project_name_help)
		self.property_grid_1.Append(min_peaks_property)
		self.property_grid_1.SetPropertyReadOnly(min_peaks_property)
		
		# Comparison Category
		self.property_grid_1.Append(wx.propgrid.PropertyCategory("Project Comparison"))
		
		# RT Modulation
		comparison_rt_modulation_property = wx.propgrid.FloatProperty(
			name="comparison_rt_modulation",
			label="RT Modulation (seconds)",
			value=self.method.comparison_rt_modulation
		)
		# rt_modulation_property.SetHelpString(project_name_help)
		self.property_grid_1.Append(comparison_rt_modulation_property)
		self.property_grid_1.SetPropertyReadOnly(comparison_rt_modulation_property)
		
		# Gap Penalty
		comparison_gap_penalty_property = wx.propgrid.FloatProperty(
			name="comparison_gap_penalty",
			label="Gap Penalty",
			value=self.method.comparison_gap_penalty
		)
		# gap_penalty_property.SetHelpString(project_name_help)
		self.property_grid_1.Append(comparison_gap_penalty_property)
		self.property_grid_1.SetPropertyReadOnly(comparison_gap_penalty_property)
	
		# Minimum Peaks
		comparison_min_peaks_property = wx.propgrid.IntProperty(
			name="comparison_min_peaks",
			label="Minimum Peaks",
			value=self.method.comparison_min_peaks
		)
		# min_peaks_property.SetHelpString(project_name_help)
		self.property_grid_1.Append(comparison_min_peaks_property)
		self.property_grid_1.SetPropertyReadOnly(comparison_min_peaks_property)
		
		# Significance Level
		comparison_a_property = wx.propgrid.FloatProperty(
			name="comparison_a",
			label="Significance Level",
			value=self.method.comparison_a
		)
		# comparison_a_property.SetHelpString(project_name_help)
		self.property_grid_1.Append(comparison_a_property)
		self.property_grid_1.SetPropertyReadOnly(comparison_a_property)
	
	def on_property_changed(self, event):
		"""
		Handler for events fired when property changed

		:param event:
		:type event:

		:return:
		:rtype:
		"""
		
		p = event.GetProperty()
		if p:
			print(f'{p.GetName()} changed to "{p.GetValueAsString()}"')
	
	def on_property_selected(self, event):
		"""
		Handler for events fired when property selected

		:param event:
		:type event:

		:return:
		:rtype:
		"""
		
		p = event.GetProperty()
		if p:
			print(f'{event.GetProperty().GetName()} selected')
		else:
			print('Nothing selected')
	
	def on_property_rightclick(self, event):
		"""
		Handler for event fired when a property is right clicked

		:param event:
		:type event:

		:return:
		:rtype:
		"""
		
		p = event.GetProperty()
		if p:
			print(f'{event.GetProperty().GetName()} right clicked')
		else:
			print("Nothing right clicked")

# end of class MethodPGPanel

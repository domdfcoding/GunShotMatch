# -*- coding: UTF-8 -*-

#  !/usr/bin/env python
#   -*- coding: utf-8 -*-
#
#  filename.py
#
#  This file is part of GunShotMatch
#
#  Copyright (c) 2020  Dominic Davis-Foster <dominic@davis-foster.co.uk>
#
#  GunShotMatch is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  GunShotMatch is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#

#
# generated by wxGlade 0.9.2 on Thu Jan 16 16:45:48 2020
#

import wx
import sys
import pathlib
import os
import subprocess
import webbrowser

from GuiV2.GSMatch2_Core.Config import internal_config
from domdf_wxpython_tools.panel_listctrl import PanelListCtrl, PanelListItem


# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class RecentTest(wx.Dialog):
	def __init__(self, *args, **kwds):
		kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER
		wx.Dialog.__init__(self, *args, **kwds)
		self.SetSize((400, 300))
		self.recent_project_ctrl = PanelListCtrl(self, wx.ID_ANY)
		
		self.add_recent_projects()
		
		sizer_4 = wx.GridSizer(1, 1, 0, 0)
		sizer_4.Add(self.recent_project_ctrl, 1, wx.EXPAND, 0)
		self.SetSizer(sizer_4)
		self.Layout()
		
		self.recent_project_ctrl.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnOpenRecent)
		self.recent_project_ctrl.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightDown)
		self.recent_project_ctrl.Bind(wx.EVT_LIST_KEY_DOWN, self.OnKeyDown)
		self.recent_project_ctrl.Bind(wx.EVT_LIST_DELETE_ITEM, self.OnItemRemoved)
	
		self._setup_context_menu()
	
	def _setup_context_menu(self):
		# Setup Context menu
		self.ID_MENU_OPEN = wx.NewIdRef()
		self.ID_MENU_FILES = wx.NewIdRef()
		self.ID_MENU_TERMINAL = wx.NewIdRef()
		self.ID_MENU_REMOVE = wx.NewIdRef()
		
		self.Bind(wx.EVT_MENU, self.OnOpenRecent, id=self.ID_MENU_OPEN)
		self.Bind(wx.EVT_MENU, self.OnOpenInFiles, id=self.ID_MENU_FILES)
		self.Bind(wx.EVT_MENU, self.OnOpenInTerminal, id=self.ID_MENU_TERMINAL)
		self.Bind(wx.EVT_MENU, self.OnRemoveRecent, id=self.ID_MENU_REMOVE)
	
	def add_recent_projects(self):
		for item in internal_config.recent_projects:
			print(item)
			
			project_name = item[0]
			project_path = str(pathlib.Path(item[1]).parent).rstrip("/")
			
			if project_name != '' and project_path != ".":
				item = RecentProjectItem(self.recent_project_ctrl, project_name, project_path, max_path_length=31)
				self.recent_project_ctrl.Append(item)

	def OnOpenRecent(self, _):  # wxGlade: _WelcomeDialog.<event_handler>
		self.OpenProject(self.recent_project_ctrl.GetFirstSelected().filename)
	
	def OnRightDown(self, event):
		self.recent_project_ctrl.SetSelection(self.recent_project_ctrl.GetItemPosition(event.GetEventObject()))
		
		event.Skip()
		
		selected_project = self.recent_project_ctrl.GetFirstSelected()
		if selected_project == -1:
			return
		
		print(f"OnRightDown {selected_project.filename}\n")
		
		print(selected_project.filename)
		
		# make a menu
		menu = wx.Menu()
		menu.Append(self.ID_MENU_OPEN, "Open Project")
		menu.AppendSeparator()
		menu.Append(self.ID_MENU_FILES, "Open in Files")
		menu.Append(self.ID_MENU_TERMINAL, "Open in Terminal")
		menu.AppendSeparator()
		menu.Append(self.ID_MENU_REMOVE, "Remove from list")
		
		# Popup the menu.  If an item is selected then its handler
		# will be called before PopupMenu returns.
		self.recent_project_ctrl.PopupMenu(menu)
		
		menu.Destroy()
		
	def OnKeyDown(self, event):
		if event.GetKeyCode() == wx.WXK_DELETE:
			self.recent_project_ctrl.DeleteItem(self.recent_project_ctrl.GetFirstSelected())
		
		event.Skip()
	
	def OnItemRemoved(self, event):
		print("Item Removed!")
		event.Skip()
	
	def OnOpenInTerminal(self, event):
		print("Open in Terminal")
		directory = str(self.recent_project_ctrl.GetFirstSelected().filename).rstrip("/")
		
		if "linux" in sys.platform:
			subprocess.Popen(f'x-terminal-emulator -e "cd {directory}; exec bash"', shell=True)
		elif "win32" in sys.platform:
			subprocess.Popen(f'start cmd /k cd {directory}', shell=True)
		else:
			wx.MessageBox(
					f"'Open in Terminal' is not yet supported on your platform: '{sys.platform}'",
					"Unsupported Platform"
					)
	
	def OnOpenInFiles(self, event):
		print("Open in Files")
		directory = str(self.recent_project_ctrl.GetFirstSelected().filename).rstrip("/")
		webbrowser.open_new(directory)
	
	def OnRemoveRecent(self, event):
		print("RemoveRecent")
		index = self.recent_project_ctrl.GetItemPosition(self.recent_project_ctrl.GetFirstSelected())
		internal_config.remove_recent_project(index)
		self.recent_project_ctrl.DeleteItem(self.recent_project_ctrl.GetFirstSelected())

	def OpenProject(self, project_path):
		self.selected_project = project_path
		self.EndModal(wx.ID_OK)
	
# end of class RecentTest


class RecentProjectItem(PanelListItem):
	def __init__(
			self, parent, project_name, filename, id=wx.ID_ANY,
			style=wx.TAB_TRAVERSAL, name=wx.PanelNameStr,
			left_padding=32, max_path_length=31
			):
		
		self.project_name = project_name
		self.filename = pathlib.Path(filename)
		
		if sys.platform in {"linux", "darwin"}:
			home_dir = str(pathlib.Path.home())
			print(home_dir)
			if filename.startswith(home_dir):
				filename = filename.replace(home_dir, "~")
		
		print(filename)
			
		if len(filename) > max_path_length:
			
			path_elements = []
			while True:
				print(path_elements)
				filename, folder = os.path.split(filename)
				print(filename, folder)
				if folder != "":
					path_elements.append(folder)
				else:
					if filename != "":
						path_elements.append(filename)
					
					break
			
			path_elements.reverse()
			filename = os.path.join(path_elements[0], path_elements[1], "...", path_elements[-1])
		
		
		text_dict = {
				"name": project_name,
				"filename": filename,
				}
		
		if wx.Platform == "__WXMSW__":
			css_file = "/GuiV2/GSMatch2_Core/RecentProjects.css"
		else:
			css_file = "/home/domdf/GunShotMatch/GunShotMatch/GuiV2/GSMatch2_Core/RecentProjects.css"
		
		PanelListItem.__init__(
				self, parent, text_dict, css_file, id=id, style=style,
				name=name, left_padding=left_padding
				)
		
		self.outer_sizer.AddStretchSpacer(4)
		
		if wx.Platform == "__WXMSW__":
			remove_btn_size = (-1, -1)
		else:
			remove_btn_size = (27, 27)
			
		self.remove_button = wx.StaticText(self, label="Ã—", style=wx.TEXT_ALIGNMENT_CENTER, size=remove_btn_size)

		font = self.remove_button.GetFont()
		font.SetPointSize(18)
		self.remove_button.SetFont(font)

		self.remove_button.SetForegroundColour(self._default_background)
		self.remove_button.SetBackgroundColour(self._selected_background)
		
		self.outer_sizer.Add(self.remove_button, 1, wx.RIGHT| wx.BOTTOM | wx.ALIGN_CENTER_VERTICAL, 5)
		self.remove_button.Hide()
		
		self.SetSizer(self.outer_sizer)
		self.outer_sizer.Fit(self)
		self.Layout()
		
		self.Refresh()
		
		# Mouse over events for showing/hiding delete button
		self.mouse_over_panel = False
		self.mouse_over_text = False
		self.mouse_over_btn = False
		
		self.Bind(wx.EVT_ENTER_WINDOW, self.OnHover)
		self.Bind(wx.EVT_LEAVE_WINDOW, self.OnHoverEnd)
		
		for classname, widget in self._items.items():
			widget.Bind(wx.EVT_ENTER_WINDOW, self.OnTextHover)
			widget.Bind(wx.EVT_LEAVE_WINDOW, self.OnTextHoverEnd)
		#
		# # Mouse over events for changing colour of delete button
		self.remove_button.Bind(wx.EVT_ENTER_WINDOW, self.OnBtnHover)
		self.remove_button.Bind(wx.EVT_LEAVE_WINDOW, self.OnBtnHoverEnd)
		
		# Delete button click
		self.remove_button.Bind(wx.EVT_LEFT_DOWN, self.OnRemoveClicked)
	
	def OnRemoveClicked(self, event):
		self.parent.DeleteItem(self)
	
	def OnBtnHover(self, event):
		self.mouse_over_btn = True
		self.remove_button.SetForegroundColour("#d3d3d3")

	def OnBtnHoverEnd(self, event):
		self.mouse_over_btn = False
		self.remove_button.SetForegroundColour(self._default_background)

	def OnHover(self, event):
		self.mouse_over_panel = True
		if self.selected:
			self.remove_button.Show()
		self.Layout()
		event.Skip()
		
	def OnTextHover(self, event):
		self.mouse_over_text = True
		if self.selected:
			self.remove_button.Show()
		self.Layout()
		event.Skip()
	
	def OnHoverEnd(self, event):
		if (self.mouse_over_text or self.mouse_over_btn) and self.selected:
			self.mouse_over_panel = True
			self.remove_button.Show()
		else:
			self.mouse_over_panel = False
			self.remove_button.Hide()
		self.Layout()
		
	def OnTextHoverEnd(self, event):
		self.mouse_over_text = False

	def Refresh(self, **kwargs):
		self._refresh_background_colour()
		self._refresh_text()
		wx.Panel.Refresh(self)
	
	def OnClick(self, event):
		PanelListItem.OnClick(self, event)
		wx.CallAfter(self.remove_button.Show)
		wx.CallAfter(self.Layout)
	
	def DeselectItem(self):
		self.remove_button.Hide()
		self.Layout()
		PanelListItem.DeselectItem(self)
	
	def SelectItem(self, select=True):
		PanelListItem.SelectItem(self, select)
		if not select:
			self.remove_button.Hide()
		self.Layout()
	
	
if __name__ == "__main__":
	class TestApp(wx.App):
		def OnInit(self):
			RecentTest(None).ShowModal()
			return True
	
	TestApp()



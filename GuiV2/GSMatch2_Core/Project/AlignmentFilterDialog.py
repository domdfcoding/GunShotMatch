#  !/usr/bin/env python
#   -*- coding: utf-8 -*-
#
#  AlignmentFilterDialog.py
#
"""
Dialog for configuring filter for AlignmentDataPanel
"""
#
#  This file is part of GunShotMatch
#
#  Copyright Â© 2020 Dominic Davis-Foster <dominic@davis-foster.co.uk>
#
#  GunShotMatch is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  GunShotMatch is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
# generated by wxGlade 0.9.3 on Fri Jan 10 10:49:22 2020
#

# 3rd party
import wx
# from domdf_wxpython_tools.picker import dir_picker


# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class AlignmentFilterDialog(wx.Dialog):
	def __init__(self, parent, *args, **kwds):
		"""
		:param parent: Can be None, a frame or another dialog box.
		:type parent: wx.Window
		:param id: An identifier for the dialog. A value of -1 is taken to mean a default.
		:type id: wx.WindowID
		:param title: The title of the dialog.
		:type title: str
		:param pos: The dialog position. The value DefaultPosition indicates a
		default position, chosen by either the windowing system or wxWidgets,
		depending on platform.
		:type pos: wx.Point
		:param size: The dialog size. The value DefaultSize indicates a default
		size, chosen by either the windowing system or wxWidgets, depending on
		platform.
		:type size: wx.Size
		:param style: The window style.
		:type style: int
		:param name: Used to associate a name with the window, allowing the
		application user to set Motif resource values for individual dialog boxes.
		:type name: str
		"""
		
		args = (parent, *args)
		self.parent = parent
		# begin wxGlade: AlignmentFilterDialog.__init__
		kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
		wx.Dialog.__init__(self, *args, **kwds)
		self.SetSize((450, 200))
		self.main_panel = wx.Panel(self, wx.ID_ANY)
		self.min_experiments_value = wx.SpinCtrl(self.main_panel, wx.ID_ANY, "0", min=0, max=100)
		self.min_rt_value = wx.SpinCtrlDouble(self.main_panel, wx.ID_ANY, "0.0", min=0.0, max=100.0)
		self.max_rt_value = wx.SpinCtrlDouble(self.main_panel, wx.ID_ANY, "0.0", min=0.0, max=100.0)

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.on_rt_change, self.min_rt_value)
		self.Bind(wx.EVT_TEXT, self.on_rt_change, self.min_rt_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_rt_change, self.min_rt_value)
		self.Bind(wx.EVT_SPINCTRLDOUBLE, self.on_rt_change, self.max_rt_value)
		self.Bind(wx.EVT_TEXT, self.on_rt_change, self.max_rt_value)
		self.Bind(wx.EVT_TEXT_ENTER, self.on_rt_change, self.max_rt_value)
		# end wxGlade
		
		# Populate the settings
		self.load_settings()
		self.Bind(wx.EVT_BUTTON, self.on_ok, id=wx.ID_OK)
		self.Bind(wx.EVT_BUTTON, self.on_apply, id=wx.ID_APPLY)
	
	def __set_properties(self):
		# begin wxGlade: AlignmentFilterDialog.__set_properties
		self.SetTitle("Filter Aligned Peaks")
		self.SetSize((450, 200))
		self.min_experiments_value.SetToolTip("The minimum number of Experiments the peak must be present in")
		self.min_rt_value.SetMinSize((-1, 29))
		self.min_rt_value.SetToolTip("Show only peaks after this time")
		self.min_rt_value.SetDigits(2)
		self.max_rt_value.SetMinSize((-1, 29))
		self.max_rt_value.SetToolTip("Show only peaks before this time")
		self.max_rt_value.SetDigits(2)
		# end wxGlade
	
	def __do_layout(self):
		# begin wxGlade: AlignmentFilterDialog.__do_layout
		outer_sizer = wx.BoxSizer(wx.VERTICAL)
		main_sizer = wx.FlexGridSizer(4, 2, 5, 2)
		main_sizer.Add((20, 5), 0, 0, 0)
		main_sizer.Add((0, 0), 0, 0, 0)
		min_experiments_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Minimum Experiments: ")
		min_experiments_label.SetToolTip("The minimum number of Experiments the peak must be present in")
		main_sizer.Add(min_experiments_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		main_sizer.Add(self.min_experiments_value, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		min_rt_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Minimum Retention Time: ")
		min_rt_label.SetToolTip("Show only peaks after this time")
		main_sizer.Add(min_rt_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		main_sizer.Add(self.min_rt_value, 0, 0, 0)
		max_rt_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Maximum Retention Time: ")
		max_rt_label.SetToolTip("Show only peaks before this time")
		main_sizer.Add(max_rt_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		main_sizer.Add(self.max_rt_value, 0, 0, 0)
		self.main_panel.SetSizer(main_sizer)
		outer_sizer.Add(self.main_panel, 1, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 10)
		self.SetSizer(outer_sizer)
		self.Layout()
		# end wxGlade
		
		self.btns = self.CreateStdDialogButtonSizer(wx.OK | wx.APPLY | wx.CANCEL)
		outer_sizer.Add(self.btns, 0, wx.ALL | wx.EXPAND, 5)
	
	def load_settings(self):
		self.min_rt_value.SetMin(self.parent.min_rt)
		self.max_rt_value.SetMin(self.parent.min_rt)
		self.min_rt_value.SetMax(self.parent.max_rt)
		self.max_rt_value.SetMax(self.parent.max_rt)
		self.min_rt_value.SetValue(self.parent.filter_min_rt)
		self.max_rt_value.SetValue(self.parent.filter_max_rt)
		
		self.min_experiments_value.SetValue(self.parent.filter_min_experiments)
		
		self.min_experiments_value.SetMax(self.parent.n_experiments)
	
	def on_apply(self, event):
		"""
		Handler for user pressing Apply button

		:param event:
		:type event:
		"""
		
		self.apply_settings()
	
	def apply_settings(self):
		self.parent.filter_min_rt = self.min_rt_value.GetValue()
		self.parent.filter_max_rt = self.max_rt_value.GetValue()
		self.parent.filter_min_experiments = self.min_experiments_value.GetValue()
		self.parent.apply_filter()
	
	def on_ok(self, event):
		"""
		Handler for user pressing OK button

		:param event:
		:type event:
		"""
		
		self.apply_settings()
		self.Show(False)
	
	def on_rt_change(self, event):  # wxGlade: AlignmentFilterDialog.<event_handler>
		"""
		Event handler for RT range values being changed, to check that the maximum range is
		greater than the minimum range and vice versa, and adjust as necessary

		:param event:
		:type event:
		"""
		
		min_rt_changed = event.GetEventObject() == self.min_rt_value
		max_rt_changed = event.GetEventObject() == self.max_rt_value
		
		min_rt_value = self.min_rt_value.GetValue()
		max_rt_value = self.max_rt_value.GetValue()
		
		if min_rt_changed and min_rt_value > max_rt_value:
			self.max_rt_value.SetValue(max_rt_value + 1)
		
		elif max_rt_changed and min_rt_value > max_rt_value:
			self.min_rt_value.SetValue(min_rt_value - 1)

# end of class AlignmentFilterDialog


#  !/usr/bin/env python
#   -*- coding: utf-8 -*-
#
#  DataViewer.py
#
#  This file is part of GunShotMatch
#
#  Copyright © 2017-2020 Dominic Davis-Foster <dominic@davis-foster.co.uk>
#
#  GunShotMatch is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  GunShotMatch is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
# generated by wxGlade 0.9.3 on Mon Feb 24 13:46:38 2020
#


# stdlib
import datetime
import pathlib
import threading
import warnings
import webbrowser

# 3rd party
import appdirs
import requests
import wx
import wx.grid
import wx.html2
import wx.propgrid
from domdf_wxpython_tools import CharValidator
from importlib_resources import path
from mathematical.utils import rounders
from pubsub import pub
from wx.lib import buttons

# this package
import GSMatch.lib
from GuiV2.GSMatch2_Core import Base, SorterPanels
from GuiV2.GSMatch2_Core.Experiment.spectrum_panel import Head2TailSpectrumPanel, SpectrumPanel
from GuiV2.GSMatch2_Core.GUI.events import EVT_PROJECT_CHANGE
from GuiV2.GSMatch2_Core.Project.consolidate import (
	ConsolidatedSortFilterDialog
	)
from GuiV2.GSMatch2_Core.utils import create_button
# from GSMatch.GSMatch_Core.ChromatogramDisplay import Display
from GuiV2.icons import get_icon

"""
# begin wxGlade: dependencies
import wx.propgrid
# end wxGlade
"""

# begin wxGlade: extracode
# end wxGlade

# TODO: Import this from a common location here and in data_viewer_server
# Determine cache directory for data_viewer_server
cache_dir = pathlib.Path(appdirs.user_cache_dir("GunShotMatch"))
if not cache_dir.exists():
	cache_dir.mkdir()
cache_dir = cache_dir / "data_viewer_cache"
if not cache_dir.exists():
	cache_dir.mkdir()
	

class DataViewer(wx.Panel, Base.NotebookToolsMixin):
	def __init__(
			self, parent, id=wx.ID_ANY, pos=wx.DefaultPosition,
			size=wx.DefaultSize, style=0, name="DataViewer"):
		"""
		:param parent: The parent window.
		:type parent: :class:`GuiV2.GSMatch2_Core.Project.compounds_data_panel.CompoundsDataPanel`
		:param id: An identifier for the panel. wx.ID_ANY is taken to mean a default.
		:type id: wx.WindowID, optional
		:param pos: The panel position. The value wx.DefaultPosition indicates a default position,
		chosen by either the windowing system or wxWidgets, depending on platform.
		:type pos: wx.Point, optional
		:param size: The panel size. The value wx.DefaultSize indicates a default size, chosen by
		either the windowing system or wxWidgets, depending on platform.
		:type size: wx.Size, optional
		:param style: The window style. See wx.Panel.
		:type style: int, optional
		:param name: Window name.
		:type name: str, optional
		"""
		
		self.dv_url = ''
		self.dv_html_home = "http://localhost:5000/no-hit"
		
		create_btn_sizer = self._create_btn_sizer
		create_btn_sizer_no2 = self._create_btn_sizer_no2
		create_hits_btn_sizer = self._create_hits_btn_sizer
		
		args = (parent, id)
		kwds = dict(pos=pos, size=size, style=style, name=name)
		
		self.selected_peak = None
		self.selected_hit = None
		self.current_expr = 0
		self.show_hidden_peaks = False
		
		# begin wxGlade: DataViewer.__init__
		kwds["style"] = kwds.get("style", 0) | wx.TAB_TRAVERSAL
		wx.Panel.__init__(self, *args, **kwds)
		self.data_viewer_v_splitter = wx.SplitterWindow(self, wx.ID_ANY, style=wx.SP_3D | wx.SP_BORDER | wx.SP_LIVE_UPDATE)
		self.dv_selection_panel = wx.Panel(self.data_viewer_v_splitter, wx.ID_ANY)
		self.btn_sizer = create_btn_sizer(self.dv_selection_panel)
		self.btn_sizer_no2 = create_btn_sizer_no2(self.dv_selection_panel)
		self.peak_propgrid = wx.propgrid.PropertyGrid(self.dv_selection_panel, wx.ID_ANY)
		self.raw_data_grid = wx.grid.Grid(self.dv_selection_panel, wx.ID_ANY, size=(1, 1))
		self.ms_similarity_grid = wx.grid.Grid(self.dv_selection_panel, wx.ID_ANY, size=(1, 1))
		self.hits_btn_sizer = create_hits_btn_sizer(self.dv_selection_panel)
		self.sorter_panel = SorterPanels.SorterPanel(self.dv_selection_panel, wx.ID_ANY)
		self.dv_data_panel = wx.Panel(self.data_viewer_v_splitter, wx.ID_ANY)
		self.data_viewer_h_splitter = wx.SplitterWindow(self.dv_data_panel, wx.ID_ANY, style=wx.SP_3D | wx.SP_BORDER | wx.SP_LIVE_UPDATE)
		self.dv_spec_panel = wx.Panel(self.data_viewer_h_splitter, wx.ID_ANY)
		self.notebook = wx.Notebook(self.dv_spec_panel, wx.ID_ANY, style=wx.NB_BOTTOM)
		self.data_viewer_reference = wx.Panel(self.notebook, wx.ID_ANY)
		self.dv_reference_spec_canvas = SpectrumPanel(self.data_viewer_reference, name="Reference Mass Spectrum")
		self.data_viewer_samples = wx.Panel(self.notebook, wx.ID_ANY)
		self.dv_samples_spec_canvas = SpectrumPanel(self.data_viewer_samples, name="Experiments Mass Spectrum")
		self.data_viewer_combined = wx.Panel(self.notebook, wx.ID_ANY)
		self.dv_combined_spec = SpectrumPanel(self.data_viewer_combined, name="Combined Mass Spectrum")
		self.data_viewer_averaged = wx.Panel(self.notebook, wx.ID_ANY)
		self.dv_averaged_spec = SpectrumPanel(self.data_viewer_averaged, name="Combined Mass Spectrum")
		self.data_viewer_head2tail = wx.Panel(self.notebook, wx.ID_ANY)
		self.dv_head2tail_spec_canvas = Head2TailSpectrumPanel(self.data_viewer_head2tail, name="Head to Tail Mass Spectrum")
		self.dv_html_panel = wx.Panel(self.data_viewer_h_splitter, wx.ID_ANY)
		self.dv_html = wx.html2.WebView.New(self.dv_html_panel, wx.ID_ANY)

		self.__set_properties()
		self.__do_layout()
		# end wxGlade
		
		self._load_html_home()
		
		# Filename of loading animation
		with path(GSMatch.lib, "loading.html") as loading_html:
			self.dv_loading_url = f"file://{loading_html}"
		
		self._setup_filter_hits_dialog()
		
		self._refresh_peak_numbers()
		
		self._bind_events()
		
		self._load_html_home()
		self._create_propgrid()
		self._create_raw_data_grid()
		self._create_ms_sim_grid()

		self._show_spectra_holding_msg()
	
	def __set_properties(self):
		# begin wxGlade: DataViewer.__set_properties
		self.peak_propgrid.SetMinSize((200, 90))
		self.data_viewer_h_splitter.SetMinimumPaneSize(40)
		self.data_viewer_v_splitter.SetMinimumPaneSize(20)
		# end wxGlade
		
		self._create_columns()
		
		wx.CallAfter(self.peak_propgrid.SetSplitterLeft)
		wx.CallAfter(self.Refresh)
	
	def _create_columns(self):
		# self.sorter_panel.AppendColumn("Peak No.", format=wx.LIST_FORMAT_LEFT, width=80)
		# self.sorter_panel.AppendColumn("RT", format=wx.LIST_FORMAT_RIGHT, width=80)
		# self.sorter_panel.AppendColumn("Area", format=wx.LIST_FORMAT_RIGHT, width=130)
		# self.sorter_panel.AppendColumn("No. Experiments", format=wx.LIST_FORMAT_RIGHT, width=140)
		
		self.sorter_panel.AppendColumn("Hit", format=wx.LIST_FORMAT_CENTER, width=40)
		self.sorter_panel.AppendColumn("Name", format=wx.LIST_FORMAT_LEFT, width=400)
		self.sorter_panel.AppendColumn("Match x̄", format=wx.LIST_FORMAT_RIGHT, width=80)
		self.sorter_panel.AppendColumn("Freq.", format=wx.LIST_FORMAT_RIGHT, width=60)

	def __do_layout(self):
		# begin wxGlade: DataViewer.__do_layout
		dv_main_sizer = wx.BoxSizer(wx.HORIZONTAL)
		dv_data_sizer = wx.BoxSizer(wx.HORIZONTAL)
		dv_html_sizer = wx.BoxSizer(wx.HORIZONTAL)
		dv_spec_sizer = wx.BoxSizer(wx.VERTICAL)
		head2tail_spec_sizer = wx.BoxSizer(wx.VERTICAL)
		averaged_spec_sizer = wx.BoxSizer(wx.VERTICAL)
		combined_spec_sizer = wx.BoxSizer(wx.VERTICAL)
		experiments_spec_sizer = wx.BoxSizer(wx.VERTICAL)
		reference_spec_sizer = wx.BoxSizer(wx.VERTICAL)
		dv_selection_sizer = wx.BoxSizer(wx.HORIZONTAL)
		top_left_sizer = wx.BoxSizer(wx.VERTICAL)
		top_left_sizer.Add(self.btn_sizer, 0, 0, 2)
		top_left_sizer.Add(self.btn_sizer_no2, 0, wx.BOTTOM, 2)
		top_left_sizer.Add(self.peak_propgrid, 1, wx.EXPAND, 0)
		propgrid_raw_data_divider = wx.StaticLine(self.dv_selection_panel, wx.ID_ANY)
		top_left_sizer.Add(propgrid_raw_data_divider, 0, wx.BOTTOM | wx.EXPAND, 10)
		raw_data_label = wx.StaticText(self.dv_selection_panel, wx.ID_ANY, "Raw Data")
		top_left_sizer.Add(raw_data_label, 0, wx.LEFT, 8)
		top_left_sizer.Add((20, 3), 0, 0, 0)
		top_left_sizer.Add(self.raw_data_grid, 1, wx.EXPAND | wx.LEFT, 10)
		raw_data_ms_sim_divider = wx.StaticLine(self.dv_selection_panel, wx.ID_ANY)
		top_left_sizer.Add(raw_data_ms_sim_divider, 0, wx.BOTTOM | wx.EXPAND, 10)
		ms_similarity_label = wx.StaticText(self.dv_selection_panel, wx.ID_ANY, "MS Similarity")
		top_left_sizer.Add(ms_similarity_label, 0, wx.LEFT, 8)
		top_left_sizer.Add((20, 3), 0, 0, 0)
		top_left_sizer.Add(self.ms_similarity_grid, 1, wx.EXPAND | wx.LEFT, 10)
		ms_sim_hits_divider = wx.StaticLine(self.dv_selection_panel, wx.ID_ANY)
		top_left_sizer.Add(ms_sim_hits_divider, 0, wx.BOTTOM | wx.EXPAND, 10)
		top_left_sizer.Add(self.hits_btn_sizer, 0, wx.BOTTOM | wx.EXPAND, 2)
		top_left_sizer.Add(self.sorter_panel, 2, wx.EXPAND | wx.LEFT, 2)
		dv_selection_sizer.Add(top_left_sizer, 0, wx.EXPAND, 0)
		self.dv_selection_panel.SetSizer(dv_selection_sizer)
		reference_spec_sizer.Add(self.dv_reference_spec_canvas, 1, wx.EXPAND, 0)
		self.data_viewer_reference.SetSizer(reference_spec_sizer)
		experiments_spec_sizer.Add(self.dv_samples_spec_canvas, 1, wx.EXPAND, 0)
		self.data_viewer_samples.SetSizer(experiments_spec_sizer)
		combined_spec_sizer.Add(self.dv_combined_spec, 1, wx.EXPAND, 0)
		self.data_viewer_combined.SetSizer(combined_spec_sizer)
		averaged_spec_sizer.Add(self.dv_averaged_spec, 1, wx.EXPAND, 0)
		self.data_viewer_averaged.SetSizer(averaged_spec_sizer)
		head2tail_spec_sizer.Add(self.dv_head2tail_spec_canvas, 1, wx.EXPAND, 0)
		self.data_viewer_head2tail.SetSizer(head2tail_spec_sizer)
		self.notebook.AddPage(self.data_viewer_reference, "Reference")
		self.notebook.AddPage(self.data_viewer_samples, "Experiments")
		self.notebook.AddPage(self.data_viewer_combined, "Combined")
		self.notebook.AddPage(self.data_viewer_averaged, "Averaged")
		self.notebook.AddPage(self.data_viewer_head2tail, "Head to Tail")
		dv_spec_sizer.Add(self.notebook, 1, wx.EXPAND, 0)
		dv_data_line = wx.StaticLine(self.dv_spec_panel, wx.ID_ANY)
		dv_spec_sizer.Add(dv_data_line, 0, wx.EXPAND, 0)
		self.dv_spec_panel.SetSizer(dv_spec_sizer)
		dv_html_sizer.Add(self.dv_html, 1, wx.EXPAND, 0)
		self.dv_html_panel.SetSizer(dv_html_sizer)
		self.data_viewer_h_splitter.SplitHorizontally(self.dv_spec_panel, self.dv_html_panel)
		dv_data_sizer.Add(self.data_viewer_h_splitter, 1, wx.EXPAND, 0)
		self.dv_data_panel.SetSizer(dv_data_sizer)
		self.data_viewer_v_splitter.SplitVertically(self.dv_selection_panel, self.dv_data_panel)
		dv_main_sizer.Add(self.data_viewer_v_splitter, 1, wx.EXPAND, 0)
		self.SetSizer(dv_main_sizer)
		dv_main_sizer.Fit(self)
		self.Layout()
		# end wxGlade
	
	def _bind_events(self):
		self.sorter_panel.Bind(wx.EVT_LIST_ITEM_SELECTED, self.do_select_hit)
		
		# Peak Number Combo Box
		self.Bind(wx.EVT_COMBOBOX, self.on_peak_changed, self.peak_number_combo)
		self.peak_number_combo.Bind(wx.EVT_CHAR, self.on_peak_combo_char)
		
		# Show  `± %RSD` checkbox
		self.Bind(wx.EVT_CHECKBOX, self.on_toggle_rsd, self.show_rsd_check)
		
		# Next & previous buttons
		self.Bind(wx.EVT_BUTTON, self.next_peak, self.next_peak_btn)
		self.Bind(wx.EVT_BUTTON, self.previous_peak, self.previous_peak_btn)
		
		# WebView
		self.dv_html.Bind(wx.html2.EVT_WEBVIEW_NAVIGATING, self.on_html_navigating)
		self.dv_html.Bind(wx.html2.EVT_WEBVIEW_NEWWINDOW, self.on_html_new_window)
		
		# Filter Hits & Peaks, and show/hide peak buttons
		self.filter_hits_btn.Bind(wx.EVT_BUTTON, self.show_filter_hits)
		self.filter_peaks_btn.Bind(wx.EVT_BUTTON, self.show_filter_peaks)
		self.hide_peak_button.Bind(wx.EVT_BUTTON, self.hide_peak)
		self.show_hidden_button.Bind(wx.EVT_BUTTON, self.toggle_hidden_peaks)
		
		
		# Spectra Notebook
		self.notebook.Bind(wx.EVT_NOTEBOOK_PAGE_CHANGED, self.on_spectrum_changed)
		
		# Listener for html page being ready
		pub.subscribe(self.html_ready, "html_ready")
	
	def _create_btn_sizer(self, parent):
		# Create Buttons
		# TODO: Tooltips and bindings
		
		btn_sizer = wx.BoxSizer(wx.HORIZONTAL)
		
		# TODO: Two lines. Top line has filter peaks, Peak number, combobox and arrows
		#  Line two has hide peak (with eye icon), show hidden peaks, and show rsd button
		
		self.filter_peaks_btn = buttons.GenBitmapTextButton(self, -1, None, "Filter Peaks  ")
		self.filter_peaks_btn.SetBitmapLabel(get_icon("data-filter", 24))
		
		self.peak_number_combo = wx.ComboBox(parent, size=(100, -1), validator=CharValidator("int-only"))
		self.previous_peak_btn = buttons.GenBitmapButton(parent, bitmap=get_icon(wx.ART_GO_BACK, 24))
		self.previous_peak_btn.SetToolTip("Previous Peak")
		self.next_peak_btn = buttons.GenBitmapButton(parent, bitmap=get_icon(wx.ART_GO_FORWARD, 24))
		self.next_peak_btn.SetToolTip("Next Peak")
		
		btn_sizer.Add(self.filter_peaks_btn, 0, wx.EXPAND, 0)
		btn_sizer.AddSpacer(20)
		btn_sizer.Add(wx.StaticText(parent, label="Peak Number: "), 1, wx.ALIGN_CENTER_VERTICAL, 0)
		btn_sizer.Add(self.peak_number_combo, 0, wx.EXPAND, 0)
		btn_sizer.Add(self.previous_peak_btn, 0, wx.EXPAND, 0)
		btn_sizer.Add(self.next_peak_btn, 0, wx.EXPAND, 0)
		btn_sizer.AddSpacer(10)
		
		return btn_sizer
	
	def _create_btn_sizer_no2(self, parent):
		# Create Buttons
		# TODO: Tooltips and bindings
		
		btn_sizer = wx.BoxSizer(wx.HORIZONTAL)
		
		# TODO: Two lines. Top line has filter peaks, Peak number, combobox and arrows
		#  Line two has hide peak (with eye icon), show hidden peaks, and show rsd button
		
		self.hide_peak_button = buttons.GenBitmapTextButton(self, -1, None, "Show Peak")
		self.update_show_hide_peak_btn()
		
		self.show_hidden_button = buttons.GenBitmapTextButton(self, -1, None, "Show Hidden Peaks")
		self.update_hidden_peaks_btn()
		
		self.show_rsd_check = wx.CheckBox(parent, label="Show  `± %RSD`")
		self.show_rsd_check.SetValue(1)
		
		btn_sizer.Add(self.hide_peak_button, 0, wx.EXPAND, 0)
		btn_sizer.Add(self.show_hidden_button, 0, wx.EXPAND, 0)
		btn_sizer.AddSpacer(20)
		btn_sizer.Add(self.show_rsd_check, 0, wx.EXPAND | wx.ALL, 2)
		
		return btn_sizer
	
	def _create_hits_btn_sizer(self, parent):
		# Create Buttons
		# TODO: Tooltips and bindings
		
		btn_sizer = wx.BoxSizer(wx.HORIZONTAL)
		
		btn_sizer.Add(wx.StaticText(parent, label="Hits:"), 1, wx.ALIGN_BOTTOM | wx.LEFT, 8)

		self.filter_hits_btn = buttons.GenBitmapTextButton(self, -1, None, "Filter Hits  ")
		self.filter_hits_btn.SetBitmapLabel(get_icon("data-filter", 24))
		
		btn_sizer.Add(self.filter_hits_btn, 0, wx.EXPAND | wx.ALIGN_RIGHT, 0)
		btn_sizer.AddSpacer(20)
		
		return btn_sizer
	
	# Propgrid
	
	def _create_propgrid(self):
		xbar = "x̄"
		
		self.peak_propgrid.SetFont(wx.Font(9, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas'))
		
		rt_prop = wx.propgrid.StringProperty(label=f"Retention Time {xbar}", name="rt")
		self.peak_propgrid.Append(rt_prop)
		self.peak_propgrid.SetPropertyReadOnly(rt_prop)

		area_prop = wx.propgrid.StringProperty(f"Peak Area {xbar}", "area")
		self.peak_propgrid.Append(area_prop)
		self.peak_propgrid.SetPropertyReadOnly(area_prop)

		similarity_prop = wx.propgrid.StringProperty(f"MS Similarity {xbar}", "similarity")
		self.peak_propgrid.Append(similarity_prop)
		self.peak_propgrid.SetPropertyReadOnly(similarity_prop)

		n_expr_prop = wx.propgrid.StringProperty(f"No. Experiments  ", "n_expr")
		self.peak_propgrid.Append(n_expr_prop)
		self.peak_propgrid.SetPropertyReadOnly(n_expr_prop)
		
		self.peak_propgrid.SetMinSize((-1, 90))
		self.peak_propgrid.SetSize((-1, 90))
		self.peak_propgrid.SetMaxSize((-1, 90))
		
		self._populate_propgrid()
	
	def _create_raw_data_grid(self):
		self.raw_data_grid.CreateGrid((len(self._expr_name_list)), 2)
		self.raw_data_grid.EnableEditing(0)
		self.raw_data_grid.EnableDragRowSize(0)
		self.raw_data_grid.EnableDragGridSize(0)
		self.raw_data_grid.SetColLabelValue(0, "Retention Time")
		self.raw_data_grid.SetColLabelValue(1, "Peak Area")

		for expr_idx, expr_name in enumerate(self._expr_name_list):
			self.raw_data_grid.SetRowLabelValue(expr_idx, expr_name)
		
		self.raw_data_grid.SetDefaultCellFont(wx.Font(9, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas'))
		self.raw_data_grid.SetLabelFont(wx.Font(9, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas'))
		self.raw_data_grid.SetColLabelSize(wx.grid.GRID_AUTOSIZE)
		self.raw_data_grid.SetRowLabelSize(wx.grid.GRID_AUTOSIZE)
		self.raw_data_grid.SetRowLabelAlignment(wx.ALIGN_LEFT, wx.ALIGN_CENTER)
		
		self.raw_data_grid.SetDefaultCellAlignment(wx.ALIGN_RIGHT, wx.ALIGN_CENTER)
		
		self._autosize_raw_data_grid()
		
		# self.raw_data_grid.SetMinSize((-1, 90))
		# self.raw_data_grid.SetMaxSize(self.raw_data_grid.GetSize())
		self.raw_data_grid.SetMinSize(self.raw_data_grid.GetSize())
		
		self._populate_raw_data_grid()
	
	def _autosize_raw_data_grid(self):
		# self.raw_data_grid.AutoSize()
		self.raw_data_grid.AutoSizeRows()
		self.raw_data_grid.SetColSize(0, 120)
		self.raw_data_grid.SetColSize(1, 200)
		
	def _create_ms_sim_grid(self):
		self.ms_similarity_grid.CreateGrid((len(self._expr_name_list)), (len(self._expr_name_list)))
		self.ms_similarity_grid.EnableEditing(0)
		self.ms_similarity_grid.EnableDragRowSize(0)
		self.ms_similarity_grid.EnableDragGridSize(0)
		
		for expr_idx, expr_name in enumerate(self._expr_name_list):
			self.ms_similarity_grid.SetRowLabelValue(expr_idx, expr_name)
			self.ms_similarity_grid.SetColLabelValue(expr_idx, expr_name)
		
		self.ms_similarity_grid.SetDefaultCellFont(wx.Font(9, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas'))
		self.ms_similarity_grid.SetLabelFont(wx.Font(9, wx.MODERN, wx.NORMAL, wx.NORMAL, False, u'Consolas'))
		self.ms_similarity_grid.SetColLabelSize(wx.grid.GRID_AUTOSIZE)
		self.ms_similarity_grid.SetColLabelAlignment(wx.ALIGN_LEFT, wx.ALIGN_CENTER)
		self.ms_similarity_grid.SetRowLabelSize(wx.grid.GRID_AUTOSIZE)
		self.ms_similarity_grid.SetRowLabelAlignment(wx.ALIGN_LEFT, wx.ALIGN_CENTER)
		
		self.ms_similarity_grid.SetDefaultCellAlignment(wx.ALIGN_RIGHT, wx.ALIGN_CENTER)
		
		self.ms_similarity_grid.AutoSize()
		
		for expr_idx, expr_name in enumerate(self._expr_name_list):
			self.ms_similarity_grid.SetColSize(expr_idx, 80)
		
		# self.ms_similarity_grid.SetMinSize((-1, 90))
		# self.ms_similarity_grid.SetMaxSize(self.ms_similarity_grid.GetSize())
		self.ms_similarity_grid.SetMinSize(self.ms_similarity_grid.GetSize())
		
		self._populate_ms_sim_grid()
	
	def _populate_propgrid(self):
		
		if self.selected_peak:
			
			peak = self.selected_peak
			
			if self.show_rsd_check.GetValue():
				rt_stdev = f" ±{peak.rt_stdev / peak.rt:8.2%}"
				area_stdev = f" ±{peak.area_stdev / peak.area:8.2%}"
				similarity_stdev = f" ±{peak.ms_comparison_stdev / peak.average_ms_comparison:8.2%}"
			else:
				rt_stdev = area_stdev = similarity_stdev = ''
			
			self.peak_propgrid.SetPropertyValue("rt", f"{rounders(peak.rt / 60, '0.000000'):20}{rt_stdev}")
			self.peak_propgrid.SetPropertyValue("area", f"{rounders(peak.area, '0.000000'):20,}{area_stdev}")
			self.peak_propgrid.SetPropertyValue("similarity", f"{peak.average_ms_comparison:20.1f}{similarity_stdev}")
			self.peak_propgrid.SetPropertyValue("n_expr", f"{len(peak):20}")
	
	def _populate_raw_data_grid(self):
		
		if self.selected_peak:
			
			peak = self.selected_peak
			
			for expr_idx in range(len(self._expr_name_list)):
				self.raw_data_grid.SetCellValue(expr_idx, 0, f"{rounders(peak.rt_list[expr_idx] / 60, '0.000000')}")
				self.raw_data_grid.SetCellValue(expr_idx, 1, f"{rounders(peak.area_list[expr_idx], '0.000000'):,}")
				# self.raw_data_grid.SetCellAlignment(expr_idx, 2, wx.ALIGN_CENTER, wx.ALIGN_CENTER)
				
		self._autosize_raw_data_grid()
	
	def _populate_ms_sim_grid(self):
		
		if self.selected_peak:
			
			peak = self.selected_peak
			
			# print(peak.ms_comparison)
			print(type(peak.ms_comparison))
			for samples, sim_score in peak.ms_comparison.items():
				# print(samples)
				left_sample, right_sample = samples.split(" & ")
				print(left_sample, right_sample)
				left_sample_idx = self._expr_name_list.index(left_sample)
				right_sample_idx = self._expr_name_list.index(right_sample)
				print(left_sample_idx)
				print(right_sample_idx)
				rounded_sim_score = str(rounders(sim_score, "0.000"))
				self.ms_similarity_grid.SetCellValue(left_sample_idx, right_sample_idx, rounded_sim_score)
				self.ms_similarity_grid.SetCellValue(right_sample_idx, left_sample_idx, rounded_sim_score)
			
			#
			# for expr_idx in range(len(self._expr_name_list)):
			# 	self.ms_similarity_grid.SetCellValue(expr_idx, 0, str(peak.rt_list[expr_idx]))
			# 	self.ms_similarity_grid.SetCellValue(expr_idx, 1, str(peak.area_list[expr_idx]))
			# 	#
			# 	self.ms_similarity_grid.SetCellValue(expr_idx, 3, str(len(peak)))
				
		# self.ms_similarity_grid.AutoSize()
	
	def _clear_propgrid(self):
		
		self._load_html_home()
		
		self.peak_propgrid.SetPropertyValue("rt", "")
		self.peak_propgrid.SetPropertyValue("area", "")
		self.peak_propgrid.SetPropertyValue("similarity", "")
		self.peak_propgrid.SetPropertyValue("n_expr", "")
	
	def _clear_raw_data_grid(self):
		
		for expr_idx in range(len(self._expr_name_list)):
			self.raw_data_grid.SetCellValue(expr_idx, 0, '')
			self.raw_data_grid.SetCellValue(expr_idx, 1, '')
		# self.raw_data_grid.SetCellAlignment(expr_idx, 2, wx.ALIGN_CENTER, wx.ALIGN_CENTER)
		
		self._autosize_raw_data_grid()
	
	def _clear_ms_sim_grid(self):
		
		for expr_idx in range(len(self._expr_name_list)):
			for expr_idx_2 in range(len(self._expr_name_list)):
				self.ms_similarity_grid.SetCellValue(expr_idx, expr_idx_2, '')
				self.ms_similarity_grid.SetCellValue(expr_idx_2, expr_idx, '')
	
	def on_toggle_rsd(self, _):
		self._populate_propgrid()
	
	# Peak Selection
	
	def switch_peak(self, direction=1):
		if self.selected_peak is None:
			if direction > 0:
				current_index = -1
			elif direction <= 0:
				current_index = 0
		
		elif self.selected_peak.peak_number == self.peak_numbers[-1]:
			current_index = -1
		else:
			current_index = self.peak_numbers.index(self.selected_peak.peak_number)
		
		self.set_peak(self.peak_numbers[current_index + direction])
		
		if self.selected_peak:
			self.peak_number_combo.SetValue(str(self.selected_peak.peak_number))
		else:
			self.peak_number_combo.SetValue('')
	
	def next_peak(self, _):
		self.switch_peak(1)
	
	def previous_peak(self, _):
		self.switch_peak(-1)
	
	def set_peak(self, new_peak_no):
		start_time = datetime.datetime.now()
		self._clear_spectra()
		
		if new_peak_no != '':
			# A peak has been selected
			# If the combobox is cleared this function gets called with an empty string
			new_peak_no = int(new_peak_no)
			if int(new_peak_no) in self.peak_numbers:
				
				self._show_spectra_hit_holding_msg()
				
				for peak in self.peak_list:
					if peak.peak_number == new_peak_no:
						self.selected_peak = peak
						print(1, datetime.datetime.now() - start_time)
						self.dv_combined_spec.set_mass_spec(peak.combined_mass_spectrum, "Combined Spectrum")
						# self.dv_combined_spec.plot_mass_spec(peak.combined_mass_spectrum, "Combined Spectrum")
						print(2, datetime.datetime.now() - start_time)
						self.dv_averaged_spec.set_mass_spec(peak.averaged_mass_spectrum, "Averaged Spectrum")
						# self.dv_averaged_spec.plot_mass_spec(peak.averaged_mass_spectrum, "Averaged Spectrum")
						print(3, datetime.datetime.now() - start_time)
						self.dv_head2tail_spec_canvas.set_top_mass_spec(peak.combined_mass_spectrum,
																		"Combined Spectrum")
						# self.dv_averaged_spec.plot_mass_spec(peak.averaged_mass_spectrum, "Averaged Spectrum")
						print(3.5, datetime.datetime.now() - start_time)
						for i in range(len(self._expr_name_list)):
							if self.plot_expr_mass_spec(i):
								break
						self.plot_visible_spectra()
						print(4, datetime.datetime.now() - start_time)
						self._load_html_home()
						print(4.5, datetime.datetime.now() - start_time)
						self._populate_propgrid()
						print(5, datetime.datetime.now() - start_time)
						self._populate_raw_data_grid()
						self._populate_ms_sim_grid()
						print(5.5, datetime.datetime.now() - start_time)
						self._populate_list()
						print(6, datetime.datetime.now() - start_time)
						break
			
			else:
				# TODO: If peak is hidden display different message, with prompt to show hidden peaks
				wx.MessageBox("Invalid Peak Number!", "Invalid Peak Number!")
				if self.selected_peak:
					self.peak_number_combo.SetValue(str(self.selected_peak.peak_number))
				else:
					self.peak_number_combo.SetValue('')
				
				self.peak_number_combo.SetInsertionPointEnd()
		
		else:
			# Clear tree
			self.selected_peak = None
			self.sorter_panel.DeleteAllItems()
			self._clear_propgrid()
			self._clear_raw_data_grid()
			self._clear_ms_sim_grid()
			
			self._show_spectra_holding_msg()
		
		self.update_show_hide_peak_btn()
		
		print(7, datetime.datetime.now() - start_time)
	
	def update_show_hide_peak_btn(self):
		if self.selected_peak:
			print(self.selected_peak.hidden)
			self.hide_peak_button.Enable()
			if self.selected_peak.hidden:
				self.hide_peak_button.SetLabelText("Show Peak")
				# self.hide_peak_button.SetBitmapLabel(get_icon(wx.ART_TICK_MARK, 24))
				self.hide_peak_button.SetBitmapLabel(get_icon("show-open-eye", 24))
			else:
				self.hide_peak_button.SetLabelText("Hide Peak")
				# self.hide_peak_button.SetBitmapLabel(get_icon(wx.ART_CROSS_MARK, 24))
				self.hide_peak_button.SetBitmapLabel(get_icon("hide-closed-eye", 24))
		
		else:
			self.hide_peak_button.Disable()
			# self.hide_peak_button.SetLabelText("Hide Peak")
			# # self.hide_peak_button.SetBitmapLabel(get_icon(wx.ART_CROSS_MARK, 24))
			# self.hide_peak_button.SetBitmapLabel(get_icon("hide-closed-eye", 24))
			self.hide_peak_button.SetLabelText("Show Peak")
			# self.hide_peak_button.SetBitmapLabel(get_icon(wx.ART_TICK_MARK, 24))
			self.hide_peak_button.SetBitmapLabel(get_icon("show-open-eye", 24))
		
		self.hide_peak_button.Refresh()
		
	def update_hidden_peaks_btn(self):
		if self.show_hidden_peaks:
			self.show_hidden_button.SetLabelText("Hide Hidden Peaks")
		else:
			self.show_hidden_button.SetLabelText("Show Hidden Peaks")
			
		self.show_hidden_button.Refresh()
	
	def on_peak_combo_char(self, event):
		keycode = int(event.GetKeyCode())
		if keycode == wx.WXK_RETURN:
			self.on_peak_changed(event)
		else:
			event.Skip()
	
	def on_peak_changed(self, event):
		self.set_peak(self.peak_number_combo.GetValue())
		event.Skip()
		
	# Hit List
	
	def _prepare_hit_list(self, peak):
		hit_list_0 = list(enumerate(peak.hits))
		hit_list_1 = self._truncate_hit_list(hit_list_0)
		hit_list_3 = self._filter_hit_list(hit_list_1)
		
		return hit_list_3
	
	def _truncate_hit_list(self, hit_list):
		# Limit to n_hits
		if self.n_hits:
			hit_list = hit_list[:self.n_hits]
		
		return hit_list
	
	def _filter_hit_list(self, hit_list):
		# Filter hits
		
		filtered_hit_list = []
		
		for hit_number, hit in hit_list:
			if not self.min_mf <= hit.match_factor:
				continue
			if not self.min_rmf <= hit.reverse_match_factor:
				continue
			if not self.min_freq <= len(hit):
				continue
			
			filtered_hit_list.append((hit_number, hit))
		
		return filtered_hit_list
	
	def _populate_list(self):
		
		self.sorter_panel.DeleteAllItems()
		
		if self.selected_peak:
			
			for hit_no, hit in self._prepare_hit_list(self.selected_peak):
				self.sorter_panel.Append((
						hit_no + 1,
						hit.name,
						f"{hit.match_factor:.1f}",
						len(hit),
						))
		
		# Sort by Hit number, ascending
		# TODO: Preserve sort state
		
		self.sorter_panel.SortListItems(0)
	
	# Hit Selection
	
	def select_hit(self, hit_idx):
		item_idx = self.sorter_panel.FindItem(data=hit_idx)
		if item_idx != wx.NOT_FOUND:
			self.sorter_panel.Select(item_idx)
		else:
			# Hit no longer in list; clear WebView window
			self._load_html_home()
	
	def do_select_hit(self, _):
		focused_item = self.sorter_panel.GetFocusedItem()
		hit_idx = self.sorter_panel.GetItemData(focused_item)
		
		hit = self.selected_peak.hits[hit_idx]
		
		if hit == self.selected_hit:
			# Selection hasn't changed
			return
		else:
			self.selected_hit = hit
		
		self.dv_reference_spec_canvas.set_mass_spec(hit.reference_data.mass_spec, "Reference Spectrum")
		self.dv_head2tail_spec_canvas.set_bottom_mass_spec(hit.reference_data.mass_spec, "Reference Spectrum")
		self.plot_visible_spectra()
		
		quoted_hit = self.selected_hit.quoted_string()
		samples = "/".join(self._expr_name_list)
		self.dv_url = f"http://localhost:5000/hit/{samples}?data={quoted_hit}"
		
		if (cache_dir / hit.cas).is_file():
			# If data already cached, display the page immediately
			self.html_ready(self.dv_url)
		else:
			# Load the page in the background
			self.dv_html.LoadURL(self.dv_loading_url)
			data_getter = FlaskThread(self, self.dv_url)
			data_getter.start()
		return

	# Spectra
	
	def on_spectrum_changed(self, _):
		self.plot_visible_spectra()
		self.freeze_hidden_tabs()
	
	def plot_visible_spectra(self):
		for spec_panel in {
				self.dv_combined_spec, self.dv_averaged_spec,
				self.dv_samples_spec_canvas, self.dv_reference_spec_canvas
				}:
			if spec_panel.IsShownOnScreen():
				if spec_panel.mass_spec and not spec_panel.plotted:
					spec_panel.plot_mass_spec()
		
		if self.dv_head2tail_spec_canvas.IsShownOnScreen():

			if self.dv_head2tail_spec_canvas.top_mass_spec \
				and self.dv_head2tail_spec_canvas.bottom_mass_spec \
				and not self.dv_head2tail_spec_canvas.plotted:
				self.dv_head2tail_spec_canvas.plot_head2tail()
			else:
				if self.selected_peak:
					self._show_head2tail_hit_holding_msg()
	
	def plot_expr_mass_spec(self, expr_index, do_plotting=False):
		"""
		Plot the Mass Spec for the experiment with the given index
		
		:param expr_index:
		:type expr_index: int
		:param do_plotting: Whether the spectrum should be plotted now or later
		:type do_plotting: bool
		
		:return: Whether the mass spectrum was plotted (i.e. whether there is a mass spectrum for the given experiment)
		:rtype: bool
		"""
		
		self.current_expr = expr_index % len(self._expr_name_list)
		
		ms = self.selected_peak.ms_list[self.current_expr]
		expr_name = self._expr_name_list[self.current_expr]
		
		if ms:
			if do_plotting:
				self.dv_samples_spec_canvas.plot_mass_spec(ms, expr_name)
			else:
				self.dv_samples_spec_canvas.set_mass_spec(ms, expr_name)
			
			return True
		
		else:
			self.dv_samples_spec_canvas.clear()
			self.dv_samples_spec_canvas.show_message(f"No Peak for Experiment '{expr_name}'")
			
			return False
	
	def _clear_spectra(self):
		for widget in self._iter_spectra_widgets():
			widget.clear()

	def freeze_hidden_tabs(self):
		for spec_panel in {
				self.dv_combined_spec, self.dv_averaged_spec, self.dv_samples_spec_canvas,
				self.dv_head2tail_spec_canvas, self.dv_reference_spec_canvas
				}:
			if spec_panel.IsShownOnScreen():
				if spec_panel.IsFrozen():
					spec_panel.Thaw()
			else:
				if not spec_panel.IsFrozen():
					spec_panel.Freeze()
		
	def _show_spectra_holding_msg(self):
		for widget in self._iter_spectra_widgets():
			widget.clear()
			widget.show_message(f"⟸ Select a Peak using the dropdown or buttons on the left.")
	
	_spectra_hit_holding_msg = f"⇙ Select a Hit from the list on the bottom left."
	
	def _show_spectra_hit_holding_msg(self):
		self.dv_reference_spec_canvas.clear()
		self.dv_head2tail_spec_canvas.clear()

		self._show_reference_hit_holding_msg()
		self._show_head2tail_hit_holding_msg()
	
	def _show_reference_hit_holding_msg(self):
		# self.dv_reference_spec_canvas.ax.arrow(0.1, 0.5, 0.1, 0, head_width=0.05)
		self.dv_reference_spec_canvas.show_message(self._spectra_hit_holding_msg)
		
	def _show_head2tail_hit_holding_msg(self):
		# self.dv_head2tail_spec_canvas.ax.arrow(0.1, 0.5, 0.1, 0, head_width=0.05)
		self.dv_head2tail_spec_canvas.show_message(self._spectra_hit_holding_msg)
	
	def reset_view(self):
		self.get_selected_spectrum().reset_view()
		
	def previous_view(self):
		self.get_selected_spectrum().previous_view()
		
	def rescale_x(self):
		self.get_selected_spectrum().rescale_x()
		
	def rescale_y(self):
		self.get_selected_spectrum().rescale_y()
	
	def get_selected_spectrum(self):
		return self.get_selected_page().GetChildren()[0]
	
	def _iter_spectra_widgets(self):
		for widget in {
				self.dv_reference_spec_canvas,
				self.dv_head2tail_spec_canvas,
				self.dv_samples_spec_canvas,
				self.dv_combined_spec,
				self.dv_averaged_spec,
				}:
			yield widget
	
	# Filter Dialog
	
	def _setup_filter_hits_dialog(self):
		# Filter Hits Dialog
		self.default_hits_filter_settings()
		self.filter_hits_dialog = DataViewerHitFilterDialog(self)
	
	def default_hits_filter_settings(self):
		self.min_mf = 0
		self.min_rmf = 0
		self.n_hits = 5
		self.min_freq = 0
	
	def show_filter_hits(self, event=None):
		# Filter Hits clicked
		if self.filter_hits_dialog.IsShownOnScreen():
			wx.CallAfter(self.filter_hits_dialog.SetFocus)
			wx.CallAfter(self.filter_hits_dialog.Raise)
		else:
			self.filter_hits_dialog.Show()
		
	def show_filter_peaks(self, event=None):
		# Filter Peaks clicked
		# TODO: Hide peaks from dropdown filtered out
		pass
		# if self.filter_hits_dialog.IsShownOnScreen():
		# 	wx.CallAfter(self.filter_hits_dialog.SetFocus)
		# 	wx.CallAfter(self.filter_hits_dialog.Raise)
		# else:
		# 	self.filter_hits_dialog.Show()
	
	def hide_peak(self, event=None):
		self.selected_peak.hidden = not self.selected_peak.hidden
		self.update_show_hide_peak_btn()
		self.project.unsaved_changes = True
		EVT_PROJECT_CHANGE.trigger()
	
	def toggle_hidden_peaks(self, event=None):
		self.show_hidden_peaks = not self.show_hidden_peaks
		self.update_hidden_peaks_btn()
		self._refresh_peak_numbers()
	
	def _refresh_peak_numbers(self):
		self.peak_numbers = set()
		for peak in self.peak_list:
			# Check if all of the peak's hits have been filtered out
			if self._prepare_hit_list(peak):
				if self.show_hidden_peaks:
					self.peak_numbers.add(peak.peak_number)
				else:
					if not peak.hidden:
						self.peak_numbers.add(peak.peak_number)
						
		# Convert peak_numbers to a list and sort smallest to largest
		self.peak_numbers = sorted(list(self.peak_numbers))
		
		# Clear the combobox
		self.peak_number_combo.Clear()
		
		for n in self.peak_numbers:
			self.peak_number_combo.Append(str(n))
		
		# Set the combobox value to the current peak
		if self.selected_peak:
			if self.selected_peak.peak_number in self.peak_numbers:
				self.peak_number_combo.ChangeValue(str(self.selected_peak.peak_number))
			else:
				self.peak_number_combo.SetValue('')
				self.set_peak('')
		else:
			self.peak_number_combo.ChangeValue('')

	# HTML Page
	
	def _load_html_home(self):
		if self.dv_html.GetCurrentURL() != self.dv_html_home:
			wx.CallAfter(self.dv_html.LoadURL, self.dv_html_home)
	
	def on_html_navigating(self, event):
		
		if not event.GetURL():
			event.Skip()
			return
		
		if event.GetURL() == self.dv_html_home:
			event.Skip()
			return
		
		escaped_dv_url = self.dv_url.replace(" ", "%20")
		
		if event.GetURL() == self.dv_loading_url:
			# If current url == self.dv_url, page has already loaded do prevent navigating
			if self.dv_html.GetCurrentURL() == escaped_dv_url:
				event.Veto()
				return
			else:
				event.Skip()
				return
		
		if event.GetURL() == escaped_dv_url:
			event.Skip()
		else:
			event.Veto()
	
	@staticmethod
	def on_html_new_window(event):
		webbrowser.open(event.GetURL())
	
	def html_ready(self, url):
		if url == self.dv_url:
			if self.dv_html.GetCurrentURL() != self.dv_url:
				self.dv_html.LoadURL(self.dv_url)
				
	# Other
	
	@property
	def project(self):
		if self.Parent.Name == "CompoundsDataPanel":
			return self.Parent.project
		else:
			return self.Parent.Parent.project
		
	@property
	def _expr_name_list(self):
		return self.project.experiment_name_list

	@property
	def peak_list(self):
		return self.project.consolidated_peaks
	
	def change_experiment(self, direction=1):
		"""
		Change experiment, either to the right (+) or the left (-).

		:param direction: The direction to move, either + (right) or the - (left), and how fare to move
		:type direction: int
		"""
		print("change_experiment in data viewer")
		# if direction not in {1, -1}:
		if not isinstance(direction, int):
			warnings.warn("Unknown direction, reverting to 1 (Next)")
			direction = 1
		
		if direction == 0:
			warnings.warn("Direction = 0, not moving")
			return
		
		self.plot_expr_mass_spec(self.current_expr + direction, do_plotting=True)

# end of class DataViewer


class DataViewerHitFilterDialog(ConsolidatedSortFilterDialog):
	def __init__(
			self, parent, id=wx.ID_ANY, title="Filter Hits",
			pos=wx.DefaultPosition, size=(220, 350), style=0,
			name="DataViewerHitFilterDialog"
			):
		
		ConsolidatedSortFilterDialog.__init__(
				self, parent, id=id, title=title, pos=pos, size=size,
				style=style | wx.RESIZE_BORDER, name=name)
	
	def create_main_panel(self):
		self.main_panel = wx.Panel(self, wx.ID_ANY)
		
		grid_sizer_1 = wx.FlexGridSizer(5, 1, 5, 10)
		
		grid_sizer_1.Add(self.create_min_freq_sizer(), 1, wx.EXPAND | wx.TOP, 3)
		grid_sizer_1.Add(self.create_min_mf_sizer(), 1, wx.EXPAND, 0)
		grid_sizer_1.Add(self.create_min_hits_sizer(), 1, wx.EXPAND, 0)
		
		self.main_panel.SetSizer(grid_sizer_1)
		
		return self.main_panel
	
	# All Settings
	def load_settings(self):
		self._load_mf_settings()
		self._load_n_hits_settings()
		self._load_freq_settings()
	
	def apply_settings(self):
		self._apply_mf_settings()
		self._apply_n_hits_settings()
		self._apply_freq_settings()
		
		# Get Hit No. for currently selected peak
		selected_item = self.Parent.sorter_panel.GetFirstSelected()

		if selected_item != wx.NOT_FOUND:
			hit_idx = self.Parent.sorter_panel.GetItemData(selected_item)
		
			self.Parent._refresh_peak_numbers()
			self.Parent._populate_list()
		
			# Select that hit if it is still there
			self.Parent.select_hit(hit_idx)
			
		else:
			self.Parent._refresh_peak_numbers()
			self.Parent._populate_list()
		
	# Buttons
	
	def create_buttons_sizer(self):
		btn_sizer = wx.GridSizer(2, 2, 0, 0)
		
		even_btn_kwargs = dict(sizer_flags=wx.RIGHT, sizer_border=5)
		self.cancel_btn = create_button(self, wx.ID_CANCEL, sizer=btn_sizer)
		self.reset_btn = create_button(self, label="Reset", handler=self.on_reset, sizer=btn_sizer, **even_btn_kwargs)
		self.apply_btn = create_button(self, wx.ID_APPLY, handler=self.on_apply, sizer=btn_sizer)
		self.ok_btn = create_button(self, wx.ID_OK, handler=self.on_ok, sizer=btn_sizer, **even_btn_kwargs)
		
		return btn_sizer
	
	def on_reset(self, event):
		self._reset_mf_settings()
		self._reset_n_hits_settings()
		self._reset_freq_settings()


class FlaskThread(threading.Thread):
	"""
	DataViewer version of the FlaskThread from old GSMatch
	"""
	
	def __init__(self, parent, url):
		"""
		:param parent: The gui object to send events to
		:type parent: DataViewer
		:param url: The url to preload
		:type url: str
		"""
		
		threading.Thread.__init__(self, name="FlaskThread")
		self._parent = parent
		self.url = url
	
	def run(self):
		"""
		Overrides Thread.run. Don't call this directly as it is called internally
		when you call Thread.start().
		"""
		
		requests.get(self.url)
		wx.CallAfter(pub.sendMessage, "html_ready", url=self.url)

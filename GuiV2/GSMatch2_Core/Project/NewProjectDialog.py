#  !/usr/bin/env python
#   -*- coding: utf-8 -*-
#
#  NewProjectDialog.py
#
#  This file is part of GunShotMatch
#
#  Copyright (c) 2019-2020 Dominic Davis-Foster <dominic@davis-foster.co.uk>
#
#  GunShotMatch is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  GunShotMatch is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
# generated by wxGlade 0.9.3 on Sun Dec  1 10:21:44 2019
#


# stdlib
import datetime
import getpass
import socket

# 3rd party
from domdf_wxpython_tools import file_dialog, file_dialog_multiple
from domdf_wxpython_tools.picker import file_picker

# this package
from GuiV2.GSMatch2_Core.utils import lookup_filetype
from GuiV2.GSMatch2_Core.Config import internal_config
from GuiV2.GSMatch2_Core import SorterPanels
from GuiV2.GSMatch2_Core.IDs import *
from GuiV2.GSMatch2_Core import Experiment
from GuiV2.GSMatch2_Core.GUI.validators import ProjectAmmoValidator, ProjectMethodValidator, ProjectNameValidator
from GuiV2.GSMatch2_Core.io import load_info_json
from GuiV2.GSMatch2_Core import Method
from GuiV2.GSMatch2_Core import Project
from GuiV2.GSMatch2_Core import utils

'''
# begin wxGlade: dependencies
from ExperimentSorterPanel import ExperimentSorterPanel
# end wxGlade
'''

# begin wxGlade: extracode
# end wxGlade


class NewProjectDialog(wx.Dialog, Method.MethodPickerMixin):
	def __init__(self, *args, **kwds):
		# begin wxGlade: NewProjectDialog.__init__
		kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
		wx.Dialog.__init__(self, *args, **kwds)
		self.SetSize((650, 740))
		self.main_panel = wx.Panel(self, wx.ID_ANY)
		self.name_value = wx.TextCtrl(self.main_panel, wx.ID_ANY, "")
		self.user_value = wx.TextCtrl(self.main_panel, wx.ID_ANY, "")
		self.device_value = wx.TextCtrl(self.main_panel, wx.ID_ANY, "")
		self.description_value = wx.TextCtrl(self.main_panel, wx.ID_ANY, "", style=wx.TE_MULTILINE)
		self.new_expr_button = wx.Button(self.main_panel, wx.ID_ANY, "&New Experiment")
		self.add_expr_button = wx.Button(self.main_panel, wx.ID_ANY, "&Add Experiment")
		self.remove_expr_button = wx.Button(self.main_panel, wx.ID_ANY, "&Remove Experiment")
		self.remove_expr_button_copy = wx.Button(self.main_panel, wx.ID_ANY, "Clear")
		self.expr_list_panel = SorterPanels.ExperimentSorterPanel(self.main_panel, wx.ID_ANY)
		self.ammo_picker = file_picker(self.main_panel, wx.ID_ANY, style=wx.TAB_TRAVERSAL|wx.FD_OPEN, title="Choose an Ammunition Details file", filetypestring="ammo Files", extension="ammo")
		self.new_ammo_button = wx.Button(self.main_panel, wx.ID_ANY, "New")
		self.edit_ammo_button = wx.Button(self.main_panel, wx.ID_ANY, "Edit")
		self.meth_picker = file_picker(self.main_panel, wx.ID_ANY, style=wx.TAB_TRAVERSAL|wx.FD_OPEN, title="Choose a Method", filetypestring="Method Files", extension="method")
		self.new_meth_button = wx.Button(self.main_panel, wx.ID_ANY, "New")
		self.edit_meth_button = wx.Button(self.main_panel, wx.ID_ANY, "Edit")

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_BUTTON, self.on_new_experiment, self.new_expr_button)
		self.Bind(wx.EVT_BUTTON, self.on_add_experiment, self.add_expr_button)
		self.Bind(wx.EVT_BUTTON, self.on_remove_experiment, self.remove_expr_button)
		self.Bind(wx.EVT_BUTTON, self.on_clear_experiments, self.remove_expr_button_copy)
		self.Bind(wx.EVT_BUTTON, self.on_new_ammo, self.new_ammo_button)
		self.Bind(wx.EVT_BUTTON, self.on_edit_ammo, self.edit_ammo_button)
		self.Bind(wx.EVT_BUTTON, self.on_new_method, self.new_meth_button)
		self.Bind(wx.EVT_BUTTON, self.on_edit_method, self.edit_meth_button)
		# end wxGlade
	
		self.user_value.SetValue(getpass.getuser())
		self.device_value.SetValue(socket.gethostname())
		
		self.Bind(wx.EVT_BUTTON, self.on_create, id=self.ok_button)
		self.SetExtraStyle(wx.WS_EX_VALIDATE_RECURSIVELY)
		self.filename = None
		#self.experiment_list = []
		
		self.project = Project.Project.new_empty()

	def __set_properties(self):
		# begin wxGlade: NewProjectDialog.__set_properties
		self.SetTitle("New Project")
		self.SetSize((650, 740))
		self.name_value.SetMinSize((-1, 29))
		self.name_value.SetToolTip("The name of the Project")
		self.name_value.SetValidator(ProjectNameValidator())
		self.user_value.SetMinSize((-1, 29))
		self.user_value.SetToolTip("The user who created the Project")
		self.user_value.Enable(False)
		self.device_value.SetMinSize((-1, 29))
		self.device_value.SetToolTip("The device that created the Project")
		self.device_value.Enable(False)
		self.description_value.SetMinSize((525, 87))
		self.description_value.SetToolTip("A description of the Project")
		self.ammo_picker.SetMinSize((-1, 30))
		self.ammo_picker.SetMaxSize((-1, 30))
		self.ammo_picker.SetValidator(ProjectAmmoValidator())
		self.new_ammo_button.SetMinSize((-1, 29))
		self.edit_ammo_button.SetMinSize((-1, 29))
		self.meth_picker.SetMinSize((-1, 30))
		self.meth_picker.SetMaxSize((-1, 30))
		self.meth_picker.SetValidator(ProjectMethodValidator())
		self.new_meth_button.SetMinSize((-1, 29))
		self.edit_meth_button.SetMinSize((-1, 29))
		# end wxGlade
	
		self.meth_picker.SetValue(str(internal_config.last_method))
		self.Bind(wx.EVT_TEXT, self.on_method_change, self.meth_picker.dir_value)
		
		self.ammo_picker.SetValue(str(internal_config.last_ammo))
		self.Bind(wx.EVT_TEXT, self.on_ammo_change, self.ammo_picker.dir_value)

	def __do_layout(self):
		# begin wxGlade: NewProjectDialog.__do_layout
		outer_sizer = wx.BoxSizer(wx.VERTICAL)
		main_sizer = wx.BoxSizer(wx.VERTICAL)
		meth_picker_box = wx.StaticBoxSizer(wx.StaticBox(self.main_panel, wx.ID_ANY, "Method: "), wx.VERTICAL)
		meth_picker_sizer = wx.BoxSizer(wx.HORIZONTAL)
		ammo_picker_box = wx.StaticBoxSizer(wx.StaticBox(self.main_panel, wx.ID_ANY, "Ammunition Details: "), wx.VERTICAL)
		ammo_picker_sizer = wx.BoxSizer(wx.HORIZONTAL)
		sizer_2 = wx.StaticBoxSizer(wx.StaticBox(self.main_panel, wx.ID_ANY, "Experiments: "), wx.VERTICAL)
		sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
		project_properties_grid = wx.FlexGridSizer(4, 2, 5, 5)
		intro_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Create a New Project")
		intro_label.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, ""))
		main_sizer.Add(intro_label, 0, 0, 5)
		static_line_1 = wx.StaticLine(self.main_panel, wx.ID_ANY)
		main_sizer.Add(static_line_1, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 6)
		name_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Name: ")
		name_label.SetToolTip("The name of the Project")
		project_properties_grid.Add(name_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		project_properties_grid.Add(self.name_value, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
		user_label = wx.StaticText(self.main_panel, wx.ID_ANY, "User: ")
		user_label.SetToolTip("The user who created the Project")
		project_properties_grid.Add(user_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		project_properties_grid.Add(self.user_value, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
		device_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Device: ")
		device_label.SetToolTip("The device that created the Project")
		project_properties_grid.Add(device_label, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		project_properties_grid.Add(self.device_value, 0, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND, 0)
		description_label = wx.StaticText(self.main_panel, wx.ID_ANY, "Description: ")
		description_label.SetToolTip("A description of the Project\n")
		project_properties_grid.Add(description_label, 0, wx.TOP, 6)
		project_properties_grid.Add(self.description_value, 0, 0, 0)
		main_sizer.Add(project_properties_grid, 2, wx.EXPAND, 0)
		static_line_2 = wx.StaticLine(self.main_panel, wx.ID_ANY)
		main_sizer.Add(static_line_2, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 6)
		sizer_1.Add(self.new_expr_button, 0, wx.LEFT | wx.RIGHT, 5)
		sizer_1.Add(self.add_expr_button, 0, wx.RIGHT, 5)
		sizer_1.Add(self.remove_expr_button, 0, wx.RIGHT, 5)
		sizer_1.Add(self.remove_expr_button_copy, 0, wx.RIGHT, 5)
		sizer_2.Add(sizer_1, 1, wx.EXPAND | wx.TOP, 5)
		sizer_2.Add(self.expr_list_panel, 6, wx.BOTTOM | wx.EXPAND | wx.RIGHT, 2)
		main_sizer.Add(sizer_2, 1, wx.EXPAND, 0)
		static_line_3 = wx.StaticLine(self.main_panel, wx.ID_ANY)
		main_sizer.Add(static_line_3, 0, wx.EXPAND | wx.TOP, 6)
		ammo_picker_sizer.Add(self.ammo_picker, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, 2)
		ammo_picker_sizer.Add(self.new_ammo_button, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 5)
		ammo_picker_sizer.Add(self.edit_ammo_button, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 5)
		ammo_picker_box.Add(ammo_picker_sizer, 1, wx.EXPAND, 0)
		main_sizer.Add(ammo_picker_box, 1, wx.EXPAND | wx.TOP, 10)
		meth_picker_sizer.Add(self.meth_picker, 1, wx.ALIGN_CENTER_VERTICAL | wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, 2)
		meth_picker_sizer.Add(self.new_meth_button, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 5)
		meth_picker_sizer.Add(self.edit_meth_button, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 5)
		meth_picker_box.Add(meth_picker_sizer, 1, wx.EXPAND, 0)
		main_sizer.Add(meth_picker_box, 1, wx.EXPAND | wx.TOP, 10)
		self.main_panel.SetSizer(main_sizer)
		outer_sizer.Add(self.main_panel, 1, wx.ALL | wx.EXPAND, 10)
		self.SetSizer(outer_sizer)
		self.Layout()
		# end wxGlade
		
		btnsizer = self.CreateSeparatedButtonSizer(wx.OK | wx.CANCEL)
		
		self.ok_button = self.GetAffirmativeId()
		self.FindWindow(self.ok_button).SetLabel("Create")
		
		outer_sizer.Add(btnsizer, 0, wx.ALIGN_RIGHT | wx.EXPAND | wx.BOTTOM, 5)
			
	# Ammo
	
	def on_ammo_change(self, _):
		internal_config.last_ammo = self.ammo_picker.GetValue()
	
	def on_new_ammo(self, event):  # wxGlade: NewProjectDialog.<event_handler>
		utils.ammo_editor()
	
	def on_edit_ammo(self, event):  # wxGlade: NewProjectDialog.<event_handler>
		utils.ammo_editor(self.ammo_picker.GetValue())
	
	# Experiments
	
	def on_new_experiment(self, event):  # wxGlade: NewProjectDialog.<event_handler>
		with Experiment.NewExperimentDialog(self, wx.ID_ANY) as dlg:
			print(dlg.ShowModal())
			
			for expr_filename in dlg.filenames:
				#if expr_filename in self.experiment_list:
				if expr_filename in self.project.experiment_file_list:
					self.flag_duplicate(expr_filename)
					continue
				#self.experiment_list.append(expr_filename)
				self.project.add_experiment(expr_filename)
			
			self.update_expr_list()
				
	def update_expr_list(self):
		self.expr_list_panel.expr_list.DeleteAllItems()
		
		#if self.experiment_list:
		if self.project.experiment_file_list:
			
			itemDataMap = {}
			
			#for row_idx, expr_filename in enumerate(self.experiment_list):
			for row_idx, expr_filename in enumerate(self.project.experiment_file_list):
				
				expr_properties = load_info_json(expr_filename)
				
				expr_data = (
					expr_properties["name"], expr_filename, expr_properties["original_filename"],
					lookup_filetype(expr_properties["original_filetype"]),
					datetime.datetime.fromtimestamp(expr_properties["date_created"]).strftime("%d/%m/%Y %H:%M:%S"),
					expr_properties["user"],
					)
				
				self.expr_list_panel.expr_list.Append(expr_data)
				itemDataMap[row_idx] = expr_data
				self.expr_list_panel.expr_list.SetItemData(row_idx, row_idx)
				
			self.expr_list_panel.itemDataMap = itemDataMap
	
	def flag_duplicate(self, filename):
		# Show dialog that experiment is alsredy in list
		wx.MessageBox(f"The experiment '{filename}' is already selected.", 'Error', wx.OK | wx.ICON_ERROR, parent=self)
	
	def on_add_experiment(self, event):  # wxGlade: NewProjectDialog.<event_handler>
		# Ask the user which experiment(s) to open
		filename_list = file_dialog_multiple(
			self, "expr", "Open Experiment", "Experiment",
			style=wx.FD_OPEN | wx.FD_MULTIPLE,
			defaultDir=str(internal_config.last_experiment)
		)
		
		if not filename_list:
			return
		print(249)
		for filename in filename_list:
			try:
				self.project.add_experiment(filename)
			except ValueError:
			#if filename in self.experiment_list:
				self.flag_duplicate(filename)
				continue
			#self.experiment_list.append(filename)
		
		self.update_expr_list()
		
		internal_config.last_experiment = filename_list[-1]
	
	def on_remove_experiment(self, event):  # wxGlade: NewProjectDialog.<event_handler>
		self.project.remove_experiment(
				self.expr_list_panel.expr_list.GetItemText(
						self.expr_list_panel.expr_list.GetFirstSelected(),
						1,
						)
				)
		
		self.update_expr_list()
	
	def on_clear_experiments(self, event):  # wxGlade: NewProjectDialog.<event_handler>
		self.experiment_list = []
		self.update_expr_list()
		
	# Other
	
	def on_create(self, _):
		if self.Validate():
			
			n_experiments = self.expr_list_panel.expr_list.GetItemCount()
			
			if n_experiments == 0:
				if wx.MessageBox(
					"This will create a project with no Experiments.\nAre you sure you want to continue?",
					"Continue with 0 Experiments?",
					style=wx.YES_NO | wx.ICON_QUESTION,
					parent=self
					) == wx.NO:
					return
			
			# Ask the user where to save the project
			filename = file_dialog(
				self, "proj", "Save Project", "Project",
				style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT,
				defaultDir=str(internal_config.last_project)
				)
			
			if not filename:
				return
			
			internal_config.last_project = filename
			
			self.project.name = self.name_value.GetValue()
			self.project.description.value = self.description_value.GetValue()
			self.project.method.value = self.meth_picker.GetValue()
			self.project.ammo_details.value = self.ammo_picker.GetValue()
			
			self.filename = self.project.store_new(filename)
			#EVT_NEW_PROJECT_DIALOG_CLOSE.trigger()
			self.EndModal(wx.ID_OK)
		
	def on_close(self, event):  # wxGlade: NewProjectDialog.<event_handler>
		print(387)
	

	def on_new_method(self, event):  # wxGlade: NewProjectDialog.<event_handler>
		print("Event handler 'on_new_method' not implemented!")
		event.Skip()
	def on_edit_method(self, event):  # wxGlade: NewProjectDialog.<event_handler>
		print("Event handler 'on_edit_method' not implemented!")
		event.Skip()
# end of class NewProjectDialog


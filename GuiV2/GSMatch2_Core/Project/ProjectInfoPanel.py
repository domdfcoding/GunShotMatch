#  !/usr/bin/env python
#   -*- coding: utf-8 -*-
#
#  ProjectInfoPanel.py
#
#  This file is part of GunShotMatch
#
#  Copyright Â© 2019-2020 Dominic Davis-Foster <dominic@davis-foster.co.uk>
#
#  The methods on_property_changed, on_property_selected and
#  on_property_rightclick from the wxPython "PropertyGrid" demo.
#  Copyright The wxPython Team.
#  Licenced under the wxWindows Library Licence, Version 3.1
#
#  GunShotMatch is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  GunShotMatch is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#
# generated by wxGlade 0.9.3 on Wed Dec  4 09:52:37 2019
#


# 3rd party
import wx
import wx.adv
from pubsub import pub
from wx.propgrid import PropertyGrid

# This project
from GuiV2.GSMatch2_Core import Project
from GuiV2.GSMatch2_Core.GUI.constants import *


_ = wx.GetTranslation

# begin wxGlade: dependencies
import wx.propgrid
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class ProjectInfoPanel(wx.Panel):
	def __init__(self, parent, project, *args, **kwds):
		"""
		:param parent: The parent window.
		:type parent: wx.Window
		:param project:
		:type project:
		:param id: An identifier for the panel. wx.ID_ANY is taken to mean a default.
		:type id: wx.WindowID, optional
		:param pos: The panel position. The value wx.DefaultPosition indicates a default position,
		chosen by either the windowing system or wxWidgets, depending on platform.
		:type pos: wx.Point, optional
		:param size: The panel size. The value wx.DefaultSize indicates a default size, chosen by
		either the windowing system or wxWidgets, depending on platform.
		:type size: wx.Size, optional
		:param style: The window style. See wx.Panel.
		:type style: int, optional
		:param name: Window name.
		:type name: str, optional
		"""
		
		self.parent = parent
		self.project = project
		
		# begin wxGlade: ProjectInfoPanel.__init__
		kwds["style"] = kwds.get("style", 0) | wx.TAB_TRAVERSAL
		wx.Panel.__init__(self, *args, **kwds)
		self.property_grid = PropertyGrid(self, wx.ID_ANY)

		self.__set_properties()
		self.__do_layout()
		# end wxGlade
		
		self.property_grid.Bind(wx.propgrid.EVT_PG_CHANGED, self.on_property_changed)
		self.property_grid.Bind(wx.propgrid.EVT_PG_SELECTED, self.on_property_selected)
		self.property_grid.Bind(wx.propgrid.EVT_PG_RIGHT_CLICK, self.on_property_rightclick)
		pub.subscribe(self.commit_changes, "SaveProject")
	
	def __set_properties(self):
		# begin wxGlade: ProjectInfoPanel.__set_properties
		pass
		# end wxGlade
		
		# Show help as tooltips
		self.property_grid.SetExtraStyle(wx.propgrid.PG_EX_HELP_AS_TOOLTIPS)
		
		self._populate_properties()
	
	def __do_layout(self):
		# begin wxGlade: ProjectInfoPanel.__do_layout
		outer_sizer = wx.BoxSizer(wx.VERTICAL)
		outer_sizer.Add(self.property_grid, 1, wx.EXPAND, 0)
		self.SetSizer(outer_sizer)
		outer_sizer.Fit(self)
		self.Layout()
		# end wxGlade
	
		# Set Splitter position
		wx.CallAfter(self.property_grid.SetSplitterLeft)
		wx.CallAfter(self.Refresh)
	
	def _populate_properties(self):
		# Project Category
		self.property_grid.Append(wx.propgrid.PropertyCategory(f"Project: {self.project.name}"))
		
		# Name
		name_property = wx.propgrid.StringProperty("Name", value=str(self.project.name))
		name_property.SetHelpString(project_name_help)
		self.property_grid.Append(name_property)
		
		for prop in self.project.all_properties:
			# Add property
			property_item = prop.propgrid
			self.property_grid.Append(property_item)
			if not prop.editable:
				self.property_grid.SetPropertyReadOnly(property_item)
		
		# Experiment Categories
		for experiment in self.project.experiment_objects:
			self.property_grid.Append(wx.propgrid.PropertyCategory(f"Experiment: {experiment.name}"))
			
			# Experiment Name
			name_property = wx.propgrid.StringProperty(
					label="Name", name=f"{experiment.name}_name", value=experiment.name
					)
			name_property.SetHelpString(experiment_name_help)
			self.property_grid.Append(name_property)
			
			for prop in experiment.all_properties:
				# Add property
				property_item = prop.propgrid
				self.property_grid.Append(property_item)
				if not prop.editable:
					self.property_grid.SetPropertyReadOnly(property_item)
			
			# Collapse this category
			self.property_grid.Collapse(f"Experiment: {experiment.name}")
	
	def commit_changes(self):
		self.property_grid.CommitChangesFromEditor()
	
	def on_property_changed(self, event):
		"""
		Handler for events fired when property changed
		
		:param event:
		:type event:
		"""
		
		p = event.GetProperty()
		if p:
			# Set the new value in the record
			
			# Special case for name:
			if p.GetName() == "Name":
				self.project.name = p.GetValue()
			else:
				for prop in self.project.all_properties:

					if prop.name == p.GetName():
						prop.value = p.GetValue()
			
			# Tell ProjectDataPanel that there are unsaved changes
			if p.GetLabel() not in {"Date Modified"}:
				# Ignore fields that shouldn't trigger an unsaved state
				self.project.unsaved_changes = True
			
				print(f'{self.project.name}: {p.GetName()} changed to "{p.GetValueAsString()}"')
			else:
				return  # Prevents other handlers from getting the event
		event.Skip()
	
	def on_property_selected(self, event):
		"""
		Handler for events fired when property selected
		
		:param event:
		:type event:
		"""
		
		p = event.GetProperty()
		if p:
			print(f'{self.project.name}: {event.GetProperty().GetName()} selected')
		else:
			print(f'{self.project.name}: Nothing selected')
	
	def on_property_rightclick(self, event):
		"""
		Handler for event fired when a property is right clicked

		:param event:
		:type event:
		"""
		
		p = event.GetProperty()
		if p:
			print(f'{self.project.name}: {event.GetProperty().GetName()} right clicked')
		else:
			print(f"{self.project.name}: Nothing right clicked")
	
	def export_pdf(self, input_filename, output_filename):
		Project.InfoPDFExporter(
				self.project,
				input_filename=input_filename,
				output_filename=output_filename,
				)


# end of class ProjectInfoPanel

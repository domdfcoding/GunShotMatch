#  !/usr/bin/env python
#   -*- coding: utf-8 -*-
#
#  file_fixer.py
#
#  This file is part of GunShotMatch
#
#  Copyright Â© 2020 Dominic Davis-Foster <dominic@davis-foster.co.uk>
#
#  GunShotMatch is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  GunShotMatch is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#
# generated by wxGlade 0.9.0 on Thu Feb  7 18:16:22 2019
#

__author__ = "Dominic Davis-Foster"
__copyright__ = "Copyright 2019-2020 Dominic Davis-Foster"

__license__ = "GPLv3"
__version__ = "0.2.0"
__email__ = "dominic@davis-foster.co.uk"

# stdlib
import sys
import datetime
import json
import pathlib
import tarfile
import tempfile

sys.path.append("..")


# this package
from GuiV2.GSMatch2_Core import watchdog
from GuiV2.GSMatch2_Core.Project.consolidate import (
	ConsolidateEncoder,
	)
from GuiV2.GSMatch2_Core.utils import filename_only


# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

import shutil
import argparse

parser = argparse.ArgumentParser()

parser.add_argument(
		"--remove-alignment", "-a",
		action='store_true',
		dest="remove_alignment",
		help="Remove Alignment data from the Project file.",
		)
# TODO: Remove identify - requires opening and resaving experiments
# parser.add_argument(
# 		"--remove-identify", "-i",
# 		action='store_true',
# 		dest="remove_identify",
# 		help="Remove Compound identification data from the Project file.",
# 		)
parser.add_argument(
		"--remove-consolidate", "-c",
		action='store_true',
		dest="remove_consolidate",
		help="Remove Consolidate data from the Project file.",
		)

parser.add_argument(
		"project",
		help="The Project file to fix.",
		)

args = parser.parse_args()

if not any([
		args.remove_alignment,
		# args.remove_identify,
		args.remove_consolidate,
		]):
	parser.error(
			'No action requested. Please specify at least one of '
			'--remove-alignment '
			# '--remove-identify '
			'or --remove-consolidate'
			)


# TODO: check filename ends in .proj
if pathlib.Path(args.project).suffix != ".proj":
	parser.error("'project' must be a Project file (*.proj)")

		
# Set date modified value
date_modified = datetime.datetime.now().timestamp()

# One of the files has been changed
with tempfile.TemporaryDirectory() as tempdir:
	
	tarfile.open(args.project, mode="r").extractall(tempdir)
	
	print(tempdir)
	input(">")
	
	tempdir_p = pathlib.Path(tempdir)
	
	if not (tempdir_p / "changes").is_dir():
		(tempdir_p / "changes").mkdir()
	
	timestamp_dir = tempdir_p / "changes" / datetime.datetime.fromtimestamp(date_modified).strftime("%Y%m%d %H%M%S")
	
	timestamp_dir.mkdir()
	
	# The user and device who made the changes
	user, device = watchdog.user_info()
	(timestamp_dir / "user").write_text(user)
	(timestamp_dir / "device").write_text(device)
	
	# TODO
	# if resave_experiments:
	 	# # Move old experiment objects to timestamp_dir
		# for expr_obj, expr_filename in zip(self.experiment_objects, self.experiment_file_list):
		# 	expr_filename = filename_only(expr_filename)
		# 	shutil.move(tempdir_p / expr_filename, timestamp_dir / expr_filename)
		# 	expr_obj.store(tempdir_p / expr_filename)
	
	# Read the old info file
	print(open(tempdir_p / "info.json").read())
	info = json.loads((tempdir_p / "info.json").read_text())
	
	# Move info.json into changes
	shutil.move(tempdir_p / "info.json", timestamp_dir / "info.json")
	
	if args.remove_alignment:
		# Move the alignment files to the timestamp_dir
		for fname in {
				"alignment_area.csv", "alignment_rt.csv",
				"alignment_ms.json", "alignment_rt.json", "alignment_area.json"
				}:
			try:
				shutil.move(tempdir_p / fname, timestamp_dir / fname)
			except FileNotFoundError:
				pass
		
		# Update the project info
		info["alignment_performed"] = False
		info["alignment_audit_record"] = None
	
	if args.remove_consolidate:
		# Move the consolidate files to the timestamp_dir
		try:
			shutil.move(tempdir_p / "consolidate.json", timestamp_dir / "consolidate.json")
		except FileNotFoundError:
			pass
			
		# Update the project info
		info["consolidate_performed"] = False
		info["consolidate_audit_record"] = None
	
	# Add the new info file to the archive
	info_json = json.dumps(info, indent=4)
	(tempdir_p / "info.json").write_text(info_json)
	
	# Tar the contents of the temporary directory over the project file
	with tarfile.open(args.project, mode="w") as project_file:
		project_file.add(tempdir_p, arcname="")
